
================================================================================
Файл: listing.py
================================================================================
import os

# Расширения файлов, которые будем обрабатывать
VALID_EXTENSIONS = {'.py', '.js', '.css', '.html'}

# Путь к корневой папке проекта
ROOT_DIR = r'D:\GitProjects\Torgi_monet-diplom'  # замените при необходимости

# Файл, куда будет сохранён итоговый листинг
OUTPUT_FILE = 'full_source_listing.txt'


def collect_source_code(root_path):
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as output:
        for dirpath, _, filenames in os.walk(root_path):
            for filename in filenames:
                ext = os.path.splitext(filename)[1]
                if ext in VALID_EXTENSIONS:
                    full_path = os.path.join(dirpath, filename)
                    rel_path = os.path.relpath(full_path, root_path)

                    output.write(f"\n{'='*80}\n")
                    output.write(f"Файл: {rel_path}\n")
                    output.write(f"{'='*80}\n")

                    try:
                        with open(full_path, 'r', encoding='utf-8') as f:
                            output.write(f.read())
                    except Exception as e:
                        output.write(f"[ОШИБКА ЧТЕНИЯ ФАЙЛА]: {e}\n")


if __name__ == '__main__':
    collect_source_code(ROOT_DIR)
    print(f"✅ Готово. Листинг сохранён в файл: {OUTPUT_FILE}")

================================================================================
Файл: admin_panel\config.py
================================================================================
import configparser
import os

def get_bool(str):
    return True if str.lower() == 'true' else False

class Config:
    def __init__(self, file_name):
        self.file_name = file_name

        #
        self.options = {
            "FastAPI": {
                "host": "127.0.0.1",
                "port": 80,
                "reload": False,
                "ssl_certfile": "path/cert.pem",  # Add path to SSL certificate
                "ssl_keyfile": "path/key.pem"
            },
            "MongoDB":{
                "url": "container"
            }
            ,
            "Smtp":{
                "login":"fet",
                "password":"aboba",
                "start_url":"http://127.0.0.1"
            }
        }

        self.read()

    # преобразование строки в нужный формат данных
    def set_settings(self, section, parameter, state):
        if (type(self.options[section][parameter]) == str):
            self.options[section][parameter] = state

        elif (type(self.options[section][parameter]) == bool):
            self.options[section][parameter] = get_bool(state)

        elif (type(self.options[section][parameter]) == int):
            self.options[section][parameter] = int(state)

        elif (type(self.options[section][parameter]) == float):
            self.options[section][parameter] = float(state)

    # запись настроек в файл
    def save(self):
        config = configparser.ConfigParser()

        for section in self.options:
            config.add_section(section)

            for parameter in self.options[section]:
                config.set(section, str(parameter), str(self.options[section][parameter]))

        with open(self.file_name, "w") as config_file:
            config.write(config_file)

    # чтение настроек в файл
    def read(self):
        if not os.path.exists(self.file_name):
            #
            self.save()
            self.read()

        else:
            config = configparser.ConfigParser()
            config.read(self.file_name)

            error_bool = False

            #
            for section in self.options:
                for parameter in self.options[section]:
                    try:
                        parameter_buf = config.get(section, parameter)
                        self.set_settings(section, parameter, parameter_buf)

                    except:
                        error_bool = True

            #
            if error_bool:
                self.save()

    #
    def get(self, section):
        return self.options[section]

    #
    def get_all(self):
        return self.options

    #
    def change_setion(self, section, parameter, value):
        config.set(section, str(parameter), str(value))
        config.save()



config = Config("config.ini")

================================================================================
Файл: admin_panel\deco.py
================================================================================
from functools import wraps
import os
import sys
from globals import *

def try_decorator(func):
    @wraps(func)
    async def inner_function(*args, **kwargs):
        try:
            return await func(*args, **kwargs)

        except Exception as e:
            function_name = func.__name__
           
            return {
                "error": {
                    "body": str(e),
                    "function": function_name
                },
                "success": False
            }
    return inner_function

================================================================================
Файл: admin_panel\globals.py
================================================================================
from config import config
#все глобальные переменные

from fastapi.templating import Jinja2Templates
templates = Jinja2Templates(directory="admin_panel/templates")


###################################################################
#MongoDB
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.server_api import ServerApi
import asyncio
from initialization_database import setup_collections


db_client = AsyncIOMotorClient(config.get('MongoDB')["url"], server_api=ServerApi('1'))
tm_db = db_client['Torgi_Monet']  # Создаем или подключаемся к базе данных 'Monetochki'

async def ping_server():
  try:
      await db_client.admin.command('ping')
      print("Pinged your deployment. You successfully connected to MongoDB!")
      await setup_collections(tm_db)
  except Exception as e:
      print(e)

#asyncio.run(ping_server())

########################################################################

smtp_username = config.get('Smtp')["login"]
smtp_password = config.get('Smtp')["password"]
smtp_link = config.get('Smtp')["start_url"]

########################################################################
from fastapi_login import LoginManager

SECRET_KEY = "SECRET_KEY"

manager = LoginManager(
    SECRET_KEY,
    token_url='/auth/token',
    use_cookie=True,
    use_header=False
)


async def get_user(mail: str):
    try:
        collection = tm_db['clients']
        
        # Находим пользователя по email
        client = await collection.find_one({"email": mail}, {"_id": 0})
        
        # Проверяем, найден ли пользователь и не заблокирован ли он
        if client is None:
            return None
        
        if client.get("status") == "banned":
            return None
    
        return client  # Возвращаем данные пользователя, если он не заблокирован
        
    except Exception as e:
        print(e)
        return {"error": str(e)}

        
    except Exception as e:
        print(e)
        return {"error": str(e)}

@manager.user_loader()
def load_user(mail: str):
    user = get_user(mail.lower())
   
    return user

================================================================================
Файл: admin_panel\initialization_database.py
================================================================================
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.server_api import ServerApi
from config import config


# Асинхронная функция для проверки и создания коллекций с определенной схемой
async def setup_collections(db: AsyncIOMotorClient):
    
    collections = await db.list_collection_names()
    if 'clients' not in collections:
        await db.create_collection('clients')
        print("Created clients collection")


    if 'auctions' not in collections:
        await db.create_collection('auctions')
        print("Created auctions collection")
    
    if 'tokens' not in collections:
        await db.create_collection('tokens')
        print("Created tokens collection")
        
        
    if 'admins' not in collections:
        await db.create_collection('admins')
        insertion = {
                    "email":'kostyakov0203@mail.ru'
                }
        db['admins'].insert_one(insertion)
                

    if 'id_counters' not in collections:
        await db.create_collection('id_counters')
        print("Created id_counters collection")
    
        insertion = {
            "a_id":0,
            "clients_id":1
        }
        db['id_counters'].insert_one(insertion)
        print("inserted init values for id_counter")

    return


================================================================================
Файл: admin_panel\main.py
================================================================================
from typing import Union

from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import asyncio
from routers import *
from smtp.router import smtp_router
from routers.auctionCRUD.updater import update_all
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.middleware import SlowAPIMiddleware
from slowapi.errors import RateLimitExceeded

limiter = Limiter(key_func=get_remote_address, default_limits=["100/minute"])
app = FastAPI(docs_url="/docs", redoc_url=None)
#app = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)

app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
app.add_middleware(SlowAPIMiddleware)


app.mount(
    "/static",
    StaticFiles(directory='admin_panel/static'),
    name="static",
)

app.include_router(render_router)
app.include_router(auction_router)
app.include_router(clients_router)
app.include_router(auth_router)
app.include_router(smtp_router)
app.include_router(ceo_router)

# Фоновая задача для обновления аукционов каждые 10 секунд
async def auto_update_task():
    while True:
        await update_all()  # Выполнение функции обновления
        await asyncio.sleep(10)  # Ждем 10 секунд

@app.on_event("startup")
async def start_auto_update():
    """
    Запускаем задачу автообновления при старте приложения.
    """
    # Запускаем фоновую задачу при старте приложения
    asyncio.create_task(auto_update_task())  # Создаем зада
================================================================================
Файл: admin_panel\utils.py
================================================================================
from datetime import datetime


def date_form(input_date: str):
    # Ожидаем формат "дд.мм.гггг чч:мм"
    try:
        # Разбиваем дату и время
        date_part, time_part = input_date.split()
        
        # Разделяем дату и время на составляющие
        day, month, year = map(int, date_part.split('.'))
        hour, minute = map(int, time_part.split(':'))
        
        # Создаем объект datetime
        date_object = datetime(year, month, day, hour, minute)
        
        # Преобразуем в ISO формат с временной зоной +03:00
        output_date = date_object.isoformat() + "+03:00"
        
        return output_date
    except Exception as e:
        print(f"Error: {e}")
        

import pytz

# Функция для обработки формата DD.MM.YYYY HH:MM
def admin_date_form(date_string, timezone="Europe/Moscow"):
    naive_datetime = datetime.strptime(date_string, "%d.%m.%Y %H:%M")
    tz = pytz.timezone(timezone)
    localized_datetime = tz.localize(naive_datetime)  # Локализуем с указанным часовым поясом
    return localized_datetime.isoformat()  # Преобразуем в ISO строку




if __name__ == "__main__":
    print(date_form('12.12.2000 9:30'))
================================================================================
Файл: admin_panel\__init__.py
================================================================================
from config import *
from globals import *
from utils import *
================================================================================
Файл: admin_panel\__main__.py
================================================================================
import uvicorn
from config import config
import main

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=config.get("FastAPI")['host'],
        port=config.get("FastAPI")['port']+1,
        reload=config.get("FastAPI")['reload'],
        # ssl_certfile=config.get("FastAPI").get("ssl_certfile"),
        #ssl_keyfile=config.get("FastAPI").get("ssl_keyfile"),
    )

================================================================================
Файл: admin_panel\routers\__init__.py
================================================================================
#тут мы импортируем все роутеры уровня ниже, чтобы
#потом не надо было добавлять много импортов в мейн
from .html_render.router import render_router
from .auctionCRUD.router import auction_router
from .clientsCRUD.router import clients_router
from .auth.router import auth_router
from .CEO.router import ceo_router
================================================================================
Файл: admin_panel\routers\auctionCRUD\add.py
================================================================================
from globals import tm_db   
from datetime import datetime, timezone
import asyncio
from utils import date_form
from .autoset_active_status import autoset_active_status
from .get import get
from ..idCRUD import get_a_id
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin
from PIL import Image
import base64
from io import BytesIO

async def add( json: dict, user = Depends(manager)):
    try:
        #print(json)
        user_buf = dict(await user)
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы. "}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы. "}
            
        
        
        a_id =await get_a_id()
        insertion = {
            "a_id": a_id,
            "short_name": json["short_name"].strip(), 
            "start_datetime": date_form(json["start_datetime"]), 
            "end_datetime": date_form(json["end_datetime"]), 
            "start_price": json["start_price"], 
            "min_bid_step": json["min_bid_step"],
            "description": json["description"],
            "bank": json["bank"],
            "bets": [],
            "created_at": datetime.now(timezone.utc),  
            "is_active": False
            
        }
        if insertion['start_datetime']==None: return {"status": "error",
            "message": f"Неправильно распознана дата начала"}
        if insertion['end_datetime']==None: return {"status": "error",
            "message": f"Неправильно распознана дата конца"}
            
        if "photo" in json:
            b64_string = json["photo"]
            
            # Декодируем Base64 в байты.
            image_data = base64.b64decode(b64_string)
            image = Image.open(BytesIO(image_data))

            # Определяем целевую высоту.
            target_height = 500

            # Рассчитываем новую ширину с сохранением пропорций.
            aspect_ratio = image.width / image.height
            target_width = int(target_height * aspect_ratio)

            # Изменяем размер изображения.
            resized_image = image.resize((target_width, target_height), Image.Resampling.LANCZOS)

            # Сохраняем обработанное изображение в строку Base64 (или в файл).
            output_buffer = BytesIO()
            resized_image.save(output_buffer, format=image.format)
            resized_b64 = base64.b64encode(output_buffer.getvalue()).decode('utf-8')

            # Обновляем запись.
            insertion["photo"] = resized_b64
        if "album" in json:
            insertion["album"]=json["album"]
            
        
        collection = tm_db['auctions']

        await collection.insert_one(insertion, bypass_document_validation=True)
        status_message = await autoset_active_status(a_id)

        return {
            "status": "success",
            "message": f"Аукцион с ID {a_id} успешно добавлен.",
            "autoset_status": status_message,
            "a_id":a_id
        }


    except Exception as e:
        print(f"Ошибка при добавлении аукциона: {e}")
        return {
            "status": "error",
            "message": str(e)
        }

================================================================================
Файл: admin_panel\routers\auctionCRUD\add_bet_to_auction.py
================================================================================
from globals import tm_db   
from datetime import datetime, timedelta, timezone
from .get import get  
from .get_highest_bet import get_highest_bet
from .autoset_active_status import autoset_active_status  
from fastapi import Depends, Response
from smtp.mail_templates import target_bet_beated
from deco import try_decorator
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from globals import manager
from ..clientsCRUD import is_admin
from ..clientsCRUD.embeded_get_client import get as c_get

@try_decorator
async def add_bet_to_auction(a_id: str, bet_cost: int, user = Depends(manager)):
    try:
        user_buf = dict(await user)
        if not user_buf['phone_number']:   
            return {"success": False,"error": "Вы не авторизованы."}

        
        a_id = int(a_id)
        clients_id = int(user_buf['id'])
        await autoset_active_status(a_id)
        collection = tm_db['auctions']
        # Проверка существования аукциона
        auction = await collection.find_one({'a_id': a_id})
        if not auction:
            return {
                "status": "error",
                "message": "Аукцион не найден."
            }

        # Проверка активности аукциона
        if auction["is_active"] in [0, False]:
            return {
                "status": "error",
                "message": "Аукцион неактивен."
            }
       
        # Проверка существования клиента
        user = await c_get(clients_id) 
        if user == None:
            return {
                "status": "error",
                "message": "Клиент не найден."
            }

        if bet_cost<int(auction['start_price']):
            return {
                "status": "error",
                "message": f"Ставка должна быть больше, чем {str(auction['start_price'])}. Пожалуйста, сделайте новую ставку."
                
            }
      
        # Проверка на ставку больше последней
        last_bet = auction['bets'][-1] if auction['bets'] else None
        if last_bet and bet_cost < int(last_bet['bet_cost'])+int(auction["min_bid_step"]):
            return {
                "status": "error",
                "message": f"Ставка должна быть больше последней ставки {last_bet['bet_cost']} не менее чем на {str(auction['min_bid_step'])}. Пожалуйста, сделайте новую ставку."
                
            }
            
        if last_bet and bet_cost > (int(last_bet['bet_cost'])+int(auction["min_bid_step"]))*1.3:
            return {
                "status": "error",
                "message": f"Ставка должна быть не больше {(int(last_bet['bet_cost'])+int(auction["min_bid_step"]))*1.3}. Пожалуйста, сделайте новую ставку."
                
            }
            
        highest_bet = await get_highest_bet(a_id)
        # Добавление новой ставки
        bet_info = {
            "bet_cost": bet_cost,
            "clients_id": clients_id,
            "nickname": user['nickname'],
            "created_at": datetime.now(timezone.utc)
        }
        
        # Преобразуем строку даты с временной зоной в объект datetime
        end_datetime = datetime.fromisoformat(auction["end_datetime"])
        # Создаём offset-aware datetime для overtime_trigger
        overtime_trigger = datetime.now(timezone.utc) + timedelta(minutes=5)

        # Преобразуем overtime_trigger к временной зоне end_datetime, чтобы сравнить корректно
        overtime_trigger = overtime_trigger.astimezone(end_datetime.tzinfo)

        # Сравниваем даты и обновляем, если триггерное время больше
        if overtime_trigger > end_datetime:
            await collection.update_one(
                {'a_id': a_id},
                {'$set': {'end_datetime': str(overtime_trigger)}}
            )
        result = await collection.update_one(
            {'a_id': a_id},
            {'$push': {'bets': bet_info}}
        )
        
        if highest_bet:
            print("highest_bet ",highest_bet)
            await target_bet_beated(highest_bet['clients_id'])
        return {
            "status": "success",
            "message": "Ставка успешно добавлена."
        }

    except Exception as e:
        print(f"Error while adding bet: {e}")
        return {
            "status": "error",
            "message": f"Exception type: {type(e).__name__}, details: {str(e)}"
        }

================================================================================
Файл: admin_panel\routers\auctionCRUD\autoset_active_status.py
================================================================================
from .set_active_status import set_active_status
from globals import tm_db
from datetime import datetime, timezone
from smtp.mail_templates import target_won_auction, mass_auction_started
from deco import try_decorator
async def get(a_id:int):
    try:
       
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
     
        
        return auctions
    
    except Exception as e:
        print(e)
        return e
    
@try_decorator
async def autoset_active_status(a_id: int):
    auction = await get(a_id=a_id)
    current_time = datetime.now(timezone.utc)

    start_datetime = datetime.fromisoformat(auction["start_datetime"])
    end_datetime = datetime.fromisoformat(auction["end_datetime"])

    if start_datetime.tzinfo is None:
        start_datetime = start_datetime.replace(tzinfo=timezone.utc)
    if end_datetime.tzinfo is None:
        end_datetime = end_datetime.replace(tzinfo=timezone.utc)

    current_status = auction.get("is_active", 0)  # Default to 0 (inactive) if not found

    if start_datetime <= current_time < end_datetime:
        if current_status == 1:
            return  # No need to update status if it's already active
        # Trigger actions for starting the auction
        #await mass_auction_started(auction["short_name"], url=f'https://torgi.monety.shop/alt_auction?a_id={str(a_id)}')
        await set_active_status(a_id, 1)  # Set auction as active
    else:
        # If the auction has ended and status is not inactive, perform actions
        if current_status == 0:
            return  # No need to update status if it's already inactive
        # Perform actions for auction end
        #await target_won_auction(a_id)
        await set_active_status(a_id, 0)  # Set auction as inactive

================================================================================
Файл: admin_panel\routers\auctionCRUD\delete.py
================================================================================
from fastapi import APIRouter, HTTPException
from globals import tm_db
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin

async def delete(a_id: int, user = Depends(manager)):
    try:
        
        user_buf = dict(await user)
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы."}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы."}
        collection = tm_db['auctions']
        
        # Обновляем запись, добавляя поле `deleted`
        result = await collection.update_one(
            {"a_id": a_id},  # Поиск по `a_id`
            {"$set": {"deleted": True}}  # Помечаем как удалённую
        )
        
        # Проверяем, было ли обновление успешным
        if result.modified_count == 0:
            raise HTTPException(status_code=404, detail=f"Аукцион с ID {a_id} не найден или уже удалён.")
        
        return {"status": "success", "message": f"Аукцион с ID {a_id} помечен как удалённый."}
    
    except Exception as e:
        return {"status": "error", "message": str(e)}

================================================================================
Файл: admin_panel\routers\auctionCRUD\get.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from .autoset_active_status import autoset_active_status
from fastapi import Request
async def get(a_id:int , Request:Request):
    try:
        await autoset_active_status(a_id)
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
 
        
        return auctions
    
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\auctionCRUD\get_active_status.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form


async def get_active_status(a_id:str):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        if "is_active" not in auctions or auctions["is_active"]==0:
            return 0
        else:
            return 1
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\auctionCRUD\get_all.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from .autoset_active_status import autoset_active_status

async def get_all():
    try:
        collection = tm_db['auctions']
        
        # Запрос только для документов, у которых нет поля `deleted`
        auctions = await collection.find(
            {"deleted": {"$exists": False}},  # Условие отсутствия поля `deleted`
            {"_id": 0, "album":0}  # Исключение поля `_id` из результата
        ).to_list(length=None)
        
        return auctions
    except Exception as e:
        print(e)
        return {"error": str(e)}  # Возвращаем сообщение об ошибке как строку для удобства

================================================================================
Файл: admin_panel\routers\auctionCRUD\get_bets.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Request

async def get_bets(a_id:int):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        if auctions["bets"]!=[]:
            return auctions["bets"]
        else:
            return 0
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\auctionCRUD\get_highest_bet.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_highest_bet(a_id:int):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        if auctions["bets"]!=[]:
            return auctions["bets"][-1]
        else:
            return 0
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\auctionCRUD\get_time.py
================================================================================

from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_time(a_id:int):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        
        return auctions["end_datetime"]
      
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\auctionCRUD\router.py
================================================================================
from fastapi import APIRouter
from .add import *
from .get_all import *
from .get import *
from .add_bet_to_auction import *
from .short_get_all import *
from .update_auction import *
from .delete import *
from .get_bets import *
from .get_time import *


auction_router = APIRouter(
    prefix="/mongo/auction",
    tags=["Auctions"]
)

auction_router.add_api_route(
     path='/add',
    endpoint=add,
    methods=['POST']
)
auction_router.add_api_route(
     path='/add_bet_to_auction',
    endpoint=add_bet_to_auction,
    methods=['POST']
)

auction_router.add_api_route(
     path='/get_all',
    endpoint=get_all,
    methods=['GET']
)

auction_router.add_api_route(
     path='/get',
    endpoint=get,
    methods=['GET']
)


auction_router.add_api_route(
     path='/short_get_all',
    endpoint=short_get_all,
    methods=['GET']
)

auction_router.add_api_route(
     path='/update_auction',
    endpoint=update_auction,
    methods=['POST']
)



auction_router.add_api_route(
     path='/delete',
    endpoint=delete,
    methods=['DELETE']
)



auction_router.add_api_route(
     path='/get_bets',
    endpoint=get_bets,
    methods=['GET']
)

auction_router.add_api_route(
     path='/get_time',
    endpoint=get_time,
    methods=['GET']
)



================================================================================
Файл: admin_panel\routers\auctionCRUD\set_active_status.py
================================================================================
from globals import tm_db 

async def set_active_status(a_id: str, status: bool):
    collection = tm_db['auctions']
    
    # Обновляем документ с указанным a_id
    result = await collection.update_one(
        {'a_id': a_id},
        {'$set': {'is_active': status}}
    )
    
    # Проверяем, было ли обновлено что-то
    if result.modified_count > 0:
        return(f"Статус аукциона с ID {a_id} успешно обновлен на {status}.")
    else:
        return(f"Не удалось обновить статус аукциона с ID {a_id}. Возможно, он не существует.")

================================================================================
Файл: admin_panel\routers\auctionCRUD\short_get_all.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form


async def short_get_all():
    try:
        collection = tm_db['auctions']
        auctions = await collection.find( {"deleted": {"$exists": False}},{"_id": 0,"a_id":1, "short_name":1}).to_list(length=None) 
        return auctions
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\auctionCRUD\updater.py
================================================================================
from .short_get_all import short_get_all
from .autoset_active_status import autoset_active_status
async def update_all():
    auctioons = await short_get_all()
    for a in auctioons:
        if 'deleted' not in a:
            await autoset_active_status(a["a_id"])

================================================================================
Файл: admin_panel\routers\auctionCRUD\update_auction.py
================================================================================
from fastapi import Depends, Response, Request, HTTPException
from globals import tm_db
from ..idCRUD import get_a_id
from .get import get
from globals import manager
import json as JSON
from datetime import datetime
from utils import admin_date_form as date_form
import pytz 
import base64
from io import BytesIO
from PIL import Image

async def update_auction(json: dict, Request: Request, user=Depends(manager)):
    try:
        # Проверяем, что пользователь аутентифицирован
        user_buf = dict(await user)
        client_id = user_buf.get('id')
        if not client_id:
            raise HTTPException(status_code=401, detail="Пользователь не авторизован.")

        # Получаем коллекцию аукционов
        collection = tm_db['auctions']

        # Проверяем, передан ли a_id
        auction_id = json.get("a_id")
        if not auction_id or not isinstance(auction_id, str):
            return {
                "success": 0,
                "message": "Некорректный или отсутствующий ID аукциона."
            }  

        # Проверяем, существует ли аукцион с данным a_id
        auction_data = await get(int(auction_id), Request)
        if auction_data is None:
            return {
                "success": 0,
                "message": f"Аукцион с ID {auction_id} не существует."
            }

        # Формируем словарь для обновления только с валидными полями
        update_fields = {}

        if "short_name" in json:
            short_name = json["short_name"]
            if isinstance(short_name, str) and short_name.strip():
                update_fields["short_name"] = short_name.strip()

                
        if "start_datetime" in json:
            start_datetime = json["start_datetime"]
            try:
                # Пытаемся сначала распарсить ISO формат
                iso_datetime = datetime.fromisoformat(start_datetime)
                if iso_datetime.tzinfo is None:  # Если часовой пояс не указан
                    tz = pytz.timezone("Europe/Moscow")
                    iso_datetime = tz.localize(iso_datetime)
                update_fields["start_datetime"] = iso_datetime.isoformat()
            except ValueError:
                try:
                    # Если ISO не сработал, пытаемся распарсить формат DD.MM.YYYY HH:MM
                    update_fields["start_datetime"] = date_form(start_datetime)
                except ValueError:
                    return {
                        "success": 0,
                        "message": "Некорректный формат start_datetime. Ожидается ISO формат или DD.MM.YYYY HH:MM."
                    }

        if "end_datetime" in json:
            end_datetime = json["end_datetime"]
            try:
                # Пытаемся сначала распарсить ISO формат
                iso_datetime = datetime.fromisoformat(end_datetime)
                if iso_datetime.tzinfo is None:  # Если часовой пояс не указан
                    tz = pytz.timezone("Europe/Moscow")
                    iso_datetime = tz.localize(iso_datetime)
                update_fields["end_datetime"] = iso_datetime.isoformat()
            except ValueError:
                try:
                    # Если ISO не сработал, пытаемся распарсить формат DD.MM.YYYY HH:MM
                    update_fields["end_datetime"] = date_form(end_datetime)
                except ValueError:
                    return {
                        "success": 0,
                        "message": "Некорректный формат end_datetime. Ожидается ISO формат или DD.MM.YYYY HH:MM."
                    }
        if "start_price" in json:
            start_price = int(json["start_price"])
            if isinstance(start_price, (int, float)) and start_price > 0:
                update_fields["start_price"] = start_price
            else:
                return {
                    "success": 0,
                    "message": "start_price должен быть положительным числом."
                }

        if "min_bid_step" in json:
            min_bid_step = int(json["min_bid_step"])
            if isinstance(min_bid_step, (int, float)) and min_bid_step > 0:
                update_fields["min_bid_step"] = min_bid_step
            else:
                return {
                    "success": 0,
                    "message": "min_bid_step должен быть положительным числом."
                }

        if "description" in json:
            description = json["description"]
            if isinstance(description, str) and description.strip():
                update_fields["description"] = description.strip()

        if "photo" in json:
            photo = json["photo"]
            if isinstance(photo, str) and photo.strip().startswith("data:image/"):
                # Убираем часть с "data:image/format;base64,"
                photo_data = photo.split(",", 1)[1]
                
                # Декодируем Base64 в байты.
                image_data = base64.b64decode(photo_data)
                image = Image.open(BytesIO(image_data))
                
                # Конвертируем изображение в RGB, чтобы отбросить альфа-канал.
                image = image.convert("RGB")

                # Сохраняем изображение в формате JPEG.
                output_buffer = BytesIO()
                image.save(output_buffer, format="JPEG", quality=85)  # Устанавливаем качество.
                
                # Кодируем результат обратно в Base64.
                jpeg_b64 = base64.b64encode(output_buffer.getvalue()).decode("utf-8")

                # Обновляем поле фото.
                update_fields["photo"] = f"{jpeg_b64}"
        if "bets" in json:
            try:
                bets = JSON.loads(json["bets"])
                if isinstance(bets, list):
                    update_fields["bets"] = bets
                else:
                    return {
                        "success": 0,
                        "message": "bets должен быть массивом."
                    }
            except JSON.JSONDecodeError:
                return {
                    "success": 0,
                    "message": "Некорректный формат bets. Ожидается JSON массив."
                }

        # Если нет полей для обновления, возвращаем сообщение
        if not update_fields:
            return {
                "success": 0,
                "message": "Не указаны поля для обновления."
            }

        # Выполняем обновление данных в MongoDB
        result = await collection.update_one(
            {"a_id": int(auction_id)},
            {"$set": update_fields}
        )

        # Проверяем, обновился ли документ
        if result.modified_count > 0:
            return {
                "success": 1,
                "message": f"Аукцион с ID {auction_id} успешно обновлён."
            }
        else:
            return {
                "success": 0,
                "message": f"Изменения для аукциона с ID {auction_id} не были внесены."
            }

    except Exception as e:
        # Логируем ошибку для дальнейшей отладки
        print(f"Ошибка: {e}")
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: admin_panel\routers\auth\check_mail.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def check_mail(mail: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"email": mail}, {"_id": 0})  # Исправлено поле поиска
        
        if client:
            return 1
        else: 
            return 0
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: admin_panel\routers\auth\check_phone.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def check_phone(mail: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"phone_number": mail}, {"_id": 0})  # Исправлено поле поиска
        
        if client:
            return 1
        else: 
            return 0
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: admin_panel\routers\auth\check_username.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def check_username(mail: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"nickname": mail}, {"_id": 0})  # Исправлено поле поиска
        
        if client:
            return 1
        else: 
            return 0
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: admin_panel\routers\auth\get_data.py
================================================================================
from fastapi import Depends

from globals import *
import deco

@deco.try_decorator
async def get_data(user = Depends(manager)):
    user_buf = dict(await user)
    return dict((i, user_buf[i]) for i in user_buf if i != 'password')

================================================================================
Файл: admin_panel\routers\auth\login.py
================================================================================
from fastapi import Depends, Response
from fastapi.security import OAuth2PasswordRequestForm
from fastapi_login.exceptions import InvalidCredentialsException
from datetime import timedelta
from hashlib import sha256
import os
from globals import *
from smtp.send_verification_mail import send_verification_mail

async def login(response: Response, data: OAuth2PasswordRequestForm = Depends()):
    login = str(data.username)
    password = data.password
    key = sha256(password.encode('utf-8')).hexdigest()
    password = key

    user = await load_user(login)
    if not user:
        raise InvalidCredentialsException
    elif user['email_verified']==False:
        await send_verification_mail(user["email"])
        return "Ваша почта не подтверждена, сообщение отправлено на почту"
    elif password != user['password']:
        raise InvalidCredentialsException
    

    access_token = manager.create_access_token(
        data=dict(sub=login), expires = timedelta(hours = 720)
    )
    manager.set_cookie(response, access_token)

    return {'access_token': access_token, 'token_type': 'bearer'}

================================================================================
Файл: admin_panel\routers\auth\logout.py
================================================================================
from fastapi import Depends, Response
from fastapi.responses import RedirectResponse

from globals import *
import deco

@deco.try_decorator
async def logout(response : Response):
    response = RedirectResponse("/", status_code= 302)
    manager.set_cookie(response, "")
    return response

================================================================================
Файл: admin_panel\routers\auth\register.py
================================================================================
import re
from fastapi import Depends, Response
from fastapi.responses import RedirectResponse
import deco
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from ..clientsCRUD.embeded_get_client import get
from ..clientsCRUD import add
from ..idCRUD import get_c_id
from .check_mail import check_mail
from .check_username import check_username 
from .check_phone import check_phone
from smtp.send_verification_mail import send_verification_mail
import html  # Для экранирования HTML-символов

# Регулярные выражения для валидации
EMAIL_REGEX = r'^[a-zA-Z0-9._%±]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$'
PHONE_REGEX = r'^\+7(\s|%20)\(\d{3}\)(\s|%20)\d{3}-\d{2}-\d{2}$'
NICKNAME_REGEX = r'^[a-zA-Z0-9_-а-яА-ЯёЁ]{3,16}$'  # Альфа-цифровые символы, _ или - и русские буквы

@deco.try_decorator
async def register(phone_number: str, password: str, nickname: str = "", email: str = "", avito_url: str = ""):
    try:
        # Очистка и защита данных
        phone_number = phone_number.replace(' ', '+', 1).strip()
        email = html.escape(email.strip())[:32]  # Экранирование + ограничение длины
        nickname = html.escape(nickname.strip())[:16]  # Экранирование + ограничение длины
        avito_url = avito_url.strip()[:64]  # Ограничение длины

        # Проверка на соответствие регулярным выражениям
        if not re.match(EMAIL_REGEX, email):
            return {"success": False, "error": "Некорректный формат email"}
        
        if not re.match(NICKNAME_REGEX, nickname):
            return {"success": False, "error": "Некорректный формат юзернейма"}

        # Проверка на уникальность
        if not await check_mail(email) and not await check_phone(phone_number) and not await check_username(nickname):
            await add(phone_number, password, email, nickname, avito_url)
            await send_verification_mail(email)
            return {"success": True, "message": "Регистрация успешна"}
        else:
            return {"success": False, "error": "Эта почта, юзернейм или номер телефона уже зарегистрированы"}
    
    except Exception as e:
        print(f"Ошибка в register: {e}")
        return {"success": False, "error": "Внутренняя ошибка сервера"}

================================================================================
Файл: admin_panel\routers\auth\router.py
================================================================================
from fastapi import APIRouter

from .login import login
from .get_data import get_data
from .logout import logout
from .register import register
from .check_mail import check_mail

auth_router = APIRouter(
    prefix="/auth",
    tags=["Auth"]
)

auth_router.add_api_route(
    "/token",
    login,
    description="Авторизация (сюда логин и пароль)",
    methods=['POST']
)

auth_router.add_api_route(
    "/get_data",
    get_data,
    description="Получить информацию о пользователе",
    methods=['GET']
)

auth_router.add_api_route(
    "/logout",
    logout,
    description="Выйти из аккаунта",
    methods=['POST']
)

auth_router.add_api_route(
    "/register",
    register,
    description="Создать новый аккаунт",
    methods=['POST']
)
auth_router.add_api_route(
    "/check_mail",
    check_mail,
    description="",
    methods=['POST']
)

================================================================================
Файл: admin_panel\routers\auth\__init__.py
================================================================================
from .router import *

================================================================================
Файл: admin_panel\routers\CEO\robots.py
================================================================================
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

async def robots(request: Request):
    robots_txt = """
    User-agent: *
    Disallow: /hello/
    Disallow: /login/
    Disallow: /create_auction/
    Allow: /
    
    Sitemap: https://torgi.monety.shop/sitemap.xml
    """
    return PlainTextResponse(robots_txt.strip())

================================================================================
Файл: admin_panel\routers\CEO\router.py
================================================================================
from fastapi import APIRouter
from .robots import *
from .sitemap import *

ceo_router = APIRouter(
    prefix="",
    tags=["CEO"]
)

ceo_router.add_api_route(
    path='/robots.txt',
    endpoint=robots,
    methods=['GET']
)
ceo_router.add_api_route(
    path='/sitemap.xml',
    endpoint=sitemap,
    methods=['GET']
)
================================================================================
Файл: admin_panel\routers\CEO\sitemap.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from fastapi.responses import Response
from datetime import datetime, timedelta
from ..auctionCRUD.short_get_all import *

async def sitemap():
    # Получаем текущую дату
    today = datetime.utcnow().date()
    
    # Пример функции для расчета динамических дат
    def format_date(date):
        return date.strftime("%Y-%m-%d")
    
    auctions = await short_get_all()
    urls = [
        {"loc": "https://torgi.monety.shop/", "lastmod": format_date(today), "changefreq": "daily", "priority": 1.0},
        {"loc": "https://example.com/about", "lastmod": format_date(today - timedelta(days=5)), "changefreq": "monthly", "priority": 0.8},
    ]
    
    for a in auctions:
        urls.append({
            "loc": f"https://torgi.monety.shop/alt_auction?a_id={a['a_id']}",
            "lastmod": format_date(today - timedelta(days=10)),  # Пример: дата обновления аукциона 10 дней назад
            "changefreq": "weekly",
            "priority": 0.9
        })
    
    # Генерация XML
    sitemap_xml = '<?xml version="1.0" encoding="UTF-8"?>\n'
    sitemap_xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n'

    for url in urls:
        sitemap_xml += f"  <url>\n"
        sitemap_xml += f"    <loc>{url['loc']}</loc>\n"
        sitemap_xml += f"    <lastmod>{url['lastmod']}</lastmod>\n"
        sitemap_xml += f"    <changefreq>{url['changefreq']}</changefreq>\n"
        sitemap_xml += f"    <priority>{url['priority']}</priority>\n"
        sitemap_xml += f"  </url>\n"

    sitemap_xml += '</urlset>'

    return Response(content=sitemap_xml, media_type="application/xml")

================================================================================
Файл: admin_panel\routers\clientsCRUD\active_clients.py
================================================================================
from fastapi import APIRouter, Depends
from globals import tm_db
from collections import Counter
from globals import manager

async def active_clients(user=Depends(manager)):
    # Получаем коллекции
    auctions_collection = tm_db['auctions']
    clients_collection = tm_db['clients']

    # Получаем все аукционы и пользователей
    auctions = await auctions_collection.find().to_list(None)
    clients = await clients_collection.find().to_list(None)

    # Подсчитываем количество ставок каждого клиента
    bet_counter = Counter()
    for auction in auctions:
        for bet in auction.get("bets", []):
            client_id = bet.get("clients_id")
            if client_id is not None:
                bet_counter[client_id] += 1

    # Создаем список активных пользователей
    active_clients = []
    for client in clients:
        client_id = client.get("id")
        client_bets = bet_counter.get(client_id, 0)  # Получаем количество ставок пользователя
        if client_bets > 0:
            active_clients.append({
                "id": client_id,
                "nickname": client.get("nickname"),
                "email": client.get("email"),
                "phone_number": client.get("phone_number"),
                "bet_count": client_bets
            })

    # Сортируем пользователей по количеству ставок (по убыванию)
    active_clients = sorted(active_clients, key=lambda x: x["bet_count"], reverse=True)

    return active_clients

================================================================================
Файл: admin_panel\routers\clientsCRUD\add.py
================================================================================

from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from .embeded_get_client import get
from ..idCRUD import get_c_id
from hashlib import sha256
import os



async def add(phone_number: str, password: str, email: str, nickname: str, avito_url: str = ""):
    try:
        clients_id = await get_c_id()
        if await get(clients_id)==None:

                        
            key = sha256(password.encode('utf-8')).hexdigest()
            
          
            insertion_c = {
                "id": clients_id,
                "phone_number": str(phone_number),
                "password": key,
                "email": email.lower().strip(),
                "avito_url": avito_url,
                "nickname": nickname.strip(),
                "mail_receive_bet_beated": True,
                "mail_receive_auction_started": True,
                "get_mails": True,
                'email_verified': False
            }
            collection = tm_db['clients']  # Исправлено название коллекции

            result = await collection.insert_one(insertion_c, bypass_document_validation=True)
            return {
                "status": "success",
                "message": f"Клиент с ID {clients_id} успешно добавлен."
            }
        else:
            return {
                    "status": "error",
                     "message": f"Клиент с ID {clients_id} уже существует."
                }
    except Exception as e:
        print(e)
        return e



================================================================================
Файл: admin_panel\routers\clientsCRUD\ban.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin
from ..clientsCRUD.embeded_get_client import get

async def ban(id: int, user = Depends(manager)):
    try:
        
        user_buf = dict(await user)
        
      
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы."}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы."}
        
        # Проверяем, существует ли клиент с данным client_id
        
        client_id = user_buf['id']
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов
        
        client_data = await get(client_id)
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {client_id} не существует."
            }

        # Обновляем статус пользователя на "заблокирован"
        update_result = await collection.update_one(
            {"id": id},
            {"$set": {"status": "banned"}}
        )

        # Проверяем, был ли обновлен документ
        if update_result.modified_count == 0:
            return{"status":'failed', "detail":"Не удалось заблокировать пользователя"}

        return {"message": "Пользователь успешно заблокирован"}
    
    except Exception as e:
        return{"status":'failed', "detail":str(e)}

================================================================================
Файл: admin_panel\routers\clientsCRUD\change_password.py
================================================================================
from globals import tm_db
from ..idCRUD import get_c_id
from .embeded_get_client import get
from fastapi import Depends, Response
from globals import manager
from hashlib import sha256
from ..auth import logout

async def change_password(json:dict, user = Depends(manager),):
    try:
        
        user_buf = dict(await user)
        client_id = user_buf['id']
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов

        # Проверяем, существует ли клиент с данным client_id
        client_data = await get(client_id)
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {client_id} не существует."
            }

        # Формируем словарь для обновления только с теми полями, которые были переданы
        update_fields = {}
        
        key = sha256(json["old_password"].encode('utf-8')).hexdigest()

        if key ==client_data["password"]:
            result = await collection.update_one(
            {"id": client_id},
            {"$set": {"password":sha256(json["new_password"].encode('utf-8')).hexdigest()}}
        )

       

        # Выполняем обновление данных в MongoDB
      

        # Проверяем, обновился ли документ
        if result.modified_count > 0:
          
            return {
                    "success": 1,
                    "message": f""
                }
        else:
            return {
                "success": 0,
                "message": f"Изменения для клиента с ID {client_id} не были внесены."
            }

    except Exception as e:
        print(e)
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: admin_panel\routers\clientsCRUD\edit_account.py
================================================================================
from globals import tm_db
from ..idCRUD import get_c_id
from .embeded_get_client import get
from fastapi import Depends, Response
from globals import manager
from .is_admin import is_admin

async def edit(json: dict, user=Depends(manager)):
    try:
        #print(json)
        user_buf = dict(await user)
        client_id = user_buf['id']
        
       
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов
        
        # Проверяем, существует ли клиент с данным ID
        client_data = await get(json["id"])
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {json['id']} не существует."
            }
        
        # Формируем словарь для обновления только с измененными полями
        update_fields = {}
        fields_to_check = [
            "phone_number",
            "nickname",
            "avito_url",
            "mail_receive_bet_beated",
            "mail_receive_auction_started"
        ]
        for field in fields_to_check:
            if field in json and json[field] != client_data.get(field):
                # Проверяем и преобразуем строковые значения "True" / "False" в булевы
                if isinstance(json[field], str) and json[field].lower() in ["true", "false"]:
                    update_fields[field] = json[field].lower() == "true"
                else:
                    update_fields[field] = json[field]

        
        # Если нет полей для обновления, возвращаем сообщение
        if not update_fields:
            return {
                "status": "error",
                "message": "Не указаны поля для обновления или изменения совпадают с текущими."
            }
        
        # Выполняем обновление данных в MongoDB
        result = await collection.update_one(
            {"id": int(json["id"])},  # Используем ID из переданного JSON
            {"$set": update_fields}
        )
        
        # Проверяем, обновился ли документ
        if result.modified_count > 0:
            return {
                "success": 1,
                "message": f"Клиент с ID {json['id']} успешно обновлён."
            }
        else:
            return {
                "success": 0,
                "message": f"Изменения для клиента с ID {json['id']} не были внесены."
            }
    
    except Exception as e:
        print(e)
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: admin_panel\routers\clientsCRUD\embeded_get_client.py
================================================================================
from globals import tm_db   

async def get(clients_id: str):
        
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"id": int(clients_id)}, {"_id": 0})  # Исправлено поле поиска
        return client
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\clientsCRUD\get.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin


async def get(clients_id: str, user = Depends(manager)):
    user_buf = dict(await user)
        
      
    if not user_buf['email']:
        return {"success": False, "error": "Вы не авторизованы."}
    elif not await is_admin( user_buf["email"]):
        return {"success": False, "error": "Вы не авторизованы."}
        
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"id": int(clients_id)}, {"_id": 0})  # Исправлено поле поиска
        return client
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: admin_panel\routers\clientsCRUD\get_all.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Depends, Response
from globals import manager
from .is_admin import is_admin

async def get_all(user = Depends(manager)):
    try:
        user_buf = dict(await user)
        
      
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы."}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы."}
        
        collection = tm_db['clients']  # Исправлено название коллекции
        clients = await collection.find({}, {"_id": 0}).to_list()
        return clients
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: admin_panel\routers\clientsCRUD\get_by_phone.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_by_phone(phone: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"phone_number": phone}, {"_id": 0})  # Исправлено поле поиска
        return client
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: admin_panel\routers\clientsCRUD\get_mails.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_unique_mails(filter_key):
    try:
        collection = tm_db['clients']  # Подключаем коллекцию
        clients = await collection.find(
            {filter_key: True}, 
            {"_id": 0, "email": 1}  # Получаем только email
        ).to_list(length=None)
        
        unique_emails = set(client["email"] for client in clients if "email" in client)  # Убираем дубли
        return list(unique_emails)
    except Exception as e:
        print(e)
        return e

async def get_mails_to_notify():
    return await get_unique_mails("mail_receive")

async def get_mails_to_notify_start():
    return await get_unique_mails("mail_receive_auction_started")
================================================================================
Файл: admin_panel\routers\clientsCRUD\is_admin.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def is_admin(email: str):
    try:
        collection = tm_db['admins'] 
        client = await collection.find_one({"email": email}, {"_id": 0})  
        #print(client)
        if client!=None:
            return 1
    except Exception as e:
        print(e)
        return 0
================================================================================
Файл: admin_panel\routers\clientsCRUD\router.py
================================================================================
from fastapi import APIRouter
from .add import *
from .get_all import *
from .get import *
from .update_account import * 
from .change_password import * 
from .active_clients import * 
from .ban import * 
from .unban import * 
from .edit_account import edit

clients_router = APIRouter(
    prefix="/mongo/clients",
    tags=["API"]
)

clients_router.add_api_route(
    path='/add',
    endpoint=add,
    methods=['POST']
)
clients_router.add_api_route(
    path='/get_all',
    endpoint=get_all,
    methods=['GET']
)
clients_router.add_api_route(
    path='/get',
    endpoint=get,
    methods=['GET']
)

clients_router.add_api_route(
    path='/update',
    endpoint=update,
    methods=['POST']
)

clients_router.add_api_route(
    path='/change_password',
    endpoint=change_password,
    methods=['POST']
)

clients_router.add_api_route(
    path='/active_clients',
    endpoint=active_clients,
    methods=['POST']
)


clients_router.add_api_route(
    path='/ban',
    endpoint=ban,
    methods=['DELETE']
)

clients_router.add_api_route(
    path='/unban',
    endpoint=unban,
    methods=['POST']
)


clients_router.add_api_route(
    path='/edit',
    endpoint=edit,
    methods=['POST']
)


================================================================================
Файл: admin_panel\routers\clientsCRUD\unban.py
================================================================================
from fastapi import Depends, HTTPException
from globals import tm_db, manager
from ..clientsCRUD.embeded_get_client import get
from ..clientsCRUD import is_admin

async def unban(id: int, user = Depends(manager)):
    try:
        # Получаем информацию о текущем пользователе
        user_buf = dict(await user)
        client_id = user_buf['email']

        # Проверяем, является ли пользователь администратором
        if not await is_admin(client_id):
            raise HTTPException(status_code=403, detail="У вас нет прав на разблокировку пользователей.")

        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов

        # Проверяем, существует ли клиент с данным id
        client_data = await get(id)
        if not client_data:
            raise HTTPException(status_code=404, detail=f"Клиент с ID {id} не найден.")

        # Обновляем статус пользователя, удаляя поле "status" (разбан)
        result = await collection.update_one(
            {"id": id},  # Используем id для поиска
            {"$unset": {"status": ""}}  # Удаляем поле "status", которое, вероятно, означает бан
        )

        if result.modified_count == 0:
            raise HTTPException(status_code=400, detail="Не удалось разблокировать пользователя или пользователь не был заблокирован.")

        return {"status": "success", "message": f"Пользователь с ID {id} был разблокирован."}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

================================================================================
Файл: admin_panel\routers\clientsCRUD\update_account.py
================================================================================
from globals import tm_db
from ..idCRUD import get_c_id
from .embeded_get_client import get
from fastapi import Depends, Response
from globals import manager

async def update(json:dict, user = Depends(manager),):
    try:
        
        user_buf = dict(await user)
        client_id = user_buf['id']
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов

        # Проверяем, существует ли клиент с данным client_id
        client_data = await get(client_id)
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {client_id} не существует."
            }

        # Формируем словарь для обновления только с теми полями, которые были переданы
        update_fields = {}
        if "phone_number" in json:
            update_fields["phone_number"] = json["phone_number"]
        if "avito_url" in "avito_url" :
            update_fields["avito_url"] = json["avito_url"]
        if "mail_receive_bet_beated" in json:
            update_fields["mail_receive_bet_beated"] = json["mail_receive_bet_beated"]
        if "mail_receive_auction_started" in json:
            update_fields["mail_receive_auction_started"] = json["mail_receive_auction_started"]

        # Если нет полей для обновления, возвращаем сообщение
        if not update_fields:
            return {
                "status": "error",
                 "message": "Не указаны поля для обновления."
            }

        # Выполняем обновление данных в MongoDB
        result = await collection.update_one(
            {"id": client_id},
            {"$set": update_fields}
        )

        # Проверяем, обновился ли документ
        if result.modified_count > 0:
            return {
                "success": 1,
                "message": f"Клиент с ID {client_id} успешно обновлён."
            }
        else:
            return {
                "success": 0,
                "message": f"Изменения для клиента с ID {client_id} не были внесены."
            }

    except Exception as e:
        print(e)
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: admin_panel\routers\clientsCRUD\username_veryfy.py
================================================================================

================================================================================
Файл: admin_panel\routers\clientsCRUD\__init__.py
================================================================================
from .add import add
from .get import get
from .get_all import get_all
from .is_admin import is_admin
from .update_account import update
================================================================================
Файл: admin_panel\routers\html_render\about.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def about(request: Request):
    return templates.TemplateResponse("about.html", context= {"request": request})

================================================================================
Файл: admin_panel\routers\html_render\account.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def account(request: Request):
    return templates.TemplateResponse("account.html", context= {"request": request})
================================================================================
Файл: admin_panel\routers\html_render\admin.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin


async def admin(request: Request, user = Depends(manager)):
    
    user_buf = dict(await user)
    if not await is_admin( user_buf["email"]):
        return templates.TemplateResponse("about.html", context= {"request": request})
    else:
        return templates.TemplateResponse("admin.html", context= {"request": request})
                


================================================================================
Файл: admin_panel\routers\html_render\alt_auction.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from datetime import datetime


async def get(a_id:int , Request:Request):
    try:
       
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        return auctions
    
    except Exception as e:
        print(e)
        return e


async def alt_auction(request: Request):
    # Получаем параметр a_id из строки запроса
    a_id = request.query_params.get("a_id")
    
    # Загружаем данные аукциона из базы данных
    auction_data = await get(int(a_id), request)
    #print(auction_data)


    # Формируем метаинформацию
    meta_info = {
        "title": f"{auction_data["short_name"]}",
        "description": auction_data["description"],
        "structured_data": {
            "@context": "https://schema.org",
            "@type": "Auction",
            "name": auction_data["short_name"],
            "startDate": auction_data["start_datetime"],
            "endDate": auction_data["end_datetime"],
            "price": auction_data["start_price"],
            "url": str(request.url)
        }
    }

    # Передача метаинформации в шаблон
    return templates.TemplateResponse("alt_auction.html", context={
        "request": request,
        "auction_data": auction_data,
        "meta_info": meta_info
    })

================================================================================
Файл: admin_panel\routers\html_render\create_auction.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin

async def create_auction(request: Request, user = Depends(manager)):
    user_buf = dict(await user)
    print(user_buf)
    if not await is_admin(user_buf["email"]):
        return {"success": False, "error": "Вы не авторизованы."}
    else:
        return templates.TemplateResponse("create_auction.html", context= {"request": request})

================================================================================
Файл: admin_panel\routers\html_render\enter_reg_page.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def enter_reg_page(request: Request):
    return templates.TemplateResponse("enter_reg_page.html", context= {"request": request})

================================================================================
Файл: admin_panel\routers\html_render\index.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def index(request: Request):
    return templates.TemplateResponse("index.html", context= {"request": request})

================================================================================
Файл: admin_panel\routers\html_render\router.py
================================================================================
from fastapi import APIRouter
from .index import *
from .account import *
from .alt_auction import *
from .create_auction import *
from .enter_reg_page import *
from .about import *
from .admin import *
from .sidebar import *

render_router = APIRouter(
    prefix="",
    tags=["Render"]
)

render_router.add_api_route(
    path='/',
    endpoint=index,
    methods=['GET']
)

render_router.add_api_route(
    path='/account',
    endpoint=account,
    methods=['GET']
)

render_router.add_api_route(
    path='/alt_auction',
    endpoint=alt_auction,
    methods=['GET']
)

render_router.add_api_route(
    path='/create_auction',
    endpoint=create_auction,
    methods=['GET']
)

render_router.add_api_route(
    path='/login',
    endpoint=enter_reg_page,
    methods=['GET']
)

render_router.add_api_route(
    path='/about',
    endpoint=about,
    methods=['GET']
)

render_router.add_api_route(
    path='/hello',
    endpoint=admin,
    methods=['GET']
)


render_router.add_api_route(
    path='/sidebar.html',
    endpoint=sidebar,
    methods=['GET']
)


================================================================================
Файл: admin_panel\routers\html_render\sidebar.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def sidebar(request: Request):
    return templates.TemplateResponse("sidebar.html", context= {"request": request})

================================================================================
Файл: admin_panel\routers\html_render\__init__.py
================================================================================
from .enter_reg_page import enter_reg_page
================================================================================
Файл: admin_panel\routers\idCRUD\get_a_id.py
================================================================================
from globals import tm_db

async def get_a_id():
    collection = tm_db['id_counters']
    try:
        # Increment the a_id field by 1 and return the updated document
        updated_document = await collection.find_one_and_update(
            {},
            {'$inc': {'a_id': 1}},
            return_document=True  # This option returns the updated document
        )
        
        if updated_document:
            #print(updated_document)
            return updated_document["a_id"]
        else:
            print("Документ для обновления не найден.")
            return None
    
    except Exception as e:
        print(f"Произошла ошибка: {e}")
        return None

================================================================================
Файл: admin_panel\routers\idCRUD\get_c_id.py
================================================================================
from globals import tm_db

async def get_c_id():
    collection = tm_db['id_counters']
    try:
        # Increment the a_id field by 1 and return the updated document
        updated_document = await collection.find_one_and_update(
            {},
            {'$inc': {'с_id': 1}},
            return_document=True  # This option returns the updated document
        )
        
        if updated_document:
            print(updated_document)
            return updated_document["с_id"]
        else:
            print("Документ для обновления не найден.")
            return None
    
    except Exception as e:
        print(f"Произошла ошибка: {e}")
        return None

================================================================================
Файл: admin_panel\routers\idCRUD\__init__.py
================================================================================
from .get_a_id import get_a_id
from .get_c_id import get_c_id
================================================================================
Файл: admin_panel\smtp\mail_parts.py
================================================================================
parts = {
    "body_default": "Уважаемый пользователь, вы получили это уведомление, так как подписаны на нашу рассылку. Благодарим за интерес к нашим предложениям! Ссылка: ",
    "header_auction_start": "Начало торгов ",
    "header_bet_beated": "Уведомление: вашу ставку на торгах перебили",
    "header_you_won": "Поздравляем! Вы стали победителем аукциона!",
    "body_you_won": "Мы свяжемся с вами в ближайшее время по контактному номеру, указанному при регистрации или по почте",
}

================================================================================
Файл: admin_panel\smtp\mail_templates.py
================================================================================
import aiosmtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from routers.clientsCRUD.get_mails import get_mails_to_notify, get_mails_to_notify_start
from routers.clientsCRUD.get_by_phone import get_by_phone
from routers.clientsCRUD.embeded_get_client import get as c_get
from .mail_parts import parts
from deco import try_decorator
from globals import smtp_username, smtp_password


async def send_mail(recipient: str, theme: str, body: str):
    smtp_server = "smtp.beget.com"
    smtp_port = 465  # or 587 for TLS
    username = smtp_username
    password = smtp_password

    sender = smtp_username  
    subject = theme

    message = MIMEMultipart()
    message["From"] = sender
    message["To"] = recipient
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))
    print("Отправка на", recipient)
    try:
        async with aiosmtplib.SMTP(hostname=smtp_server, port=smtp_port, use_tls=True) as server:
            await server.login(username, password)
            await server.send_message(message)
            print("Письмо отправлено успешно!", theme)
    except Exception as e:
        print(f"Ошибка при отправке письма: {e}")


@try_decorator
async def mass_auction_started(Name: str, url: str):
    target = await get_mails_to_notify_start()
    print("mass_auction_started")
    print(target)
    for person in target:
        await send_mail(person['email'], parts["header_auction_start"] + Name, parts["body_default"]+ url)
        print(person)


@try_decorator
async def mass_news(Name: str, body: str):
    target = await get_mails_to_notify()
    for person in target:
        await send_mail(person['mail'], Name, body)


@try_decorator
async def target_bet_beated(c_id: str):
    target = await c_get(c_id)
    print("target", target)
    if target["mail_receive_bet_beated"] == True:
        await send_mail(target["email"], parts['header_bet_beated'], parts["body_default"])


from routers.auctionCRUD.get_highest_bet import get_highest_bet


@try_decorator
async def target_won_auction(a_id):
    # Await the coroutine before accessing its result
    highest_bet = await get_highest_bet(a_id)  # Await the coroutine
    clients_id = highest_bet["clients_id"]  # Now you can access clients_id safely

    target = await c_get(clients_id)  # Assuming c_get is also an async function
    if target["get_mails"] == 1:
        await send_mail(target["email"], parts['header_you_won'], parts["body_you_won"])


# If you need to run an example, wrap it in an async context or use an event loop
# Example:
# import asyncio
# asyncio.run(target_won_auction("some_id"))

================================================================================
Файл: admin_panel\smtp\router.py
================================================================================
from fastapi import APIRouter
from .verify import *
smtp_router = APIRouter(
    prefix="/mailservice",
    tags=["SMTP"]
)

smtp_router.add_api_route(
    path='/verify',
    endpoint=verify_email,
    methods=['GET']
)


================================================================================
Файл: admin_panel\smtp\send_verification_mail.py
================================================================================
from .mail_templates import send_mail
import random
import aiosmtplib
import string
from globals import tm_db
from globals import smtp_link
from datetime import timedelta, datetime

def generate_verification_token(target:str):
    """Генерация случайного токена для верификации (например, длиной 20 символов)"""
    token =''.join(random.choices(string.ascii_letters + string.digits, k=20))
    collection = tm_db['tokens'] 
    collection.insert_one({"email":target, "token": token, "expire_at": datetime.now() + timedelta(hours=24) })  

    return token

async def send_verification_mail(target:str):
    token = generate_verification_token(target)
    verification_link = f"{smtp_link}/mailservice/verify?token={token}"

    body = "Чтобы подтвердить свою почту перейдите по ссылке\n"+verification_link
    await send_mail(target, "Подтверждение почты", body)
================================================================================
Файл: admin_panel\smtp\test.py
================================================================================
import aiosmtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import asyncio


async def send_mail(recipient: str, theme: str, body: str):
    smtp_server = "smtp.beget.com"
    smtp_port = 465  # or 587 for TLS
    username = "test@monety.shop"
    password = "!Nn25111978"

    sender = "test@monety.shop"
    subject = theme

    message = MIMEMultipart()
    message["From"] = sender
    message["To"] = recipient
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))

    try:
        async with aiosmtplib.SMTP(hostname=smtp_server, port=smtp_port, use_tls=True) as server:
            await server.login(username, password)
            await server.send_message(message)
            print("Письмо отправлено успешно!")
    except Exception as e:
        print(f"Ошибка при отправке письма: {e}")


if __name__ =="__main__":
    asyncio.run(send_mail("kostyakov0203@mail.ru", "123", "123"))

================================================================================
Файл: admin_panel\smtp\verification.py
================================================================================
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
import random
import string
from mail_templates import send_mail


def generate_verification_token():
    """Генерация случайного токена для верификации (например, длиной 20 символов)"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=20))

def send_verification_email(to_email, token):
    body = f"Пожалуйста, подтвердите вашу электронную почту, перейдя по следующей ссылке: {generate_verification_token()}"
    send_mail(to_email,"Подтвердите почту", body)
   




================================================================================
Файл: admin_panel\smtp\verify.py
================================================================================
from globals import tm_db
from datetime import datetime

tokens_db = tm_db['tokens']

async def verify_email(token: str):
    # Ищем токен в базе данных
    token_data = await tokens_db.find_one({"token": token})

    if not token_data or token_data["expire_at"] <= datetime.now():
        return {"status": 'failed', "message": "Неверный или истёкший токен."}
    
    user_email = token_data.get("email")

    # Удаляем все токены для этого email
    await tokens_db.delete_many({"email": user_email})

    # Обновляем статус пользователя, что его почта подтверждена
    clients_db = tm_db['clients']
    await clients_db.update_one({"email": user_email}, {"$set": {"email_verified": True}})
    
    return {"status": "success", "message": f"Электронная почта {user_email} успешно подтверждена!"}

================================================================================
Файл: admin_panel\static\css\Acount.css
================================================================================

/* Стили для чекбоксов */
.checkbox-group {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.checkbox-group label {
    font-weight: normal;
    display: flex;
    align-items: center;
    font-size: 16px;
}

.checkbox-group input[type="checkbox"] {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
    accent-color:  #ffa735; /* Цвет чекбоксов, чтобы соответствовать основному цвету кнопок */
}

/* Убедитесь, что стили работают на мобильных устройствах */
@media (max-width: 480px) {
    .checkbox-group label {
        font-size: 14px;
    }
}

.account-details-container {
    margin-left: auto;
    margin-right: auto;
    display: flex;
    flex-direction: row;
    gap: 30px;
   
   

    border-radius: 10px;
    padding: 20px;
    flex-wrap: wrap;
    justify-content: space-around;
    max-width: 1050px;
}

.form-group {
    margin-bottom: 20px;
    width: 300px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
}

input[type="email"],
input[type="password"],
input[type="text"],
input[type="url"] {
    width: 100%;
    padding: 12px;
    margin-top: 5px;
    border: 1px solid #1b1b1b;
    border-radius: 8px;
    font-size: 16px;
}

.submit-button {
    padding: 12px 20px;
    background-color:  var(--yellow);
    color: #ffffff;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.submit-button:hover {
    background-color: var(--yellow);
    transform: scale(1.05);
}

/* ============================= */
/* Адаптивные стили с медиазапросами */
/* ============================= */

/* Для экранов шириной до 1024px */
@media (max-width: 1024px) {
    .dashboard-container {
        padding: 10px;
    }

    .account-details-container {
        flex-direction: column;
        gap: 20px;
        padding: 15px;
    }

    .form-group {
        width: 100%;
    }
}

/* Для экранов шириной до 768px */
@media (max-width: 768px) {
   

    .dashboard-content {
        padding: 20px;
        border-radius: 10px;
    }

    .dashboard-header h1 {
        font-size: 1.5em;
    }
}

/* Для экранов шириной до 480px (мобильные устройства) */
@media (max-width: 480px) {
    .dashboard-content {
        padding: 15px;
    }

    .account-details-container {
        padding: 10px;
    }

    .form-group label {
        font-size: 0.9em;
    }

    .submit-button {
        padding: 10px 15px;
        font-size: 16px;
    }
}

================================================================================
Файл: admin_panel\static\css\admin.css
================================================================================
/* Определение переменных цветов для черно-темно-желтой темы */
:root {
    --primary-color: #f0b112; /* Основной цвет (желтый) */
    --primary-color-dark: #f57f17; /* Темный основной цвет */
    --background-color-light: #212121; /* Черный фон для заголовков */
    --background-color-light-hover: #424242; /* Темный фон для четных строк */
    --background-color-hover: #616161; /* Цвет фона при наведении */
    --border-color-light: #424242; /* Цвет границы */
    --border-color-focus: #fbc02d; /* Цвет границы при фокусе */
    --text-color-light: #ffffff; /* Цвет текста для заголовков */
    --text-color-dark: #f5f5f5; /* Цвет текста для ячеек */
    --modal-background: rgba(0, 0, 0, 0.8); /* Полупрозрачный фон модального окна */
    --modal-content-background: #333333; /* Фон для модального окна */
    --shadow-color: rgba(0, 0, 0, 0.3); /* Тень для таблицы */
    --button-background: #dfa922; /* Цвет фона кнопок */
    --button-background-hover: #f57f17; /* Цвет фона кнопок при наведении */
    --input-border-color: #424242; /* Цвет рамки для инпутов */
    --input-border-color-focus: #fbc02d; /* Цвет рамки при фокусе */
    --modal-close-color: #ffffff; /* Цвет для кнопки закрытия */
    --navbar-background: #212121; /* Фон для navbar */
    --search-border-color: #616161; /* Цвет для рамки инпута поиска */
    --textarea-border-color: #424242; /* Цвет рамки для textarea */
}

table {
    width: 80%;
    max-width: 800px; /* Максимальная ширина таблицы */
    margin: 20px auto; /* Выравнивание по центру экрана */
    border-collapse: collapse;
    box-shadow: 0 4px 8px var(--shadow-color); /* Тень для визуального выделения */
}

table th, table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid var(--border-color-light);
}

.dashboard-container{
    display: flex;
    flex-direction: column;
}
table th {
    background-color: var(--background-color-light);
    font-weight: 600;
    color: var(--text-color-light);
}

table td {
    color: var(--text-color-dark);
}

table tr:nth-child(even) {
    background-color: var(--background-color-light-hover);
}

table tr:hover {
    background-color: var(--background-color-hover);
}

/* Медиазапросы для адаптивного дизайна */
@media (max-width: 1024px) {
    table {
        width: 90%;
        font-size: 14px;
    }
}

@media (max-width: 768px) {
    table {
        width: 90%;
        font-size: 14px;
    }

    .search-container {
        width: 70%;
    }
}

@media (max-width: 480px) {
    table {
        width: 95%;
        font-size: 12px;
    }
    table th, table td {
        padding: 10px;
    }
    table td {
        font-size: 12px;
    }

    .search-container {
        width: 90%;
    }

    .navbar {
        width: 100%;
        text-align: center;
    }

    .modal-content {
        width: 95%;
    }

    .search-container input[type="text"] {
        padding: 10px;
        font-size: 16px;
    }
}

.modal {
    display: none; /* Скрыто по умолчанию */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--modal-background); /* Полупрозрачный фон */
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Поверх других элементов */
    
}

.modal-content {
    background-color: var(--modal-content-background);
    display: flex;
    justify-content: space-evenly;
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    height: 70%;
    max-width: 400px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    position: relative;
    padding-bottom: 30px;
    overflow-y: auto;
}

.modal-content input {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    font-size: 14px;
    border: 1px solid var(--input-border-color);
    border-radius: 4px;
    box-sizing: border-box;
    outline: none;
    transition: border-color 0.3s ease;
}

.modal-content input:focus {
    border-color: var(--input-border-color-focus);
}

.close {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 20px;
    font-weight: bold;
    color: var(--modal-close-color);
    cursor: pointer;
}

button {
    padding: 10px 15px;
    margin-top: 15px;
    font-size: 14px;
    color: #ffffff;
    background-color: var(--button-background);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: var(--button-background-hover);
}

.navbar {
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
}

.search-container {
    margin-bottom: 10px;
    margin: 20px;
    text-align: left;
    width: 45%;
    margin-left: auto;
    margin-right: auto;
}

.search-container input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid var(--search-border-color);
    border-radius: 4px;
    font-size: 14px;
}

#previewImg {
    max-width: 100px;
    margin-top: 10px;
    display: block;
}

textarea {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid var(--textarea-border-color);
    border-radius: 4px;
    resize: none;
    box-sizing: border-box;
    min-height: 250px;
    overflow: overlay;
}

================================================================================
Файл: admin_panel\static\css\alt_auction.css
================================================================================

.auction-header {
    margin-bottom: 10px;
}

.auction-timing {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0;
}

.status-button {
    background-color: #ffcc00;
    color: #333;
    border: none;
    border-radius: 8px;
    padding: 8px 12px;
    cursor: default;
    font-size: 14px;
}

.photo-placeholder {
    
    height: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 10px;
    color: #ffffff;
}

/* Информация о монете */
.coin-info {
   
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.coin-info ul {
    list-style: none;
    padding: 0;
    margin: 0 0 20px 0;
}

.coin-info ul li {
    margin-bottom: 10px;
}

.coin-prices {
    margin-top: 0px;
}

/* Основной контент аукциона */
.auction-main-content {
    display: flex;
    justify-content: space-between;
}

/* Секция с фото */
.coin-photo {
    flex: 1;
    margin-right: 20px;
}

/* Фото монеты (плейсхолдер) */
.photo-placeholder {
    width: 95%;
    height: 300px;
    
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 18px;
    color: #666;
}

/* Информация о монете */
.coin-info {
    display: grid;
    min-width: 50%;
    max-width: 65%;
    grid-template-columns: repeat(1, 1fr); /* Create 2 equal-width columns */
    grid-template-rows:  auto; /* 2 rows */
    gap: 0px; /* Add space between grid items */
    
}
.auction-info {
    grid-column: span 2; /* Make item 1 span across both columns */
}
.coin-prices {
    grid-column: span 2; /* Make item 1 span across both columns */
}

.coin-details {
    grid-column: span 2; /* Make item 2 span across both columns */
}
/* Секция истории ставок и формы для ввода ставок */
.auction-history-section {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

/* История ставок */
.history {
    flex: 1;
    margin-right: 0px;
   
    padding: 15px;
    padding-bottom: 30px;
    margin-bottom: 30px;
    border-radius: 10px;
    height: 300px;
    overflow-y: auto;
}

/* Поле ввода ставки и кнопка */
.bid-section {
    flex: 0.5;
    gap: 30px;
    padding: 15px;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
}

/* Стили для ввода ставки */
.bid-input {
    width: 95%;
    padding: 10px;
    font-size: 16px;
    margin-bottom: 10px;
    border: 1px solid #070707;
    border-radius: 5px;
}

/* Кнопка ставки */
.bid-button {
    padding: 10px 20px;
    background-color: var(--yellow);
    border: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.bid-button:hover {
    background-color: #e6b800;
}

/* Таблица ставок */
#bid-table {
    width: 95%;
    border-collapse: collapse;
    margin-top: 20px;
}

#bid-table th,
#bid-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #7c7c7c;
}

#bid-table th {
   
   
    color: #e0e0e0;
    font-weight: bold;
}

#bid-table tr:nth-child(even) {
    background-color: #292929;
}

#bid-table tr:hover {
    background-color: #636363;
}

/* Сообщение "Ставок пока нет" */
#bid-table td[colspan="3"] {
    text-align: center;
    font-style: italic;
    color: #dbdbdb;
}

.coin-photo {
   
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    margin-bottom: 0;
    align-items: center;
    display: flex; /* Используем flex для центрирования содержимого, если это необходимо */
    justify-content: center; /* Центрирование по горизонтали */
    overflow: hidden; /* Скрыть избыточные части изображения */
    width: fit-content; /* Контейнер будет подстраиваться под размер изображения */
    height: fit-content; /* Контейнер будет подстраиваться под размер изображения */
}

#coin-image {
    object-fit: cover; /* Используйте cover, чтобы заполнить контейнер без искажения */
}

.zoom-container {
    position: relative; /* Для позиционирования лупы относительно контейнера */
    overflow: hidden; /* Скрыть части изображения, выходящие за пределы контейнера */
}

.zoom-lens {
    position: absolute;
    border: 2px solid #ffcc00; /* Цвет границы лупы */
    border-radius: 50%; /* Сделать лупу круглой */
    cursor: none; /* Убрать указатель курсора при наведении */
    width: 100px; /* Размер лупы */
    height: 100px; /* Размер лупы */
    opacity: 0.6; /* Полупрозрачность */
    pointer-events: none; /* Игнорировать события мыши для лупы */
}

.zoom-image {
    position: absolute;
    width: 200%; /* Увеличение размера изображения */
    height: 200%; /* Увеличение размера изображения */
    transform: translate(-50%, -50%); /* Центрирование увеличенного изображения */
    display: none; /* Скрыто по умолчанию */
    pointer-events: none; /* Игнорируем события мыши на увеличенном изображении */
}
/* CSS for improved header layout */
.auction-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.auction-info {
    display: flex;
    flex-direction: row;
    

    text-align: center;
}

.auction-dates {
    font-size: 1.1em;
    margin-bottom: 10px;
}

.status {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 0px;
}

.status-button {
    padding: 8px 16px;
    border: none;
    background-color: #ffcc00;
    color: #333;
    font-weight: bold;
    border-radius: 4px;
    cursor: pointer;
    margin-bottom: 5px;
}

/* a{
    text-decoration: none;
    color: rgb(170, 153, 0);
}
 */

/* a:visited {
    color: rgb(102, 92, 0);
  }
  
  a:focus {
    border-bottom: 1px solid;
    background: rgb(255, 243, 133);
  }
  
  a:hover {
    border-bottom: 1px solid;
    background: rgb(255, 243, 133);
  }
  
  a:active {
    background: rgb(102, 92, 0);
    color: rgb(255, 243, 133);
  } */

@media (max-width: 900px) {
  
    .auction-main-content {
        flex-direction: column; /* Строки выстраиваются вертикально */
        align-items: center; /* Центрируем содержимое */
    }
    
    .coin-photo, .coin-info, .auction-history-section {
        max-width: 100%;
        width: 95%; /* Увеличиваем ширину для заполнения экрана */
        margin-right: 0; /* Убираем правый отступ */
        margin-bottom: 20px; /* Добавляем отступ внизу для отделения элементов */
    }
    .auction-history-section{
        flex-direction: column-reverse;
    }
    
    .auction-timing, .coin-details, .coin-prices {
        text-align: left; /* Центрируем текст */
    }

    .bid-section {
        width: 100%;
        padding: 10px; /* Меньший отступ */
    }
    
    .history {
        width: 100%;
        margin-bottom: 15px; /* Меньший отступ снизу */
        margin-top: 15px; /* Меньший отступ снизу */
    }

    .status-button, .bid-button {
        font-size: 14px;
        padding: 8px 12px; /* Меньшие отступы кнопок */
    }

    .coin-photo img {
        max-width: 95%;
    }

    .bid-input {
        width: 95%;
        font-size: 14px;
        padding: 8px; /* Уменьшение отступов для ввода */
    }
}

/* Для устройств с шириной до 480px */
@media (max-width: 480px) {
    /* Уменьшение заголовков */
    h1, h2 {
        font-size: 1.2em;
        margin-left: 0px;
    }

    .auction-header h1 {
        font-size: 1.4em;
    }

    .auction-main-content, .auction-timing, .history, .bid-section {
        flex-direction: column;
        align-items: center;
    }

    .coin-photo, .coin-info, .history, .bid-section {
        padding: 10px;
        margin-bottom: 10px;
    }
    
    .coin-info, .coin-photo, .auction-timing, .status-button {
        width: 95%;
    }

    .status-button, .bid-button {
        font-size: 16px;
        padding: 6px 8px; /* Еще меньшие отступы кнопок */
    }

    #bid-table th, #bid-table td {
        font-size: 16px;
        padding: 6px; /* Меньшие отступы в таблице */
    }

    /* Центрирование и уменьшение некоторых текстовых элементов */
    .coin-details, .coin-prices, .history td, .history th {
        font-size: 16px; /* Уменьшение шрифта */
    }

    /* Уменьшение размеров таблицы ставок */
    #bid-table th, #bid-table td {
        padding: 6px;
    }

    /* Лупа и увеличение изображения */
    .zoom-lens {
        width: 50px; /* Уменьшение размера лупы */
        height: 50px;
    }

    /* Скрытие увеличенного изображения при наведении */
    .zoom-image {
        display: none;
    }
}
.carousel {
    position: relative;
    width: 100%;
    height: 100%;
    margin: 20px auto;
    overflow: hidden;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.carousel-track {
    display: flex;
    transition: transform 0.3s ease-in-out;
}

.carousel-slide {
    min-width: 100%;
    box-sizing: border-box;
}

.carousel-slide img {
   
    max-height: 220px;
    display: block;
    margin: auto;
}

.carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    border: none;
    color: white;
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 50%;
    z-index: 10;
}

.carousel-button.prev {
    left: 10px;
}

.carousel-button.next {
    right: 10px;
}

.carousel-button:hover {
    background-color: black;
}

================================================================================
Файл: admin_panel\static\css\AuctionCard.css
================================================================================

.card-list {
    width: 90%;
    max-width: 400px;
    
  }
  
  .card {
    background-color:var(--card_background);
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 20px 50px 0 rgba(0, 0, 0, 0.1);
    border-radius: 15px;
    overflow: hidden;
    padding: 1.2rem;
    position: relative;
    transition: 0.15s ease-in;
    width: 100%;
   
  }
  
  .card:hover, .card:focus-within {
    box-shadow: 0 0 0 2px var(--yellow), 0 10px 60px 0 rgba(0, 0, 0, 0.1);
    transform: translatey(-5px);
  }
  
  .card-image {
    border-radius: 10px;
    margin: 0px;
    overflow: hidden;  /* Чтобы изображение не выходило за границы */
    min-height: 150px;
    max-height: 200px;
    width: 100%; /* Чтобы картинка занимала всю ширину контейнера */
    display: flex;
    justify-content: center; /* Центрирование изображения по горизонтали */
    align-items: center; /* Центрирование изображения по вертикали */
  }
  
  .card-image img {
    object-fit:fill; /* Картинка масштабируется, сохраняя пропорции */
    max-height: 200px; /* Ограничение высоты картинки по размеру контейнера */
    max-width: 100%; /* Ограничение ширины картинки по размеру контейнера */
  }
  
  
  .card-header {
    margin-top: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .card-header a {
    font-weight: 600;
    font-size: 1.375rem;
    line-height: 1.25;
    padding-right: 1rem;
    text-decoration: none;
    color: inherit;
  }
  
  .icon-button {
    border: 0;
    background-color: #fff;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
    font-size: 1.25rem;
    transition: 0.25s ease;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.15);
    z-index: 1;
    cursor: pointer;
    color: #565656;
  }
  
  .icon-button:hover, .icon-button:focus {
    background-color: #EC4646;
    color: #FFF;
  }
  
  .card-footer {
    margin-top: 1.25rem;
    border-top: 1px solid #c7950a;
    padding-top: 1.25rem;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .card-meta {
    display: flex;
    align-items: center;
    color: #787878;
  }
  
  .card-meta:first-child:after {
    display: block;
    content: "";
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: currentcolor;
    margin-left: 0.75rem;
    margin-right: 0.75rem;
  }
  
  .card-meta svg {
    flex-shrink: 0;
    width: 1em;
    height: 1em;
    margin-right: 0.25em;
  }
  
  #completedAuctions .card img{
    filter: grayscale(1);
  }
  
  #completedAuctions .card:hover, .card:focus-within {
    box-shadow: 0 0 0 2px #7a7a7a, 0 10px 60px 0 rgba(0, 0, 0, 0.1);
    transform: translatey(-5px);
  }
================================================================================
Файл: admin_panel\static\css\Auctions.css
================================================================================

.auction-grid {
    padding-top: 15px;
    margin-left: 10px;
    display: grid;
    
    grid-template-columns: repeat(4, minmax(100px, 1fr));
    gap: 16px; /* Расстояние между карточками */
  }
  
@media (max-width: 1400px) {
    .auction-grid {
        grid-template-columns: repeat(3, minmax(100px, 1fr)); /* 3 колонки на больших экранах */
        transition: 0.1s;
    }
  }
  
  @media (max-width: 1200px) {
    .auction-grid {
        grid-template-columns: repeat(2, minmax(100px, 1fr)); /* 2 колонки на средних экранах */
    }
  }
  
  @media (max-width: 800px) {
    .auction-grid {
        grid-template-columns: 1fr; /* 1 колонка на маленьких экранах */
        grid-template-columns: repeat(1, minmax(200px, 1fr)); 
        z-index: 9;
        transition: 0.1s;
      
    }
    .nav-bar{
      z-index: 10;
    }
}
================================================================================
Файл: admin_panel\static\css\create_auction.css
================================================================================
/* Переменные для цветовой палитры */
:root {
    --color-bg-light: #1e1e1e; /* Темный фон */
    --color-bg-card: #292929; /* Темный фон карточек */
    --color-text-primary: #d8d8d8; /* Светлый текст */
    --color-border: #444; /* Цвет границы */
    --color-accent-primary: #6c63ff; /* Основной акцент */
    --color-accent-secondary: #8379ff; /* Акцент при наведении */
    --color-accent-green: #4caf50; /* Зеленая кнопка */
    --color-accent-green-hover: #45a049; /* Зеленая кнопка при наведении */
    --color-shadow: rgba(0, 0, 0, 0.5); /* Мягкая тень */
    --navbar-width-min: 250px; /* Минимальная ширина сайдбара */
}

/* Базовые стили */
body {
    font-family: 'Arial', sans-serif;
    background-color: var(--color-bg-light); /* Темный фон страницы */
    color: var(--color-text-primary); /* Светлый текст */
    margin: 0;
    padding: 10px;
    box-sizing: border-box;
}

.hidden {
    display: none; /* Скрыть контент */
}

/* Контейнер дашборда */
.dashboard-container {
    display: flex;
    width: calc(100% - var(--navbar-width-min)); /* Вычитаем ширину сайдбара */
    max-width: 80%;
    margin: 10px;
    margin-left: var(--navbar-width-min);
    transition: 0.2s;
    margin-left: auto;
    margin-right: auto;
}

/* Основной контент */
.dashboard-content {
    flex: 1;
    padding: 0px;
    overflow-y: auto;
}

.dashboard-header {
    margin-bottom: 10px;
}

/* Карточка создания аукциона */
.create-auction-container {
    background-color: var(--color-bg-card); /* Темный фон карточки */
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--color-shadow); /* Мягкая тень */
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: var(--color-text-primary); /* Светлый текст */
}

/* Поля ввода */
input[type="text"],
input[type="number"],
input[type="url"],
input[type="datetime-local"] {
    width: 100%;
    padding: 12px;
    margin-top: 5px;
    border: 1px solid var(--color-border); /* Темная граница */
    border-radius: 8px;
    font-size: 16px;
    background-color: var(--color-bg-light); /* Темный фон полей */
    color: var(--color-text-primary); /* Светлый текст */
}

input[type="text"]:focus,
input[type="number"]:focus,
input[type="url"]:focus,
input[type="datetime-local"]:focus {
    border-color: var(--color-accent-primary); /* Основной акцент */
    box-shadow: 0 0 8px rgba(108, 99, 255, 0.5); /* Подсветка */
    outline: none;
}

/* Основная кнопка */
.create-button {
    padding: 12px 20px;
    background-color: var(--color-accent-primary); /* Основной акцент */
    color: #fff; /* Белый текст */
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.create-button:hover {
    background-color: var(--color-accent-secondary); /* Вторичный акцент */
    transform: scale(1.05);
}

/* Кнопка добавления фото */
.add-photo-button {
    padding: 8px 15px;
    background-color: var(--color-accent-green); /* Зеленая кнопка */
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.add-photo-button:hover {
    background-color: var(--color-accent-green-hover); /* Зеленая кнопка при наведении */
}

/* Альбом */
#album-container {
    margin-top: 20px;
}

#album input {
    margin-top: 10px;
    background-color: var(--color-bg-light); /* Темный фон ввода */
    color: var(--color-text-primary); /* Светлый текст */
    border: 1px solid var(--color-border); /* Граница */
}

#album img {
    max-width: 100px;
    border-radius: 5px;
    border: 1px solid var(--color-border); /* Темная граница изображений */
}

================================================================================
Файл: admin_panel\static\css\custom_alert.css
================================================================================
/* Затемнение фона */
.alert-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    animation: fadeIn 0.3s;
}

.alert-overlay-hide {
    animation: fadeOut 0.3s forwards;
}

/* Стиль окна сообщения */
.alert-box {
    background: #ffffff;
    padding: 20px 30px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    max-width: 80%;
    text-align: center;
    animation: slideIn 0.3s;
}

.alert-box-hide {
    animation: slideOut 0.3s forwards;
}

.alert-message {
    font-size: 16px;
    color: #333;
    margin-bottom: 20px;
}

/* Стиль кнопки закрытия */
.alert-button {
    background-color: #f1c40f;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.alert-button:hover {
    background-color: #ffe168;
}

/* Анимации */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

@keyframes slideIn {
    from { transform: translateY(-20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes slideOut {
    from { transform: translateY(0); opacity: 1; }
    to { transform: translateY(-20px); opacity: 0; }
}

================================================================================
Файл: admin_panel\static\css\enter_reg_page.css
================================================================================
/* Переменные для цветовой палитры */
:root {
    --color-bg-dark: #1B1B1B; /* Темный фон */
    --color-bg-light: #292929; /* Светлый темный фон */
    --color-text-primary: #D8D8D8; /* Основной цвет текста */
    --color-text-secondary: #555; /* Вторичный цвет текста */
    --color-accent: #ffa530; /* Акцентный цвет */
    --color-accent-light: #ffb14b; /* Светлый акцент */
    --color-shadow: rgba(0, 0, 0, 0.5); /* Тень */
    --color-border: #D8D8D8; /* Цвет границы */
}

/* Базовые стили */
body {
    font-family: 'Arial', sans-serif;
    background-color: var(--color-bg-dark); /* Темный фон */
    color: var(--color-text-primary); /* Основной цвет текста */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
    padding: 20px;
}

@media (min-width: 768px) {
    .container {
        flex-direction: row;
        justify-content: center;
        padding: 40px;
    }
}

/* Секция информации */
.info-section {
    flex: 1;
    background-color: var(--color-bg-light); /* Светлый темный фон */
    padding: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--color-shadow); /* Тень */
    max-width: 500px;
    text-align: center;
    width: 98%
}

.info-content {
    max-width: 450px;
}

.illustration {
    max-width: 450px;
    height: auto;
    margin-bottom: 20px;
    margin-left: auto;
    margin-right: auto;
    border-radius: 13px;
}

/* Заголовки и текст */
h2 {
    font-size: 24px;
    color: var(--color-accent); /* Акцентный цвет */
    margin-bottom: 10px;
}

p {
    color: var(--color-text-primary); /* Основной текст */
    font-size: 16px;
}

/* Форма */
.form-section {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 500px;
    width: 100%;
}

.form-group{
    margin-top: 10px;
}

.form-container {
    background-color: var(--color-bg-light); /* Светлый темный фон */
    padding: 10px;
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--color-shadow); /* Тень */
    width: 100%;
    max-width: 400px;
    transition: all 0.3s ease;
}

.tabs {
    display: flex;
    justify-content: space-around;
    margin-bottom: 20px;
}

.tab-button {
    background: none;
    border: none;
    padding: 10px;
    font-size: 18px;
    cursor: pointer;
    color: var(--color-text-secondary); /* Вторичный текст */
    outline: none;
    transition: color 0.3s ease;
}

.tab-button.active {
    font-weight: bold;
    border-bottom: 3px solid var(--color-accent); /* Акцентный цвет */
    color: var(--color-accent);
}

.tab-button:hover {
    color: var(--color-accent-light); /* Светлый акцент */
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}


/* Поля ввода */
input[type="text"],
input[type="email"],
input[type="password"],
input[type="phone"],
input[type="url"] {
    width: 95%;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid var(--color-border); /* Цвет границы */
    border-radius: 8px;
    font-size: 16px;
    background-color: var(--color-bg-dark); /* Темный фон */
    color: var(--color-text-primary); /* Основной текст */
}

input[type="text"]:focus,
input[type="email"]:focus,
input[type="password"]:focus,
input[type="phone"]:focus,
input[type="url"]:focus {
    border-color: var(--color-accent); /* Акцентный цвет */
    box-shadow: 0 0 8px rgba(255, 187, 99, 0.5); /* Мягкая подсветка */
    outline: none;
}

.CookiesNotif{
    text-align: center;
}

/* Кнопка отправки */
.submit-button {
    width: 100%;
    padding: 12px;
    background-color: var(--color-accent); /* Акцентная кнопка */
    color: #FFF; /* Белый текст */
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    margin-top: 10px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.submit-button:hover {
    background-color: var(--color-accent-light); /* Светлее при наведении */
    transform: scale(1.05);
}
.password-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}

.password-toggle {
    position: absolute;
    right: 10px;
    background: none;
    border: none;
    cursor: pointer;

    outline: none;
}
.password-toggle svg path{
    fill: #555;
    transition: fill 0.3s ease;
}
.password-toggle:hover svg path{
    fill: #ffbb63;
}
/* Отображение на мобильных */
@media (max-width: 767px) {
    .info-section {
        padding: 20px;
        margin-bottom: 20px;
    }

    .form-container {
        padding: 20px;
    }

    .tabs {
        flex-direction: column;
    }

    .tab-button {
        margin-bottom: 10px;
    }
}

================================================================================
Файл: admin_panel\static\css\fonts.css
================================================================================
html{
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
}
================================================================================
Файл: admin_panel\static\css\Holder.css
================================================================================
.Holder {
    right: 3px;
    position: fixed;
    display: grid;
    width: calc(100% - 220px);
    height: 98%;
    overflow-y: auto; /* Прокрутка по вертикали */
    border-radius: 10px; /* Скругление углов */
    border: 1px solid #292929; /* Бордер */
    background-color: #181818;
    margin: 5px;
    padding: 10px; /* Добавлен небольшой отступ, чтобы бордер не перекрывал содержимое */
    transition: 0.1s;
}

/* Для Webkit браузеров (Chrome, Safari, Edge) */
.Holder::-webkit-scrollbar {
    width: 8px;
}

.Holder::-webkit-scrollbar-track {
    background-color: #292929;
    border-radius: 10px;
}

.Holder::-webkit-scrollbar-thumb {
    background-color: #c7950a;
    border-radius: 10px;
    border: 2px solid #292929;
}

/* Для Firefox */
.Holder {
    scrollbar-width: thin; /* Тонкая полоса прокрутки */
    scrollbar-color: #c7950a #292929; /* Цвет полосы прокрутки и её фона */
}

@media (max-width: 800px) {
    .Holder {
        padding-right: 5px;
        padding-left: 5px;
        width: calc(100% - 80px);
        transition: 0.1s;
    }
}

@media (max-width: 500px) {
    .Holder {
        padding-right: 5px;
        width: calc(100% - 65px);
        transition: 0.1s;
    }
}
a:active,
a:hover,
a {
    text-decoration: none;
    color: #fff;
}

h2{
    margin-top: 0px;
    margin-left: 30px;
    width: fit-content;
  
  }
  /* Контейнер для страницы личного кабинета */
  .dashboard-container {
    display: flex;
    margin: 5px;
    height: 100vh;
    transition: 0.2s;
    
  }
  
 
  .dashboard-content {
    width: 100%;
    padding: 10px;
    padding-top: 0px;
  }
  
  .auction-grid {
    padding-top: 5px;
    margin-left: 5px;
    display: grid;
    
    grid-template-columns: repeat(4, minmax(100px, 1fr));
    gap: 16px; /* Расстояние между карточками */
  }
  
  /* Прочие стили для скрытого контента и загрузочного экрана */
  .hidden {
    display: none; /* Скрыть контент */
  }
  
  .loading-screen {
    
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    z-index: 1000; /* Обеспечить, чтобы экран загрузки был на переднем плане */
  }
  
  .spinner {
    border: 5px solid transparent; 
    border-top: 5px solid #ffbe0c; 
    border-radius: 50%;
    width: 50px; /* Размер спиннера */
    height: 50px; /* Размер спиннера */
    animation: spin 1s linear infinite; /* Анимация вращения */
  }
  
  /* Анимация вращения */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
    
  *, *:after, *:before {
    box-sizing: border-box;
  }
  

================================================================================
Файл: admin_panel\static\css\root.css
================================================================================
:root {
    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;
  
    color-scheme: light dark;
    color: rgba(255, 255, 255, 0.87);
    background-color: var(--background-menu);
  
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    --background-menu: #0D0D0D;
    --line-menu: #1B1B1B;
    --hover-menu-items: #252525;
    --yellow: #f5b400;
    --card_background: #292929;
  }
  
  
  body {
    margin: 0;
    display: flex;
    place-items: center;
    min-width: 320px;
    min-height: 100vh;
    background-color: #181818;
    transition: background-color 0.3s ease;
  }
  
  
  h1 {
    font-size: 3.2em;
    line-height: 1.1;
  }
  
  button {
    border-radius: 8px;
    border: 1px solid transparent;
    padding: 0.6em 1.2em;
    font-size: 1em;
    font-weight: 500;
    font-family: inherit;
    background-color: #1a1a1a;
    cursor: pointer;
    transition: border-color 0.25s;
  }
  button:hover {
    border-color: #646cff;
  }
  button:focus,
  button:focus-visible {
    outline: 4px auto -webkit-focus-ring-color;
  }
  
  @media (prefers-color-scheme: light) {
    :root {
      color: #213547;
      background-color: #ffffff;
    }
    a:hover {
      color: #747bff;
    }
    button {
      background-color: #f9f9f9;
    }
  }
  
================================================================================
Файл: admin_panel\static\css\Sidebar.css
================================================================================
div.Sidebar {
    position: fixed;
    left: 0px;
    top: 0px;
    height: 100%;
    width: 200px;
    background-color: var(--background-menu);
    box-sizing: border-box;
    transition: width 0.1s ease; /* Плавное изменение ширины */
}

div.Sidebar > div.Header {
    position: relative;
    width: 100%;
    border-bottom: 1px solid var(--line-menu);
}

div.Sidebar > div.Header > img {
    height: 50px;
    margin-top: 10px;
    margin-left: 13px;
}

div.Sidebar > div.Header > span {
    position: absolute;
    top: 20px;
    left: 80px;
    padding: 0px;
    margin: 0px;
}

/* Навигационное меню */
div.Sidebar > ul.NavigationList {
    margin-top: 30px;
    list-style-type: none;
    padding: 0px;
}

div.Sidebar > ul.NavigationList > li {
    position: relative;
    height: 40px;
    margin-left: 10px;
    margin-top: 20px;
    cursor: pointer;
    transition: .1s all;
    width: calc(100% - 20px);
    border-radius: 8px;
    padding-left: 40px; /* Отступ для иконки */
}

div.Sidebar > ul.NavigationList > li:hover {
    background-color: var(--hover-menu-items);
}

div.Sidebar > ul.NavigationList > li > a:active,
div.Sidebar > ul.NavigationList > li > a:hover,
div.Sidebar > ul.NavigationList > li > a {
    text-decoration: none;
    color: #fff;
}

div.Sidebar > ul.NavigationList > li > a > img {
    position: absolute;
    left: 5px;
    top: 5px;
    height: 30px;
}

div.Sidebar > ul.NavigationList > li > a > span {
    position: absolute;
    top: 7px;
    left: 50px;
    white-space: nowrap;
    display: inline-block;
    transition: opacity 0.1s ease;
}

/* Блок для пользователя */
div.Sidebar > div.UserBulb {
    position: absolute;
    bottom: 0px;
    width: 100%;
    border-top: 1px solid var(--line-menu);
}

div.Sidebar > div.UserBulb > div.button {
    border-radius: 20px;
    border: 1px solid var(--line-menu);
    padding: 5px;
    background-color: var(--hover-menu-items);
    margin: 15px 0;
    width: 140px;
    margin-left: 50%;
    transform: translateX(-50%);
}

div.Sidebar > div.UserBulb > div.button > img {
    height: 25px;
    margin-left: 10px;
    margin-top: 5px;
}

div.Sidebar > div.UserBulb > div.button > span {
    position: absolute;
    top: 10px;
    left: 60px;
    padding: 0px;
    margin: 0px;
}

/* Медиазапрос для маленьких экранов */
@media (max-width: 800px) {
    div.Sidebar {
        width: 60px; /* Сужаем сайдбар */
        transition: 0.1s;
    }

    div.Sidebar > div.Header > span {
        display: none; /* Скрываем текст в заголовке */
    }

    div.Sidebar > ul.NavigationList > li > a > span {
        display: none; /* Скрываем текст в пунктах меню */
    }

    div.Sidebar > ul.NavigationList > li {
        padding-left: 20px; /* Уменьшаем отступ для иконок */
    }

    div.Sidebar > ul.NavigationList > li > a > img {
        height: 25px; /* Уменьшаем размер иконок */
    }

    div.Sidebar > div.UserBulb > div.button {
        width: 45px; /* Уменьшаем размер кнопки */
    }

    div.Sidebar > div.UserBulb > div.button > img {
        height: 20px; /* Уменьшаем иконку */
        margin-left: 8px;
        margin-top: 5px;
    }
    div.Sidebar > div.UserBulb > div.button > span {
        display: none;
    }
    div.Sidebar > div.Header > img {
        height: 33px;

    }

}

@media (max-width: 500px) {
    div.Sidebar {
        width: 50px; /* Еще меньше на очень узких экранах */
        transition: 0.1s;
    }

    div.Sidebar > ul.NavigationList > li {
        padding-left: 10px; /* Еще меньше отступ для иконок */
    }
    div.Sidebar > ul.NavigationList > li > a {
        left: 0px; /* Еще меньше отступ для иконок */
    }

    div.Sidebar > ul.NavigationList > li > a > img {
        height: 25px; /* Еще меньше иконки */
    }
    div.Sidebar > div.UserBulb > div.button > span {
        display: none;
    }
    div.Sidebar > div.Header > img {
        height: 25px;

    }

}

================================================================================
Файл: admin_panel\static\js\account.js
================================================================================
document.addEventListener("DOMContentLoaded", function () {
    loadAccountData();
});

// Функция для загрузки данных пользователя
function loadAccountData() {
    fetch("/auth/get_data", {
        method: "GET",
        headers: {
            "Authorization": "Bearer " + localStorage.getItem("authToken"),
            "Content-Type": "application/json",
        },
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
        if (data.detail=="Invalid credentials"){
            
            window.open('/login',"_self")
        }
        if (data) {
            // Заполняем поля данными пользователя
            document.getElementById("avito-url").value = data.avito_url || '';
            document.getElementById("phone-number").value = data.phone_number ;
            document.getElementById("bid-notification").checked = data.mail_receive_bet_beated ;
            document.getElementById("auction-start-notification").checked = data.mail_receive_auction_started ;
        } else {
            customAlert("Ошибка загрузки данных пользователя. Попробуйте обновить страницу.");
        }
    })
    .catch(error => {
        console.error("Ошибка при загрузке данных:", error);
    });
}

// Функция для обработки изменения данных профиля
document.getElementById("accountForm").addEventListener("submit", function (e) {
    e.preventDefault();
    let nickname = document.getElementById("nickname").value;
    let avitoUrl = document.getElementById("avito-url").value;
    let phone = document.getElementById("phone-number").value;
    let mail_receive_auction_started = document.getElementById("auction-start-notification").checked;
    let mail_receive_bet_beated = document.getElementById("bid-notification").checked;

    fetch("/mongo/clients/update", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + localStorage.getItem("authToken"),
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ 
            "nickname": nickname, 
            "avito_url": avitoUrl ,
            "phone_number": phone,
            "mail_receive_auction_started": mail_receive_auction_started,
            "mail_receive_bet_beated": mail_receive_bet_beated
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
        if (data.success) {
            customAlert("Данные обновлены успешно!");
            location.reload()
        } else {
            customAlert(data.message);
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
    });
});

// Функция для обработки изменения пароля
document.getElementById("passwordForm").addEventListener("submit", function (e) {
    e.preventDefault();
    let currentPassword = document.getElementById("current-password").value;
    let newPassword = document.getElementById("new-password").value;
    let confirmPassword = document.getElementById("confirm-password").value;

    if (newPassword !== confirmPassword) {
        customAlert("Пароли не совпадают!");
        return;
    }

    fetch("/mongo/clients/change_password", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + localStorage.getItem("authToken"),
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ "old_password": currentPassword, "new_password": newPassword }),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
        if (data.success) {
            customAlert("Вы сменили пароль и будете перенаправлены на логин")
            handleLogout();
        } else {
            customAlert("Ошибка при смене пароля. Проверьте текущий пароль.");
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
    });
});


================================================================================
Файл: admin_panel\static\js\admin.js
================================================================================
const dashboardContent = document.getElementById("dashboard-content");
const auctionsTable = document.getElementById("auctionsTable");
const usersTable = document.getElementById("usersTable");
const activeClientsTable = document.getElementById("activeClientsTable");

function showAuctionsTable() {
    auctionsTable.style.display = "table";
    usersTable.style.display = "none";
    activeClientsTable.style.display = "none";
    document.getElementById("auctionSearchContainer").style.display = "block";
    document.getElementById("userSearchContainer").style.display = "none";
    document.getElementById("activeuserSearchContainer").style.display = "none";

    getAllAuctions(); 
}

function showUsersTable() {
    usersTable.style.display = "table";
    auctionsTable.style.display = "none";
    activeClientsTable.style.display = "none";
    document.getElementById("auctionSearchContainer").style.display = "none";
    document.getElementById("userSearchContainer").style.display = "block";
    document.getElementById("activeuserSearchContainer").style.display = "none";
    getAllClients(); 
}

async function showActiveClientsTable() {
    usersTable.style.display = "none";
    auctionsTable.style.display = "none";
    // Отправляем запрос к серверу, чтобы получить список активных пользователей
    const response = await fetch("/mongo/clients/active_clients", { method: "POST" });
    const activeClients = await response.json();
    document.getElementById("activeuserSearchContainer").style.display = "block";
    document.getElementById("userSearchContainer").style.display = "none";
    document.getElementById("auctionSearchContainer").style.display = "none";

    // Находим или создаем контейнер для таблицы активных пользователей
    const activeClientsTable = document.getElementById("activeClientsTableBody");
    activeClientsTable.innerHTML = ""; // Очищаем таблицу

    // Заполняем таблицу данными активных пользователей
    activeClients.forEach(client => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${client.id}</td>
            <td>${client.nickname}</td>
            <td>${client.email}</td>
            <td>${client.phone_number}</td>
            <td>${client.bet_count}</td>
        `;
        activeClientsTable.appendChild(row);
    });

    // Отображаем таблицу
    document.getElementById("activeClientsTable").style.display = "table";
}
// Filter auctions by search input
function filterAuctions() {
    const filter = document.getElementById("auctionSearchInput").value.toLowerCase();
    const rows = document.getElementById("auctionsTableBody").getElementsByTagName("tr");
    Array.from(rows).forEach(row => {
        const auctionName = row.cells[1].textContent.toLowerCase();
        row.style.display = auctionName.includes(filter) ? "" : "none";
    });
}

// Filter users by search input
function filterUsers() {
    const filter = document.getElementById("userSearchInput").value.toLowerCase();
    const rows = document.getElementById("usersTableBody").getElementsByTagName("tr");
    Array.from(rows).forEach(row => {
        const nickname = row.cells[1].textContent.toLowerCase();
        const email = row.cells[2].textContent.toLowerCase();
        const phone = row.cells[3].textContent.toLowerCase();
        row.style.display = nickname.includes(filter) || email.includes(filter) || email.includes(filter) ? "" : "none";
    });
}
// Filter active users by search input
function filterActiveUsers() {
    const filter = document.getElementById("activeuserSearchInput").value.toLowerCase();
    const rows = document.getElementById("activeClientsTableBody").getElementsByTagName("tr");
    Array.from(rows).forEach(row => {
        const nickname = row.cells[1].textContent.toLowerCase();
        row.style.display = nickname.includes(filter) ? "" : "none";
    });
}

// Отображение списка аукционов в таблице с вызовом deleteAuction
async function getAllAuctions() {
    const response = await fetch("/mongo/auction/short_get_all", { method: "GET" });
    const auctions = await response.json();
    const tableBody = document.getElementById("auctionsTableBody");
    tableBody.innerHTML = ""; // Очистка таблицы

    auctions.reverse().forEach(auction => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${auction.a_id}</td>
            <td>${auction.short_name}</td>
            <td><button onclick="editAuction('${auction.a_id}')">Edit</button></td>
            <td><button onclick="deleteAuction('${auction.a_id}', '${auction.short_name}')">Delete</button></td>
        `;
        tableBody.appendChild(row);
    });
}

// Функция для удаления аукциона с подтверждением
async function deleteAuction(id, auctionName) {
    // Создаем модальное окно подтверждения
    const confirmation = prompt(`Введите название аукциона "${auctionName}" для подтверждения удаления:`);

    // Проверяем, совпадает ли введенное значение с именем аукциона
    if (confirmation === auctionName) {
        const response = await fetch(`/mongo/auction/delete?a_id=${id}`, { method: "DELETE" });
        if (response.ok) {
            customAlert("Аукцион успешно удален.");
            getAllAuctions(); // Обновление списка после удаления
        } else {
            customAlert("Ошибка при удалении аукциона.");
        }
    } else {
        customAlert("Удаление отменено: имя аукциона не совпадает.");
    }
}

/// Функция для бана пользователя с подтверждением
async function banClient(id, clientNickname) {
    // Создаем модальное окно подтверждения
    const confirmation = prompt(`Введите никнейм пользователя "${clientNickname}" для подтверждения блокировки:`);

    // Проверяем, совпадает ли введенное значение с никнеймом пользователя
    if (confirmation === clientNickname) {
        const response = await fetch(`/mongo/clients/ban?id=${id}`, { method: "DELETE" });
        if (response.ok) {
            customAlert("Пользователь успешно заблокирован.");
            getAllClients(); // Обновление списка после блокировки
        } else {
            customAlert("Ошибка при блокировке пользователя.");
        }
    } else {
        customAlert("Блокировка отменена: введенный никнейм не совпадает.");
    }
}

// Отображение списка пользователей в таблице с вызовом banClient
async function getAllClients() {
    const response = await fetch("/mongo/clients/get_all", { method: "GET" });
    const clients = await response.json();
    const tableBody = document.getElementById("usersTableBody");
    tableBody.innerHTML = ""; // Очистка таблицы

    clients.reverse().forEach(client => {
        const row = document.createElement("tr");
       
        row.innerHTML = `
            <td>${client.id}</td>
            <td>${client.nickname}</td>
            <td>${client.email}</td>
            <td>${client.phone_number}</td>
            <td><button onclick="editClient('${client.id}')">Edit</button></td>
        `;
        if (client['status']=="banned"){
            row.innerHTML+=`<td><button onclick="unbanClient('${client.id}','${client.nickname}')">Unban</button></td>`
        }else{
            row.innerHTML+=`<td><button onclick="banClient('${client.id}','${client.nickname}')">Ban</button></td>`

        }
        tableBody.appendChild(row);
    });
}



// Функция для закрытия модального окна
function closeEditAuctionModal() {
    document.getElementById("editAuctionModal").style.display = "none";
}



// Показать модальное окно и загрузить данные пользователя
async function editClient(id) {
    // Получаем данные о конкретном пользователе
    const response = await fetch(`/mongo/clients/get?clients_id=${id}`, { method: "GET" });
    const client = await response.json();
    console.log(client);

    const container = document.getElementById("clientFieldsContainer");
    container.innerHTML = ""; // Очищаем контейнер перед добавлением новых полей

    // Проходим по всем полям пользователя и создаем для них инпуты
    for (const [key, value] of Object.entries(client)) {
        if (["c_id", "password", "get_mails"].includes(key)) continue; // Пропускаем ID и другие неизменяемые поля

        const fieldLabel = document.createElement("label");
        fieldLabel.setAttribute("for", `client_${key}`);
        fieldLabel.textContent = key.charAt(0).toUpperCase() + key.slice(1); // Форматируем имя поля

        // Проверяем, если поле должно быть чекбоксом
        if (["mail_receive_bet_beated", "mail_receive_auction_started", "email_verified"].includes(key)) {
            const fieldInput = document.createElement("input");
            fieldInput.setAttribute("type", "checkbox");
            fieldInput.setAttribute("id", `client_${key}`);
            fieldInput.setAttribute("name", key);
            fieldInput.checked = Boolean(value); // Устанавливаем состояние чекбокса на основе значения
            
            container.appendChild(fieldLabel);
            container.appendChild(fieldInput);
        } else {
            const fieldInput = document.createElement("input");
            fieldInput.setAttribute("type", "text");
            fieldInput.setAttribute("id", `client_${key}`);
            fieldInput.setAttribute("name", key);
            fieldInput.value = value || ""; // Устанавливаем текущее значение из данных пользователя
            
            container.appendChild(fieldLabel);
            container.appendChild(fieldInput);
        }
        container.appendChild(document.createElement("br"));
    }

    // Отображаем модальное окно
    const editClientModal = document.getElementById("editClientModal");
    editClientModal.style.display = "flex";

    // Сохраняем ID текущего пользователя, чтобы использовать при сохранении
    editClientModal.dataset.clientId = id;
}


// Функция для закрытия модального окна редактирования пользователя
function closeEditClientModal() {
    document.getElementById("editClientModal").style.display = "none";
}
// Функция для сохранения изменений пользователя
async function saveClientChanges() {
    const editClientModal = document.getElementById("editClientModal");
    const id = editClientModal.dataset.clientId;

    // Сбор данных из всех полей формы
    const fields = document.getElementById("clientFieldsContainer").getElementsByTagName("input");
    const updatedClient = {};

    for (let field of fields) {
        const fieldName = field.name;

        // Проверяем, является ли поле чекбоксом
        if (field.type === "checkbox") {
            updatedClient[fieldName] = field.checked; // Сохраняем значение чекбокса как true/false
        } else if (field.type === "text") {
            const fieldValue = field.value;
            if (fieldValue !== "") {
                updatedClient[fieldName] = fieldValue; // Сохраняем текстовые поля, если они не пустые
            }
        }
    }

    // Формируем JSON объект для отправки
    const payload = {
        id: id,
        ...updatedClient
    };

    // Отправка данных на сервер
    const response = await fetch(`/mongo/clients/edit?id=${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    });

    if (response.ok) {
        customAlert("Client updated successfully");
        closeEditClientModal();
        getAllClients(); // Обновление списка пользователей
    } else {
        customAlert("Failed to update client");
    }
}




// Закрытие модального окна при нажатии на клавишу Esc
document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
        closeEditAuctionModal();
        closeEditClientModal();
    }
});

// Функция для разбана пользователя
async function unbanClient(id, clientNickname) {
     // Создаем модальное окно подтверждения
     const confirmation = prompt(`Введите никнейм пользователя "${clientNickname}" для подтверждения блокировки:`);

     // Проверяем, совпадает ли введенное значение с никнеймом пользователя
     if (confirmation === clientNickname) {
        try {
            // Отправляем запрос на сервер для разбана пользователя
            const response = await fetch(`/mongo/clients/unban?id=${id}`, {
                method: 'POST',  // POST запрос для разбана
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                // Успешный ответ
                const result = await response.json();
                customAlert(result.message); // Показать сообщение об успешном разбане
                getAllClients(); // Обновить список пользователей
            } else {
                // Ошибка от сервера
                const error = await response.json();
                customAlert(`Error: ${error.detail}`); // Показать ошибку
            }
        } catch (error) {
            // Ошибка на клиенте
            console.error('Error during unban:', error);
            customAlert('An error occurred while trying to unban the user.');
        }
    }
}
async function editAuction(id) {
    const response = await fetch(`/mongo/auction/get?a_id=${id}`, { method: "GET" });
    const auction = await response.json();

    const container = document.getElementById("auctionFieldsContainer");
    container.innerHTML = ""; // Очищаем контейнер перед добавлением новых полей

    // Добавляем поля для каждого свойства аукциона
    for (const [key, value] of Object.entries(auction)) {
        if (["a_id", "created_at", "is_active", "album"].includes(key)) continue;
        console.log(key, value)
        const fieldLabel = document.createElement("label");
        fieldLabel.setAttribute("for", `auction_${key}`);
        fieldLabel.textContent = key.charAt(0).toUpperCase() + key.slice(1); 

        if (key === "photo") {
            // Если поле - это фото, создаем элемент для загрузки файла и превью
            const fileInput = document.createElement("input");
            fileInput.type = "file";
            fileInput.id = "auction_photo";
            fileInput.name = "photo";
            fileInput.accept = "image/*";
            fileInput.onchange = handleImageUpload; // Добавляем обработчик загрузки

            const previewImg = document.createElement("img");
            previewImg.id = "previewImg";
            previewImg.style.maxWidth = "100px";
            previewImg.src = "data:image/jpeg;base64,"+value || ""; // Устанавливаем текущее изображение, если оно есть

            container.appendChild(fieldLabel);
            container.appendChild(fileInput);
            container.appendChild(previewImg);
        } 
        else if(key == "bets"){
            bvalue = JSON.stringify(auction['bets'], null, 2)
            const fieldInput = document.createElement("textarea");
            fieldInput.type = "text";
            fieldInput.id = `auction_${key}`;
            fieldInput.name = key;
            fieldInput.value = bvalue || ""; 

            container.appendChild(fieldLabel);
            container.appendChild(fieldInput); 
        }
        else {
            const fieldInput = document.createElement("input");
            fieldInput.type = "text";
            fieldInput.id = `auction_${key}`;
            fieldInput.name = key;
            fieldInput.value = value || ""; 

            container.appendChild(fieldLabel);
            container.appendChild(fieldInput);  
        }
        container.appendChild(document.createElement("br"));
    }

    document.getElementById("editAuctionModal").style.display = "flex";
    document.getElementById("editAuctionModal").dataset.auctionId = id;
}

// Обработчик загрузки изображения
function handleImageUpload(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            document.getElementById("previewImg").src = e.target.result;
        };
        reader.readAsDataURL(file);
    }
}

async function saveAuctionChanges() {
    const editAuctionModal = document.getElementById("editAuctionModal");
    const id = editAuctionModal.dataset.auctionId;

    // Сбор данных из всех полей формы
    const fields = document.getElementById("auctionFieldsContainer").getElementsByTagName("input");
    const bets = document.getElementById("auction_bets"); 
    const updatedAuction = {};

    // Обработка input полей
    for (let field of fields) {
        const fieldName = field.name;
        const fieldValue = field.value;

        // Заполняем только поля, которые были изменены
        if (fieldValue !== "") {
            updatedAuction[fieldName] = fieldValue;
        }
    }

    if (document.getElementById("auction_bets").value != "") {
        updatedAuction["bets"] = document.getElementById("auction_bets").value; // Добавляем в объект, если текст не пустой
      
    }
    
    console.log(updatedAuction)
    // Формируем JSON объект для отправки
    const payload = {
        a_id: id,
        ...updatedAuction
    };

    // Отправка данных на сервер
    const response = await fetch(`/mongo/auction/update_auction?a_id=${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    });

    if (response.success) {
        customAlert(response.message);
        closeEditAuctionModal();
        getAllAuctions(); // Обновление списка аукционов
    } else {
        customAlert("Failed to update auction");
    }
}
async function saveAuctionChanges() {
    const editAuctionModal = document.getElementById("editAuctionModal");
    const id = editAuctionModal.dataset.auctionId;

    const fields = document.getElementById("auctionFieldsContainer").getElementsByTagName("input");
    const updatedAuction = {};

    for (let field of fields) {
        const fieldName = field.name;
        const fieldValue = field.value;
        if (fieldName === "photo" && field.files.length > 0) {
            const file = field.files[0];
            updatedAuction.photo = await convertFileToBase64(file); 
        } else {
            updatedAuction[fieldName] = fieldValue;
        }
    }
    
    if (document.getElementById("auction_bets").value != "") {
        updatedAuction["bets"] = document.getElementById("auction_bets").value; // Добавляем в объект, если текст не пустой
      
    }
    

    const payload = { a_id: id, ...updatedAuction };

    const response = await fetch(`/mongo/auction/update_auction?a_id=${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    });
    
    const result = await response.json(); // Преобразуем ответ в JSON
    
    if (result.success) {
        customAlert("Auction updated successfully");
        closeEditAuctionModal();
        getAllAuctions();
    } else {
        customAlert("Error: " + result['message']);
    }
}


// Конвертация файла изображения в Base64
function convertFileToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
        reader.readAsDataURL(file);
    });
}


getAllAuctions();
showAuctionsTable();



================================================================================
Файл: admin_panel\static\js\auction.js
================================================================================

var end_datetime; 
// Функция для загрузки данных аукциона
function loadAuctionDetails(auctionId) {
    fetch(`/mongo/auction/get?a_id=${auctionId}`)
        .then(response => response.json())
        .then(data => {
            console.log(data);
            end_datetime = new Date(data.end_datetime);

            // Заполняем данные аукциона
            document.querySelector("#auction-datetime").textContent = new Date(data.start_datetime).toLocaleString();
            document.querySelector("#auction-datetime-end").textContent = new Date(data.end_datetime).toLocaleString() + " UTC+" + new Date().getTimezoneOffset() / -60;
            document.querySelector("#coin-name").textContent = data.short_name;
            document.querySelector("#starting-price").textContent = data.start_price;
            document.querySelector("#min-bid-step").textContent = data.min_bid_step;
            document.querySelector("#description").textContent = data.description;
            document.querySelector("#status-button").textContent = data.is_active ? "Идут торги..." : "Неактивно";

            if ("bank" in data) {
                const coinUrl = document.querySelector("#coin-url");
                coinUrl.href = data['bank'];
                coinUrl.innerHTML = "Подробнее на Банк России...";
            }

            // Создаем карусель
            const carouselContainer = document.querySelector("#carousel-container");
            carouselContainer.innerHTML = ""; // Очищаем предыдущие данные

            const images = [];

            // Добавляем главное фото
            if (data.photo) {
                images.push(`data:image/jpeg;base64,${data.photo}`);
            }

            // Добавляем фото из альбома
            if (data.album && Array.isArray(data.album)) {
                data.album.forEach(photo => {
                    images.push(`data:image/jpeg;base64,${photo}`);
                });
            }

            // Если есть изображения, создаем карусель
            if (images.length > 0) {
                const track = document.createElement("div");
                track.className = "carousel-track";

                images.forEach((src, index) => {
                    const slide = document.createElement("div");
                    slide.className = "carousel-slide";
                    const img = document.createElement("img");
                    img.src = src;
                    img.alt = `Изображение ${index + 1}`;                    
                    slide.appendChild(img);
                    track.appendChild(slide);
                });

                carouselContainer.appendChild(track);

                // Добавляем кнопки управления
                const prevButton = document.createElement("button");
                prevButton.className = "carousel-button prev";
                prevButton.textContent = "❮";
                const nextButton = document.createElement("button");
                nextButton.className = "carousel-button next";
                nextButton.textContent = "❯";
                
                carouselContainer.appendChild(prevButton);
                carouselContainer.appendChild(nextButton);

                if (images.length ==1){
                    prevButton.style.display = "None";
                    nextButton.style.display = "None";
                }

                // Добавляем логику для карусели
                const slides = Array.from(track.children);
                let currentSlide = 0;

                const updateCarousel = () => {
                    const slideWidth = slides[0].getBoundingClientRect().width;
                    track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
                };

                prevButton.addEventListener("click", () => {
                    currentSlide = (currentSlide - 1 + slides.length) % slides.length;
                    updateCarousel();
                });

                nextButton.addEventListener("click", () => {
                    currentSlide = (currentSlide + 1) % slides.length;
                    updateCarousel();
                });
                window.addEventListener("resize", updateCarousel);

                // Инициализация карусели
                updateCarousel();
            } else {
                // Если нет фото, показываем сообщение
                carouselContainer.textContent = "Изображения отсутствуют";
            }

            // Заполняем таблицу ставок
            const bidTable = document.querySelector("#bid-table tbody");
            bidTable.innerHTML = ""; // Очищаем предыдущие данные

            document.getElementById("time").textContent = "Время UTC+" + new Date().getTimezoneOffset() / -60;

            if (data.bets && data.bets.length > 0) {
                data.bets.slice().reverse().forEach(bet => {
                    const row = document.createElement("tr");

                    const userNameCell = document.createElement("td");
                    userNameCell.textContent = bet.nickname;
                    row.appendChild(userNameCell);

                    const betAmountCell = document.createElement("td");
                    betAmountCell.textContent = bet.bet_cost + ' ₽';
                    row.appendChild(betAmountCell);

                    const betTimeCell = document.createElement("td");
                    console.log(bet.created_at);
                    betTimeCell.textContent = new Date(bet.created_at + "+00:00").toLocaleString();

                    row.appendChild(betTimeCell);

                    bidTable.appendChild(row);
                });
            } else {
                // Если ставок нет, показываем сообщение
                const noBetsRow = document.createElement("tr");
                const noBetsCell = document.createElement("td");
                noBetsCell.colSpan = 3; // Чтобы объединить ячейки в строке
                noBetsCell.textContent = "Ставок пока нет";
                noBetsRow.appendChild(noBetsCell);
                bidTable.appendChild(noBetsRow);
            }
        })
        .catch(error => {
            console.error("Ошибка при загрузке данных:", error);
        });
}


// Функция для отправки ставки
document.getElementById("place-bid").addEventListener("click", function() {
    const bidInput = document.querySelector(".bid-input");
    const bidAmount = bidInput.value;
    if (bidAmount < 1) {
        customAlert("Ставка должна быть больше 0.");
        return;
    }

    const auctionId = new URLSearchParams(window.location.search).get("a_id");
    fetch(`/mongo/auction/add_bet_to_auction?a_id=${auctionId}&bet_cost=${bidAmount}`, {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded'
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);
        if(data["detail"]=="Invalid credentials"){
            customAlert("Сначала авторизируйтесь");
            return;
        }
        if (data["status"]!='error') {
            customAlert("Ставка успешно сделана!");
            loadAuctionDetails(auctionId); // Обновляем данные аукциона
        } else {
            customAlert("Ошибка при размещении ставки. "+ data["message"]);
        }
    })
    .catch(error => {
        console.error("Ошибка при размещении ставки:", error);
    });
});

// Функция для выхода из аккаунта
function logout() {
    localStorage.removeItem("authToken");
    customAlert("Вы вышли из аккаунта");
    window.location.href = "login";
}

document.addEventListener("DOMContentLoaded", function () {
    const zoomContainer = document.querySelector(".zoom-container");
    const coinImage = document.querySelector("#coin-image");
    const zoomLens = document.createElement("div");
    const zoomedImage = document.createElement("img");

    zoomLens.className = "zoom-lens";
    zoomContainer.appendChild(zoomLens);

    zoomedImage.className = "zoom-image";
    zoomContainer.appendChild(zoomedImage);

    // Обработчик события наведения мыши
    zoomContainer.addEventListener("mousemove", (e) => {
        const { left, top, width, height } = zoomContainer.getBoundingClientRect();

        // Вычисляем координаты курсора относительно контейнера
        const lensX = e.clientX - left;
        const lensY = e.clientY - top;

        // Установка позиции лупы
        zoomLens.style.left = `${lensX - zoomLens.offsetWidth / 2}px`; // Центрирование лупы по курсору
        zoomLens.style.top = `${lensY - zoomLens.offsetHeight / 2}px`; // Центрирование лупы по курсору

        // Установка позиции увеличенного изображения
        zoomedImage.src = coinImage.src; // Ссылка на исходное изображение
        zoomedImage.style.display = "block"; // Показываем увеличенное изображение
        // Центрируем увеличенное изображение относительно курсора
        zoomedImage.style.left = `${lensX}px`;
        zoomedImage.style.top = `${lensY}px`;
        zoomedImage.style.transform = `translate(-${lensX * 2}px, -${lensY * 2}px)`; // Увеличиваем изображение с учетом положения курсора
    });

    // Обработчик события покидания мыши
    zoomContainer.addEventListener("mouseleave", () => {
        zoomedImage.style.display = "none"; // Скрываем увеличенное изображение при выходе
        zoomLens.style.display = "none"; // Скрываем лупу
    });

    // Обработчик события наведения на изображение
    coinImage.addEventListener("load", () => {
        zoomLens.style.display = "block"; // Показываем лупу при загрузке изображения
    });
});

// Функция для загрузки и обновления данных ставок
function loadAndUpdateBets(auctionId) {
    fetch(`/mongo/auction/get_bets?a_id=${auctionId}`)
        .then(response => response.json())
        .then(data => {
            console.log(data);

            // Заполняем таблицу ставок
            const bidTable = document.querySelector("#bid-table tbody");
            bidTable.innerHTML = ""; // Очищаем предыдущие данные

            if (data && data.length > 0) {
                data.slice().reverse().forEach(bet => {
                    const row = document.createElement("tr");

                    const userNameCell = document.createElement("td");
                    userNameCell.textContent = bet.nickname;
                    row.appendChild(userNameCell);

                    const betAmountCell = document.createElement("td");
                    betAmountCell.textContent = bet.bet_cost + ' ₽';
                    row.appendChild(betAmountCell);

                    const betTimeCell = document.createElement("td");
                    betTimeCell.textContent = new Date(bet.created_at+"+00:00").toLocaleString();
                    row.appendChild(betTimeCell);

                    bidTable.appendChild(row);
                });
            } else {
                // Если ставок нет, показываем сообщение
                const noBetsRow = document.createElement("tr");
                const noBetsCell = document.createElement("td");
                noBetsCell.colSpan = 3; // Чтобы объединить ячейки в строке
                noBetsCell.textContent = "Ставок пока нет";
                noBetsRow.appendChild(noBetsCell);
                bidTable.appendChild(noBetsRow);
            }
        })
        .catch(error => {
            console.error("Ошибка при загрузке данных:", error);
        });
}


// Загружаем данные аукциона при загрузке страницы
document.addEventListener("DOMContentLoaded", function () {
    const urlParams = new URLSearchParams(window.location.search);
    const auctionId = urlParams.get("a_id");
    if (auctionId) {
        loadAuctionDetails(auctionId); // Загружаем данные аукциона
    } else {
        customAlert("ID аукциона не найден. Перейдите на страницу с аукционами.");
        window.location.href = "/";
    }
     // Вызываем функцию для обновления ставок каждую секунду
    setInterval(() => {
        loadAndUpdateBets(auctionId); // Обновляем таблицу ставок
    }, 2000); // Каждую 2 секунды


});


================================================================================
Файл: admin_panel\static\js\create_auction.js
================================================================================
document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("createAuctionForm");
    const fileInput = document.getElementById("coin-photo");
    const previewImage = document.getElementById("preview-image");
    let base64Image = ""; // Variable to store the Base64 of the main image
    let albumImages = []; // Array to store additional images' Base64

    // Function to convert an image to Base64
    function convertImageToBase64(file) {
        return new Promise((resolve) => {
            const reader = new FileReader();
            reader.onloadend = () => {
                const base64 = reader.result.split(",")[1]; // Extract Base64 string
                resolve(base64); // Resolve promise with Base64 string
            };
            reader.readAsDataURL(file); // Read file as Data URL
        });
    }

    // Обработка выбора главного фото
    fileInput.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                previewImage.src = reader.result; // Устанавливаем изображение в элемент превью
                previewImage.style.display = "block"; // Показываем превью
                convertImageToBase64(file).then((base64) => {
                    base64Image = base64; // Сохраняем Base64 изображения
                });
            };
            reader.readAsDataURL(file); // Преобразуем файл в Data URL
        }
    });

    // Handle form submission
    form.addEventListener("submit", function (e) {
        e.preventDefault(); // Prevent default form submission

        // Check and validate the start and end date-time fields
        const startDateTime = document.getElementById("start_datetime").value;
        const endDateTime = document.getElementById("end_datetime").value;

        if (!isValidDateTime(startDateTime)) {
            customAlert("Неверный формат даты начала! Используйте формат: дд.мм.гггг чч:мм");
            return;
        }

        if (!isValidDateTime(endDateTime)) {
            customAlert("Неверный формат даты окончания! Используйте формат: дд.мм.гггг чч:мм");
            return;
        }

        // Check and validate the price fields
        const startPrice = document.getElementById("start_price").value;
        const minBidStep = document.getElementById("min_bid_step").value;

        if (!isPositiveNumber(startPrice)) {
            customAlert("Начальная цена должна быть числом больше 0!");
            return;
        }

        if (!isPositiveNumber(minBidStep)) {
            customAlert("Минимальный шаг ставки должен быть числом больше 0!");
            return;
        }

        // Collect additional images from the album inputs
        let albumInputs = document.querySelectorAll('#album input[type="file"]'); // Find all file inputs in the album container
        let albumPromises = []; // To hold promises for each image conversion

        albumInputs.forEach((input) => {
            let file = input.files[0];
            if (file) {
                albumPromises.push(convertImageToBase64(file)); // Add conversion promise to the array
            }
        });

        // Wait for all Base64 conversions to complete
        Promise.all(albumPromises).then((albumBase64Images) => {
            albumImages = albumBase64Images; // Store all album images' Base64 in the array

            // Prepare data to send
            let auctionData = {
                short_name: document.getElementById("short_name").value,
                start_datetime: startDateTime,
                end_datetime: endDateTime,
                start_price: startPrice,
                min_bid_step: minBidStep,
                description: document.getElementById("description").value,
                bank: document.getElementById("bank").value,
                photo: base64Image, // Main image in Base64
                album: albumImages // Additional images in Base64
            };

            console.log(auctionData); // Check data before sending it

            // Send data via fetch
            fetch("/mongo/auction/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(auctionData),
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    customAlert("Аукцион успешно создан!");
                    // Uncomment the following line for redirection after successful auction creation
                    // window.location.href = `alt_auction?a_id=${data.a_id}`;
                } else {
                    customAlert("Ошибка при создании аукциона. Попробуйте снова.");
                }
            })
            .catch(error => {
                console.error("Ошибка при создании аукциона:", error);
            });
        });
    });
});

// Функция для добавления поля загрузки дополнительного фото
function addAlbumPhotoInput() {
    // Получаем контейнер для альбома
    const album = document.getElementById('album');

    // Создаем новый input для загрузки фотографии
    const inp = document.createElement('input');
    inp.type = 'file';
    inp.classList.add('coin-album'); // Добавляем класс для идентификации
    inp.accept = 'image/*'; // Только изображения

    // Создаем элемент для превью изображения
    const previewContainer = document.createElement('div');
    previewContainer.classList.add('photo-preview');
    const img = document.createElement('img');
    img.style.display = "none"; // Скрываем изображение по умолчанию
    previewContainer.appendChild(img);
    
    // Добавляем контейнер с input и превью в альбом
    album.appendChild(inp);
    album.appendChild(previewContainer);

    // Обработка выбора дополнительного фото
    inp.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                // Отображаем изображение в превью
                img.src = reader.result;
                img.style.display = "block"; // Показываем изображение
            };
            reader.readAsDataURL(file); // Преобразуем файл в Data URL
        }
    });
}

// Функция проверки формата даты
function isValidDateTime(dateTime) {
    const dateTimeRegex = /^(\d{2}).(\d{2}).(\d{4}) (\d{2}):(\d{2})$/; // Регулярное выражение для дд.мм.гггг чч:мм
    const match = dateTime.match(dateTimeRegex);
    if (!match) return false;

    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10);
    const year = parseInt(match[3], 10);
    const hours = parseInt(match[4], 10);
    const minutes = parseInt(match[5], 10);

    // Проверяем корректность значений даты и времени
    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > 2100) return false;
    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) return false;

    return true;
}

// Проверка числовых полей
function isPositiveNumber(value) {
    return !isNaN(value) && Number(value) > 0;
}

document.addEventListener("DOMContentLoaded", function () {
    // Инициализация Flatpickr на полях выбора даты и времени
    flatpickr("#start_datetime", {
        enableTime: true, // Включить выбор времени
        dateFormat: "d.m.Y H:i", // Формат даты и времени
        time_24hr: true, // Формат времени 24 часа
        locale: "ru", // Локализация на русский язык
        minDate: "today", // Минимальная дата — сегодня
    });

    flatpickr("#end_datetime", {
        enableTime: true,
        dateFormat: "d.m.Y H:i",
        time_24hr: true,
        locale: "ru",
        minDate: "today",
    });
});

================================================================================
Файл: admin_panel\static\js\custom_alert.js
================================================================================
function customAlert(message, options = {}) {
    // Создаём затемнённый фон и контейнер
    const overlay = document.createElement("div");
    overlay.classList.add("alert-overlay");

    const alertBox = document.createElement("div");
    alertBox.classList.add("alert-box");

    // Настраиваем заголовок и текст сообщения
    const alertMessage = document.createElement("p");
    alertMessage.classList.add("alert-message");
    alertMessage.innerText = message;

    // Создаем кнопку закрытия
    const closeButton = document.createElement("button");
    closeButton.classList.add("alert-button");
    closeButton.innerText = "OK";

    // Добавляем элементы в контейнер
    alertBox.appendChild(alertMessage);
    alertBox.appendChild(closeButton);
    overlay.appendChild(alertBox);
    document.body.appendChild(overlay);

    // Закрытие при нажатии на кнопку, вне окна или клавишу Esc
    closeButton.onclick = closeAlert;
    overlay.onclick = (e) => {
        if (e.target === overlay) closeAlert();
    };

    function closeAlert() {
        overlay.classList.add("alert-overlay-hide");
        alertBox.classList.add("alert-box-hide");

        // Удаляем обработчик событий после закрытия
        document.removeEventListener("keydown", handleKeyDown);

        setTimeout(() => {
            document.body.removeChild(overlay);
        }, 300);
    }

    function handleKeyDown(event) {
        if (event.key === "Escape") {
            closeAlert();
        }
    }

    // Добавляем обработчик для клавиши Esc
    document.addEventListener("keydown", handleKeyDown);
}

================================================================================
Файл: admin_panel\static\js\index.js
================================================================================
async function fetchAuctionData() {
    try {
        const response = await fetch('/mongo/auction/get_all', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            customAlert('Network response was not ok ' + response.statusText);
            throw new Error('Network response was not ok ' + response.statusText);
        }

        const data = await response.json();
        displayAuctionData(data);
    } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
        customAlert(error);
    }
}

function displayAuctionData(data) {
    const activeAuctionGrid = document.getElementById('activeAuctions');
    const upcomingAuctionGrid = document.getElementById('upcomingAuctions');
    const completedAuctionGrid = document.getElementById('completedAuctions');

    activeAuctionGrid.innerHTML = ''; // Очистить существующие данные активных аукционов
    upcomingAuctionGrid.innerHTML = ''; // Очистить существующие данные предстоящих аукционов
    completedAuctionGrid.innerHTML = ''; // Очистить существующие данные завершенных аукционов
    document.getElementById('active-header').style.display="none";
    document.getElementById('upcoming-header').style.display="none";
    document.getElementById('finished-header').style.display="none";
    const now = new Date();

    data.forEach(auction => {
        const startTime = new Date(auction.start_datetime);
        const endTime = new Date(auction.end_datetime);
        
        const auctionCard = document.createElement('div');
        auctionCard.className = 'auction-card';
        auctionCard.innerHTML = `
            <div class="card-list">
                <article class="card">
                    <figure class="card-image">
                        <img src='data:image/jpeg;base64,${auction.photo}' />
                    </figure>
                    <div class="card-header">
                        <a href="#">${auction.short_name}</a>
                    </div>
                    <div class="card-footer">
                        <span><strong>От ${auction["start_price"]} ₽</strong></span>
                    </div>
                    <div class="card-meta card-meta--date">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="2" y="4" width="20" height="18" rx="4" />
                            <path d="M8 2v4" />
                            <path d="M16 2v4" />
                            <path d="M2 10h20" />
                        </svg>
                        ${new Date(auction.start_datetime).toLocaleString()}
                    </div>
                </article>
            </div>
        `;

        // Добавить событие клика на карточку
        auctionCard.addEventListener('click', () => {
            const auctionId = auction.a_id.a_id || auction.a_id; // Получить ID аукциона
            window.open(`alt_auction?a_id=${auctionId}`, '_self');
        });

        // Определяем, в какую секцию добавлять аукцион
        if (startTime <= now && now <= endTime) {
            // Активные аукционы
            activeAuctionGrid.appendChild(auctionCard);
            document.getElementById('active-header').style.display="none";
        } else if (startTime > now) {
            // Предстоящие аукционы
            upcomingAuctionGrid.appendChild(auctionCard);
            document.getElementById('upcoming-header').style.display="block";
        } else {
            // Завершенные аукционы
            completedAuctionGrid.appendChild(auctionCard);
            document.getElementById('finished-header').style.display="block";
        }
    });

    
    document.getElementById("loadingScreen").style.display = "none";
}


// Fetch auction data when the page loads
window.onload = fetchAuctionData;

================================================================================
Файл: admin_panel\static\js\scripts.js
================================================================================

// Функция для переключения вкладок
function openTab(evt, tabName) {
    let tabContents = document.getElementsByClassName("tab-content");
    let tabButtons = document.getElementsByClassName("tab-button");

    // Скрыть все вкладки
    for (let i = 0; i < tabContents.length; i++) {
        tabContents[i].style.display = "none";
        tabContents[i].classList.remove("active");
    }

    // Убрать активное состояние с кнопок
    for (let i = 0; i < tabButtons.length; i++) {
        tabButtons[i].classList.remove("active");
    }

    // Показать текущую вкладку и добавить активный класс к кнопке
    document.getElementById(tabName).style.display = "block";
    document.getElementById(tabName).classList.add("active");
    evt.currentTarget.classList.add("active");
}

// Подключение формы входа к бэкенду
document.getElementById("loginForm").addEventListener("submit", function (e) {
    e.preventDefault();
    let password = document.getElementById("login-password").value;
    let mail = document.getElementById("login-mail").value;

    fetch('/auth/token', {
        method: 'POST',
        headers: {
            'accept': 'application/json'
        },
        body: new URLSearchParams({
            'grant_type': 'password',
            'username': mail,
            'password': password,
            'scope': '',
            'client_id': 'string',
            'client_secret': 'string'
        })
    })
        .then(response => response.json())
        .then(data => {
            console.log(data)
            if (data['detail'] == 'Invalid credentials'){
                customAlert("Неверные данные входа");
            }
            if (data['access_token']) {
                window.open(`/`, "_self");
            } else if (data=="Ваша почта не подтверждена, сообщение отправлено на почту") {
                customAlert(data);
            }
        })
        .catch(error => {
            console.error("Ошибка:", error);
        });
});

document.getElementById('register-phone').addEventListener('input', function (e) {
    let x = e.target.value.replace(/\D/g, '').substring(1); // Убираем все, кроме чисел
    let formattedNumber = '+7 ';
    if (x.length > 0) formattedNumber += '(' + x.substring(0, 3);
    if (x.length >= 4) formattedNumber += ') ' + x.substring(3, 6);
    if (x.length >= 7) formattedNumber += '-' + x.substring(6, 8);
    if (x.length >= 9) formattedNumber += '-' + x.substring(8, 10);
    e.target.value = formattedNumber;
  });


  document.getElementById('register-email').addEventListener('input', function (e) {
    // Убираем пробелы с начала и конца и запрещаем ввод пробелов внутри
    e.target.value = e.target.value.replace(/\s/g, '');

    // Валидация для email формата
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*$/;
    if (!emailRegex.test(e.target.value)) {
        e.target.setCustomValidity("Пожалуйста, введите корректный email.");
    } else {
        e.target.setCustomValidity("");
    }
});

// Подключение формы регистрации к бэкенду
document.getElementById("registerForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const password = document.getElementById("register-password").value;
    const confirmPassword = document.getElementById("confirm-password").value;
    const phone_number = document.getElementById("register-phone").value;
    const email = document.getElementById("register-email").value;
    const nickname = document.getElementById("register-nickname").value;

    // Проверка совпадения паролей
    if (password !== confirmPassword) {
        customAlert("Пароли не совпадают. Пожалуйста, попробуйте снова.");
        return;
    }

    // Проверка на уже зарегистрированный email
    fetch(`/auth/check_mail?mail=${email}`, {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data === 1) {
            customAlert("Этот email уже зарегистрирован.");
            return;
        }
        console.log(phone_number)
        // Отправка данных для регистрации, если email не зарегистрирован
        return fetch(`/auth/register?phone_number=${phone_number}&password=${password}&email=${email}&nickname=${nickname}`, {
            method: 'POST',
            headers: {
                'accept': 'application/json',
                'content-type': 'application/x-www-form-urlencoded'
            }
        });
    })
    .then(response => response ? response.json() : null)
    .then(data => {
        console.log(data)
        if (data && data.success === true) {
            customAlert("На почту отправлено письмо с подтверждением электронной почты")
        } else {
            customAlert(`Ошибка регистрации. ${data.error}`);
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
        customAlert(`Произошла ошибка. Попробуйте позже`);
    });
});
function togglePasswordVisibility(inputId, toggleButton) {
    const inputField = document.getElementById(inputId);
    const isPasswordVisible = inputField.type === 'text';
    
    // Переключаем тип поля
    inputField.type = isPasswordVisible ? 'password' : 'text';
    
    // Меняем иконку при необходимости
    toggleButton.querySelector('svg').style.fill = isPasswordVisible ? '#555' : '#ffbb63';
}

//customAlert("Мы используем файлы Куки для авторизации, продолжая пользоваться сервисом, вы даете свое согласиие на их обработку")
================================================================================
Файл: admin_panel\static\js\SidebarLoad.js
================================================================================

// Функция для подгрузки Sidebar
function loadSidebar() {
    fetch('sidebar.html')
        .then(response => response.text())
        .then(data => {
            document.getElementsByClassName('Sidebar')[0].innerHTML = data;
            get_data(); // Вызов функции для загрузки данных пользователя
        })
        .catch(error => console.error('Ошибка загрузки Sidebar:', error));
}

// Выполняем загрузку Sidebar после загрузки DOM
document.addEventListener('DOMContentLoaded', loadSidebar);

fetch('/auth/get_data')
    .then(response => response.json())
    .then(data => {
        const nicknameElement = document.getElementById('nickname');
        nicknameElement.textContent = data['nickname'] || 'Войти';

        if (nicknameElement.textContent === 'Войти') {
            nicknameElement.onclick = function() {
                window.open('/login', "_blank");
                nicknameElement.style.textDecoration = 'underline';
            };
        } else {
            // Добавляем класс для стилизации вошедшего пользователя
            nicknameElement.classList.add("nickname-logged");
        }
    })
    .catch(error => console.error("Ошибка:", error));
  
 

  function handleLogout() {
    fetch('/auth/logout', {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded'
        },
        body: ''
    })
    .then(response => {
        if (response.ok) {
            window.open('/login', '_self'); // Открыть страницу входа
        } else {
            console.error("Ошибка при выходе.");
            alert("Не удалось выйти. Попробуйте еще раз.");
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
        alert("Произошла ошибка при выходе. Попробуйте позже.");
    });
  }
  
  
================================================================================
Файл: admin_panel\templates\about.html
================================================================================
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon.ico">
    <script src="static/js/custom_alert.js"></script>
    <title>О компании Монеты.ру</title>
  
</head>

<body>
    <div class="dashboard-container">
        <nav class="sidebar colapsed" id="sidebar"></nav>
        <div class="Sidebar"></div>

        <div class="Holder">
            <div className='About'>
                <section id="about">
                    <h2>О нашей компании</h2>
                    <p>Компания Монеты.ру была основана в 2022 году группой специалистов, профессионально работающих на рынке
                        банковской деятельности, инвестиций в драгметаллы. Мы специализируемся на продаже российских инвестиционных
                        монет из золота и серебра, а также слитков драгоценных металлов.</p>
                    <p>Компания имеет все необходимые лицензии для осуществления деятельности по покупке и продаже инвестиционных
                        монет, а также регистрацию в пробирной палате г. Москвы. Мы гарантируем конфиденциальность проводимых сделок,
                        так как безопасность и комфорт наших клиентов является приоритетом нашей Компании.</p>
                    <p>Качество и подлинность предлагаемых нашим клиентам монет гарантируется подтверждающими банковскими документами
                        и прямыми поставками из банков-партнёров. Качество и подлинности слитков гарантируется подтверждающими
                        сертификатами и информацией в ГИИС ДМДК Федеральной пробирной палаты.</p>
                </section>
            
                <section id="auction-rules">
                    <h2>Правила аукциона</h2>
                    <p>Аукцион проходит следующим образом: вы можете следить за новостями в нашем телеграм-канале, на Авито или на самом сайте в разделе "Предстоящие аукционы". Выберите аукцион, который вас интересует, и зарегистрируйтесь на него. После этого вы сможете предлагать свои ставки за лоты.</p>
                    <p><strong>ВАЖНО:</strong> Если аукцион начинается, например, в 15:00 и заканчивается в 18:00, а кто-то делает ставку в 17:59, то аукцион автоматически продлевается на 5 минут, чтобы другие участники могли предложить свои ставки. После победы в аукционе с победителем свяжется менеджер для составления договора, оплаты и передачи лота.</p>
                </section>
            
                <section id="guarantees">
                    <h2>Гарантии</h2>
                    <p>Магазин Монеты.ру гарантирует 100% подлинность всех продаваемых монет. Мы осуществляем покупку монет напрямую у
                        Банков-партнёров. Доступна услуга проверки подлинности монет в кассе Банка-партнёра за дополнительную плату.
                        Стоимость зависит от металла монеты и количества проверяемых монет.</p>
                    <p>Деятельность организации удостоверяется:</p>
                    <ul>
                        <li> Свидетельством о государственной<a href="https://www.rusprofile.ru/id/1225000007220"target="_blank"> регистрации № 1225000007220  </a></li>
                        <li>Номер в реестре специального учета юридических лиц и индивидуальных предпринимателей, осуществляющих операции с драгоценными металлами и драгоценными камнями <a href="https://probpalata.gov.ru/deyatelnost/specuchyot/" target="_blank">№ ЮЛ 5001001086</a>, присвоенный Министерством Финансов Российской Федерации 21 февраля 2022 г.</li>
            
                        <li>Организация зарегистрирована, состоит на специальном учёте в ГИИС ДМДК, проверить организацию Вы можете на
                            сайте <a href="https://probpalata.gov.ru/deyatelnost/specuchyot/" target="_blank">Федеральной пробирной палаты.</a></li>
                    </ul>
                
                </section>
            
                <section id="details">
                    <h2>Реквизиты компании</h2>
                    <ul>
                        <li><strong>Полное наименование организации:</strong> Общество с ограниченной ответственностью "Монеты.ру"</li>
                        <li><strong>Юридический адрес:</strong> 142116, Московская область, г.о. Подольск, г Подольск, пр-кт Революционный, д. 15, помещ. 4, ком. 1</li>
                        <li><strong>Почтовый адрес:</strong> 142116, Московская область, г.о. Подольск, г Подольск, пр-кт Революционный, д. 15, помещ. 4, ком. 1</li>
                        <li><strong>ИНН:</strong> 5074073274</li>
                        <li><strong>КПП:</strong> 507401001</li>
                        <li><strong>ОКВЭД (основной):</strong> 64.99.1</li>
                        <li><strong>ОГРН:</strong> 1225000007220</li>
                        <li><strong>"АЛЬФА-БАНК" Номер счета:</strong> 40701810102090000011</li>
                        <li><strong>БИК:</strong> 044525593</li>
                        <li><strong>К/С:</strong> 30101810200000000593 в ГУ БАНКА РОССИИ ПО ЦФО</li>
                        <li><strong>Генеральный директор:</strong> Маликова Ольга Викторовна</li>
                        <li><strong>Электронная почта:</strong> <a href="mailto:info@monety.shop">info@monety.shop</a></li>
                        <li><strong>Телефон:</strong> +7(903)598-92-14</li>
                        <li><strong>Сайт:</strong> <a href="https://monety.shop" target="_blank">https://monety.shop</a></li>
                    </ul>
                </section>
            </div>
        </div>    
    </div>
    
    <script src="static/js/SidebarLoad.js"></script>
</body>

</html>

================================================================================
Файл: admin_panel\templates\account.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Личный кабинет</title>
    <link rel="stylesheet" href="static/css/Acount.css">
    <link rel="stylesheet" href="static/css/styles.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    
</head>
<body>
    <div class="Sidebar">

    </div>
    <main class="Holder">
        <div class ="account-details-container">
            <section class="account-details">
                <h2>Ваш Личный кабинет</h2>
                <form id="accountForm">
                    <div class="form-group">
                        <label for="phone-number">Номер телефона для связи</label>
                        <input type="text" id="phone-number" name="phone_number" value="+7 (900) 123-45-67">
                    </div>
    
                    <div class="form-group">
                        <label for="avito-url">URL Авито:</label>
                        <input type="url" id="avito-url" name="avito_url" value="https://www.avito.ru/example">
                    </div>
    
                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="bid-notification" name="mail_receive_bet_beated" checked>
                            Получать уведомления о перебитой ставке
                        </label>
                    </div>
    
                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="auction-start-notification" name="mail_receive_auction_started">
                            Получать уведомления о старте аукциона
                        </label>
                    </div>
    
                    <button type="submit" class="submit-button">Сохранить изменения</button>
                </form>
            </section>
    
            <section class="password-change">
                <h2>Изменение пароля</h2>
                <form id="passwordForm">
                    <div class="form-group">
                        <label for="current-password">Текущий пароль:</label>
                        <input type="password" id="current-password" name="currentPassword">
                    </div>
    
                    <div class="form-group">
                        <label for="new-password">Новый пароль:</label>
                        <input type="password" id="new-password" name="newPassword">
                    </div>
    
                    <div class="form-group">
                        <label for="confirm-password">Повторите новый пароль:</label>
                        <input type="password" id="confirm-password" name="confirmPassword">
                    </div>
    
                    <button type="submit" class="submit-button">Изменить пароль</button>
                </form>
            </section>
        </div>
        
    </main>

    <script src = "static/js/SidebarLoad.js"></script>
    <script src = "static/js/account.js"></script>
    <script src = "static/js/custom_alert.js"></script>
</body>
</html>

================================================================================
Файл: admin_panel\templates\admin.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/fonts.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon_admin.ico">
    <script src="static/js/custom_alert.js"></script>
    <link rel="stylesheet" href="static/css/admin.css">

</head>
<body>
    <div class="Sidebar"></div>
    <div class="Holder">
<!-- Навигация для переключения между таблицами -->
<nav class="navbar">
    <button onclick="showAuctionsTable()">Все лоты</button>
    <button onclick="showUsersTable()">Пользователи</button>
    <button onclick="showActiveClientsTable()">Топ активности</button>
    <a href="/create_auction"><button>Добавить лот</button></a>
</nav>

<div class="dashboard-container">
   
    <div id="auctionSearchContainer" class="search-container" style="display: none;">
        <input type="text" id="auctionSearchInput" placeholder="Поиск по названию" oninput="filterAuctions()">
    </div>
    
    <!-- Search for users -->
    <div id="userSearchContainer" class="search-container" style="display: none;">
        <input type="text" id="userSearchInput" placeholder="Поиск по имени, почте или номеру" oninput="filterUsers()">
    </div>
    <div id="activeuserSearchContainer" class="search-container" style="display: none;">
        <input type="text" id="activeuserSearchInput" placeholder="Поиск по имени" oninput="filterActiveUsers()">
    </div>
    <!-- Основной контент -->
    <div class="dashboard-content" id="dashboard-content">
        <!-- Таблица аукционов -->
        <table id="auctionsTable" class="data-table" style="display:none;">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Название</th>
                    <th>Изменить</th>
                    <th>Удалить</th>
                </tr>
            </thead>
            <tbody id="auctionsTableBody">
                <!-- Данные заполняются JavaScript'ом -->
            </tbody>
        </table>

        <!-- Таблица пользователей -->
        <table id="usersTable" class="data-table" style="display:none;">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Имя</th>
                    <th>Почта</th>
                    <th>Номер</th>
                    <th>Ред.</th>
                    <th>Доступ</th>
                </tr>
            </thead>
            <tbody id="usersTableBody">
                <!-- Данные заполняются JavaScript'ом -->
            </tbody>
        </table>

        <!-- Модальное окно для редактирования аукциона -->
        <div id="editAuctionModal" class="modal" style="display: none;">
            <div class="modal-content">
                <span class="close" onclick="closeEditAuctionModal()">&times;</span>
                
                <form id="editAuctionForm" >
                    <div id="auctionFieldsContainer">
                        <!-- Здесь будут добавляться динамические поля -->
                    </div>
                    <button type="button" onclick="saveAuctionChanges()">Save Changes</button>
                </form>
            </div>
        </div>
        <!-- Модальное окно для редактирования пользователя -->
        <div id="editClientModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeEditClientModal()">&times;</span>
                
                <form id="editClientForm">
                    <div id="clientFieldsContainer">
                        <!-- Поля редактирования будут добавлены динамически здесь -->
                    </div>
                    <button type="button" onclick="saveClientChanges()">Save Changes</button>
                </form>
            </div>
        </div>
        <!-- Таблица активных пользователей -->
        <table id="activeClientsTable" style="display: none;">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Имя</th>
                    <th>Почта</th>
                    <th>Тел.</th>
                    <th>Кол-во ставок</th>
                </tr>
            </thead>
            <tbody id="activeClientsTableBody">
                <!-- Строки будут добавлены динамически -->
            </tbody>
        </table>


    </div>
</div>

    </div>
    

    <script src="static/js/admin.js"></script>
    <script src="static/js/SidebarLoad.js"></script>
</body>
</html>

================================================================================
Файл: admin_panel\templates\alt_auction.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="{{ meta_info['description'] }}">
    <meta property="og:title" content="{{ meta_info['title'] }}">
    <meta property="og:description" content="{{ meta_info['description'] }}">
    <meta property="og:url" content="{{ meta_info['url'] }}">
    <meta property="og:type" content="website">
    <meta property="og:startDate" content="{{ meta_info['structured_data']['startDate'] }}">
    <meta property="og:endDate" content="{{ meta_info['structured_data']['endDate'] }}">
    <meta property="og:price" content="{{ meta_info['structured_data']['price'] }}">
    <title>{{ meta_info['title'] }}</title>
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/alt_auction.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon.ico">
    <script src="static/js/custom_alert.js"></script>
    
</head>
<body>
    <div class="Sidebar"></div>
    <div class="Holder">
        <div class="dashboard-content">
            <header class="auction-header">
                <img src="static/images/back.svg" width="40px" style="margin-left: 10px;" alt="" onclick="window.open('/', '_self')">
                <div class="auction-info">
                    <p class="auction-dates">
                        С <span id="auction-datetime"></span> по <span id="auction-datetime-end"></span>
                    </p>
                </div>
            </header>


            <main class="auction-main-content">
                <section class="coin-photo">
                    
                        <div id="carousel-container" class="carousel"></div>
                 
                </section>
                

                <section class="coin-info">
                    
                    
                    <div class="auction-info">
                        
                        <div class="status"> 
                            <h2><span id="coin-name"></span></h2>
                            <button class="status-button" id="status-button">...</button>
                        </div>
                        
                    </div>

                    <div class="coin-details">
                        
                        <div><strong>Описание:</strong> <span id="description"></span></div>
                        <p><a href="#" id="coin-url"></a></p>
                    </div>

                    <div class="coin-prices">
                        <p><strong>Начальная цена лота:</strong> <span id="starting-price"></span></p>
                        <p><strong>Минимальный шаг ставки:</strong> <span id="min-bid-step"></span></p>
                    </div>
                </section>
            </main>

            <section class="auction-history-section">
                <div class="history">
                    <table id="bid-table">
                        <thead>
                            <tr><th>Имя</th><th>Ставка</th><th id="time">Время</th></tr>
                        </thead>
                        <tbody>
                            <!-- Ставки будут добавляться здесь -->
                        </tbody>
                    </table>
                </div>

                <div class="bid-section">
                    <input type="number" class="bid-input" placeholder="Введите вашу ставку" min="1">
                    <button class="bid-button" id="place-bid">Сделать ставку</button>
                </div>
            </section>
        </div>
    </div>
    <script src="static/js/auction.js"></script>
    <script src="static/js/SidebarLoad.js"></script>

</body>
</html>

================================================================================
Файл: admin_panel\templates\create_auction.html
================================================================================
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="static/css/create_auction.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/themes/dark.css"> <!-- Подключение темной темы -->
    <link rel="icon" href="static/images/favicon_admin.ico">
    <script src="static/js/custom_alert.js"></script>
    <title>Создание Аукциона</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/themes/dark.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

</head>

<body id="body" >
    <div class="dashboard-container">
        <!-- Боковое меню -->
       <div class= "Sidebar"></div>
        <div class="Holder">

            <div class="dashboard-content">
                <header class="dashboard-header">
                </header>
    
                <main class="create-auction-container">
                    <form id="createAuctionForm">
                        <div class="form-group">
                            <label for="auction-name">Название аукциона:</label>
                            <input type="text" id="short_name" name="auctionName" placeholder="Монета Олимпиадная" required>
                        </div>
                        <div class="form-group">
                            <label for="start_datetime">Время начала:</label>
                            <input type="text" id="start_datetime" name="auctionTime" placeholder="дд.мм.гггг чч:мм 28.11.2024 19:30" required>
                        </div>
                        <div class="form-group">
                            <label for="end_datetime">Время окончания:</label>
                            <input type="text" id="end_datetime" name="auctionTime" placeholder="дд.мм.гггг чч:мм 28.12.2024 6:30" required>
                        </div>
                        <div class="form-group">
                            <label for="start_price">Начальная цена:</label>
                            <input type="number" id="start_price" name="startingPrice" placeholder="13500" required>
                        </div>
                        <div class="form-group">
                            <label for="min_bid_step">Минимальный шаг ставки:</label>
                            <input type="number" id="min_bid_step" name="minBidStep" placeholder="500" required>
                        </div>
                        <div class="form-group">
                            <label for="description">Описание</label>
                            <input type="text" id="description" name="description" placeholder="Монета из золота" required>
                        </div>
                        <div class="form-group">
                            <label for="bank">Ссылка на <a href="https://www.cbr.ru/cash_circulation/memorable_coins/coins_base/">Банк России</a>. Если нет - отсавьте поле пустым</label>
                            <input type="text" id="bank" name="bank" placeholder="https://www.cbr.ru/cash_circulation/memorable_coins/coins_base/ShowCoins/?cat_num=5111-0178-24">
                        </div>
                        <div class="form-group">
                            <label for="coin-photo">Обложка для лота PNG/JPG (Обязательно): </label>
                            <input type="file" id="coin-photo" name="coinPhoto" accept="image/*" required>
                            <img id="preview-image" src="#" alt="Превью фото" style="display:none; margin-top:10px; max-width:200px;">
                        </div>
                        
                        <!-- Кнопка для добавления дополнительных фотографий -->
                        
    
                        <!-- Скрытые дополнительные фото -->
                        <div id="album-container" class="form-group" style="display:block;">
                            <label for="album">Дополнительные фотографии (Опционально):</label>
                            <label for="album">Будут учитываться только заполненные ячейки</label>
                            <div id="album">
                                <!-- Новые фотографии будут добавляться сюда -->
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="button" id="add-photo-button" class="add-photo-button" onclick="addAlbumPhotoInput()">Добавить еще поле ввода для фотографии</button>
                        </div>        
                        <button type="submit" class="create-button">Создать аукцион</button>
                    </form>
                </main>
            </div>
        </div>

        
    </div>

    <script src="static/js/create_auction.js"></script>
    <script src="static/js/SidebarLoad.js"></script>
   
</body>

</html>
================================================================================
Файл: admin_panel\templates\enter_reg_page.html
================================================================================
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="static/css/enter_reg_page.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon.ico">
    
    <script src="static/js/custom_alert.js"></script>
    <title>Главная - Регистрация и Вход</title>
</head>

<body>
    <div class="container">
        
        <!-- Левая часть с информацией -->
        <div class="info-section">
            <div class="info-content">
                <img src="static/images/login_cat.png" alt="" class="illustration slide-in">
                <h2>Получайте монеты</h2>
                <p>Присоединяйтесь к системе онлайн торгов.</p>
            </div>
        </div>

        <!-- Правая часть с регистрацией/входом -->
        <div class="form-section bounce-in">
            <div class="form-container">
                <div class="tabs">
                    <button class="tab-button active" onclick="openTab(event, 'login')">Вход</button>
                    <button class="tab-button" onclick="openTab(event, 'register')">Регистрация</button>
                </div>
                <div id="login" class="tab-content active">
                    <form id="loginForm">
                        
                       
                        <div class="form-group">
                            <label for="login-mail">e-mail (обязательно):</label>
                            <input type="text" id="login-mail" name="mail" required>
                        </div>
                        <div class="form-group">
                            <label for="login-password">Пароль:</label>
                            <div class="password-wrapper">
                                <input type="password" id="login-password" name="password" required>
                                <button type="button" onclick="togglePasswordVisibility('login-password', this)" class="password-toggle">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 5C7.58 5 3.75 7.61 2 12c1.75 4.39 5.58 7 10 7s8.25-2.61 10-7c-1.75-4.39-5.58-7-10-7zm0 12c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" fill="#555"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <p class="CookiesNotif">Мы используем <strong>файлы Cookie</strong> для авторизации!
                            Входя, Вы даете согласие на использование <strong>Cookie</strong>.</p>
                        <button type="submit" class="submit-button">Войти</button>
                    </form>
                </div>
                <div id="register" class="tab-content">
                    <form id="registerForm">
                        <div class="form-group">
                            <label for="register-phone">Телефон (обязательно):</label>
                            <input type="phone" id="register-phone"  placeholder="+7 (___) ___-__-__" maxlength="18" name="phone" required>
                        </div>
                        <div class="form-group">
                            <label for="register-phone">e-mail (обязательно):</label>
                            <input type="text" id="register-email" name="email" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="register-nickname">Псевдоним (обязательно):</label>
                            <input type="text" id="register-nickname" name="nickname" required>
                        </div>
                    
                        <div class="form-group">
                            <label for="register-password">Пароль:</label>
                            <div class="password-wrapper">
                                <input type="password" id="register-password" name="password" required>
                                <button type="button" onclick="togglePasswordVisibility('register-password', this)" class="password-toggle">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 5C7.58 5 3.75 7.61 2 12c1.75 4.39 5.58 7 10 7s8.25-2.61 10-7c-1.75-4.39-5.58-7-10-7zm0 12c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" fill="#555"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="confirm-password">Подтверждение пароля:</label>
                            <div class="password-wrapper">
                                <input type="password" id="confirm-password" name="confirm_password" required>
                                <button type="button" onclick="togglePasswordVisibility('confirm-password', this)" class="password-toggle">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="#555" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 5C7.58 5 3.75 7.61 2 12c1.75 4.39 5.58 7 10 7s8.25-2.61 10-7c-1.75-4.39-5.58-7-10-7zm0 12c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" fill="#555"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <button type="submit" class="submit-button">Зарегистрироваться</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script src="static/js/scripts.js"></script>
  
</body>

</html>

================================================================================
Файл: admin_panel\templates\index.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Title and description for SEO -->
    <title>Аукционы монет - Онлайн платформа</title>
    <meta name="description" content="Узнайте всё о текущих, предстоящих и завершённых аукционах монет. Участвуйте, делайте ставки и побеждайте!">

    <!-- Keywords for search engines -->
    <meta name="keywords" content="аукционы, монеты, онлайн торги, коллекционные монеты, купить монеты, ставки, нумизмат">

    <!-- Author information -->
    <meta name="author" content="Монеты.ру">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/AuctionCard.css">
    <link rel="stylesheet" href="static/css/Auctions.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="icon" href="static/images/favicon.ico">
    <meta name="google-site-verification" content="HAlZ4y-L6wbpXewL4wf2JtmcPVaojQ5XEAfMJwcj-cg" />
    <script src="static/js/custom_alert.js"></script>
</head>
<body>
    
    <div class = "Sidebar">

    </div>

    <div class="Holder">
        <div id="loadingScreen" class="loading-screen">
            <div class="spinner"> </div> 
            <p>Загрузка...</p>
        </div>
        <div class="dashboard-content">
            <h2 id="active-header" style="display: none;">Активные аукционы</h2>
            <div id="activeAuctions" class="auction-grid"></div> <!-- Контейнер для активных аукционов -->

            <h2 id="upcoming-header" style="display: none;">Предстоящие аукционы</h2>
            <div id="upcomingAuctions" class="auction-grid"></div> <!-- Контейнер для предстоящих аукционов -->

            <h2 id="finished-header" style="display: none;">Завершенные аукционы</h2>
            <div id="completedAuctions" class="auction-grid"></div> <!-- Контейнер для завершенных аукционов -->
        </div>
    </div>


    <script src="static/js/index.js"></script>
    <script src="static/js/SidebarLoad.js"></script>
</body>

</html>

================================================================================
Файл: admin_panel\templates\sidebar.html
================================================================================
<link rel="stylesheet" href="static/css/Sidebar.css">
<link rel="stylesheet" href="static/css/custom_alert.css">


<div class="Sidebar">
    <div class="Header">
        <img src="static/images/logo.png" alt="Логотип">
        <span>Monety.ru</span>
    </div>

    <ul class="NavigationList">
        <li>
            <a href="/">
                <img src="static/images/hammer.svg" alt=" ">
                <span>Все лоты</span>
            </a>
        </li>
        <li>
            <a href="/account">
                <img src="static/images/user.svg" alt=" ">
                <span>Личный кабинет</span>
            </a>
        </li>
        <li>
            <a href="/about">
                <img src="static/images/about.svg" alt=" ">
                <span>О нас</span>
            </a>
        </li>
        <li>
            <a href="https://t.me/monety_shop">
                <img src="static/images/telegram.svg" alt=" ">
                <span>Анонсы в ТГ</span>
            </a>
        </li>
  
    </ul>

    <div class="UserBulb" onclick="handleLogout()">
        <div class="button">
            <img src="static/images/logout.svg" alt="Пользователь">
            <span class="Username" id="nickname">Войти</span>
        </div>
    </div>
</div>

================================================================================
Файл: app\config.py
================================================================================
import configparser
import os

def get_bool(str):
    return True if str.lower() == 'true' else False

class Config:
    def __init__(self, file_name):
        self.file_name = file_name

        #
        self.options = {
            "FastAPI": {
                "host": "127.0.0.1",
                "port": 80,
                "reload": False,
                "ssl_certfile": "path/cert.pem",  # Add path to SSL certificate
                "ssl_keyfile": "path/key.pem"
            },
            "MongoDB":{
                "url": "container"
            }
            ,
            "Smtp":{
                "login":"fet",
                "password":"aboba",
                "start_url":"http://127.0.0.1"
            }
        }

        self.read()

    # преобразование строки в нужный формат данных
    def set_settings(self, section, parameter, state):
        if (type(self.options[section][parameter]) == str):
            self.options[section][parameter] = state

        elif (type(self.options[section][parameter]) == bool):
            self.options[section][parameter] = get_bool(state)

        elif (type(self.options[section][parameter]) == int):
            self.options[section][parameter] = int(state)

        elif (type(self.options[section][parameter]) == float):
            self.options[section][parameter] = float(state)

    # запись настроек в файл
    def save(self):
        config = configparser.ConfigParser()

        for section in self.options:
            config.add_section(section)

            for parameter in self.options[section]:
                config.set(section, str(parameter), str(self.options[section][parameter]))

        with open(self.file_name, "w") as config_file:
            config.write(config_file)

    # чтение настроек в файл
    def read(self):
        if not os.path.exists(self.file_name):
            #
            self.save()
            self.read()

        else:
            config = configparser.ConfigParser()
            config.read(self.file_name)

            error_bool = False

            #
            for section in self.options:
                for parameter in self.options[section]:
                    try:
                        parameter_buf = config.get(section, parameter)
                        self.set_settings(section, parameter, parameter_buf)

                    except:
                        error_bool = True

            #
            if error_bool:
                self.save()

    #
    def get(self, section):
        return self.options[section]

    #
    def get_all(self):
        return self.options

    #
    def change_setion(self, section, parameter, value):
        config.set(section, str(parameter), str(value))
        config.save()



config = Config("config.ini")

================================================================================
Файл: app\deco.py
================================================================================
from functools import wraps
import os
import sys
from globals import *

def try_decorator(func):
    @wraps(func)
    async def inner_function(*args, **kwargs):
        try:
            return await func(*args, **kwargs)

        except Exception as e:
            function_name = func.__name__
           
            return {
                "error": {
                    "body": str(e),
                    "function": function_name
                },
                "success": False
            }
    return inner_function

================================================================================
Файл: app\globals.py
================================================================================
from config import config
#все глобальные переменные

from fastapi.templating import Jinja2Templates
templates = Jinja2Templates(directory="app/templates")


###################################################################
#MongoDB
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.server_api import ServerApi
import asyncio
from initialization_database import setup_collections


db_client = AsyncIOMotorClient(config.get('MongoDB')["url"], server_api=ServerApi('1'))
tm_db = db_client['Torgi_Monet']  # Создаем или подключаемся к базе данных 'Monetochki'

async def ping_server():
  try:
      await db_client.admin.command('ping')
      print("Pinged your deployment. You successfully connected to MongoDB!")
      await setup_collections(tm_db)
  except Exception as e:
      print(e)

#asyncio.run(ping_server())

########################################################################

smtp_username = config.get('Smtp')["login"]
smtp_password = config.get('Smtp')["password"]
smtp_link = config.get('Smtp')["start_url"]

########################################################################
from fastapi_login import LoginManager

SECRET_KEY = "SECRET_KEY"

manager = LoginManager(
    SECRET_KEY,
    token_url='/auth/token',
    use_cookie=True,
    use_header=False
)


async def get_user(mail: str):
    try:
        collection = tm_db['clients']
        
        # Находим пользователя по email
        client = await collection.find_one({"email": mail}, {"_id": 0})
        
        # Проверяем, найден ли пользователь и не заблокирован ли он
        if client is None:
            return None
        
        if client.get("status") == "banned":
            return None
    
        return client  # Возвращаем данные пользователя, если он не заблокирован
        
    except Exception as e:
        print(e)
        return {"error": str(e)}

        
    except Exception as e:
        print(e)
        return {"error": str(e)}

@manager.user_loader()
def load_user(mail: str):
    user = get_user(mail.lower())
   
    return user

================================================================================
Файл: app\initialization_database.py
================================================================================
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.server_api import ServerApi
from config import config


# Асинхронная функция для проверки и создания коллекций с определенной схемой
async def setup_collections(db: AsyncIOMotorClient):
    
    collections = await db.list_collection_names()
    if 'clients' not in collections:
        await db.create_collection('clients')
        print("Created clients collection")


    if 'auctions' not in collections:
        await db.create_collection('auctions')
        print("Created auctions collection")
    
    if 'tokens' not in collections:
        await db.create_collection('tokens')
        print("Created tokens collection")
        
        
    if 'admins' not in collections:
        await db.create_collection('admins')
        insertion = {
                    "email":'kostyakov0203@mail.ru'
                }
        db['admins'].insert_one(insertion)
                

    if 'id_counters' not in collections:
        await db.create_collection('id_counters')
        print("Created id_counters collection")
    
        insertion = {
            "a_id":0,
            "clients_id":1
        }
        db['id_counters'].insert_one(insertion)
        print("inserted init values for id_counter")

    return


================================================================================
Файл: app\main.py
================================================================================
from typing import Union

from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import asyncio
from routers import *
from smtp.router import smtp_router
from routers.auctionCRUD.updater import update_all
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.middleware import SlowAPIMiddleware
from slowapi.errors import RateLimitExceeded

limiter = Limiter(key_func=get_remote_address, default_limits=["100/minute"])
app = FastAPI(docs_url="/docs", redoc_url="/redoc")
#app = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)

app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
app.add_middleware(SlowAPIMiddleware)


app.mount(
    "/static",
    StaticFiles(directory='app/static'),
    name="static",
)

app.include_router(render_router)
app.include_router(auction_router)
app.include_router(clients_router)
app.include_router(auth_router)
app.include_router(smtp_router)
app.include_router(ceo_router)

# Фоновая задача для обновления аукционов каждые 10 секунд
async def auto_update_task():
    while True:
        await update_all()  # Выполнение функции обновления
        await asyncio.sleep(10)  # Ждем 10 секунд

@app.on_event("startup")
async def start_auto_update():
    """
    Запускаем задачу автообновления при старте приложения.
    """
    # Запускаем фоновую задачу при старте приложения
    asyncio.create_task(auto_update_task())  # Создаем зада
================================================================================
Файл: app\utils.py
================================================================================
from datetime import datetime


def date_form(input_date: str):
    # Ожидаем формат "дд.мм.гггг чч:мм"
    try:
        # Разбиваем дату и время
        date_part, time_part = input_date.split()
        
        # Разделяем дату и время на составляющие
        day, month, year = map(int, date_part.split('.'))
        hour, minute = map(int, time_part.split(':'))
        
        # Создаем объект datetime
        date_object = datetime(year, month, day, hour, minute)
        
        # Преобразуем в ISO формат с временной зоной +03:00
        output_date = date_object.isoformat() + "+03:00"
        
        return output_date
    except Exception as e:
        print(f"Error: {e}")
        

import pytz

# Функция для обработки формата DD.MM.YYYY HH:MM
def admin_date_form(date_string, timezone="Europe/Moscow"):
    naive_datetime = datetime.strptime(date_string, "%d.%m.%Y %H:%M")
    tz = pytz.timezone(timezone)
    localized_datetime = tz.localize(naive_datetime)  # Локализуем с указанным часовым поясом
    return localized_datetime.isoformat()  # Преобразуем в ISO строку




if __name__ == "__main__":
    print(date_form('12.12.2000 9:30'))
================================================================================
Файл: app\__init__.py
================================================================================
from config import *
from globals import *
from utils import *
================================================================================
Файл: app\__main__.py
================================================================================
import uvicorn
from config import config
import main

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=config.get("FastAPI")['host'],
        port=config.get("FastAPI")['port'],
        reload=config.get("FastAPI")['reload'],
        #ssl_certfile=config.get("FastAPI").get("ssl_certfile"),
        #ssl_keyfile=config.get("FastAPI").get("ssl_keyfile"),
    )

================================================================================
Файл: app\routers\__init__.py
================================================================================
#тут мы импортируем все роутеры уровня ниже, чтобы
#потом не надо было добавлять много импортов в мейн
from .html_render.router import render_router
from .auctionCRUD.router import auction_router
from .clientsCRUD.router import clients_router
from .auth.router import auth_router
from .CEO.router import ceo_router
================================================================================
Файл: app\routers\auctionCRUD\add.py
================================================================================
from globals import tm_db   
from datetime import datetime, timezone
import asyncio
from utils import date_form
from .autoset_active_status import autoset_active_status
from .get import get
from ..idCRUD import get_a_id
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin
from PIL import Image
import base64
from io import BytesIO

async def add( json: dict, user = Depends(manager)):
    try:
        #print(json)
        user_buf = dict(await user)
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы. "}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы. "}
            
        
        
        a_id =await get_a_id()
        insertion = {
            "a_id": a_id,
            "short_name": json["short_name"].strip(), 
            "start_datetime": date_form(json["start_datetime"]), 
            "end_datetime": date_form(json["end_datetime"]), 
            "start_price": json["start_price"], 
            "min_bid_step": json["min_bid_step"],
            "description": json["description"],
            "bank": json["bank"],
            "bets": [],
            "created_at": datetime.now(timezone.utc),  
            "is_active": False
            
        }
        if insertion['start_datetime']==None: return {"status": "error",
            "message": f"Неправильно распознана дата начала"}
        if insertion['end_datetime']==None: return {"status": "error",
            "message": f"Неправильно распознана дата конца"}
            
        if "photo" in json:
            b64_string = json["photo"]
            
            # Декодируем Base64 в байты.
            image_data = base64.b64decode(b64_string)
            image = Image.open(BytesIO(image_data))

            # Определяем целевую высоту.
            target_height = 500

            # Рассчитываем новую ширину с сохранением пропорций.
            aspect_ratio = image.width / image.height
            target_width = int(target_height * aspect_ratio)

            # Изменяем размер изображения.
            resized_image = image.resize((target_width, target_height), Image.Resampling.LANCZOS)

            # Сохраняем обработанное изображение в строку Base64 (или в файл).
            output_buffer = BytesIO()
            resized_image.save(output_buffer, format=image.format)
            resized_b64 = base64.b64encode(output_buffer.getvalue()).decode('utf-8')

            # Обновляем запись.
            insertion["photo"] = resized_b64
        if "album" in json:
            insertion["album"]=json["album"]
            
        
        collection = tm_db['auctions']

        await collection.insert_one(insertion, bypass_document_validation=True)
        status_message = await autoset_active_status(a_id)

        return {
            "status": "success",
            "message": f"Аукцион с ID {a_id} успешно добавлен.",
            "autoset_status": status_message,
            "a_id":a_id
        }


    except Exception as e:
        print(f"Ошибка при добавлении аукциона: {e}")
        return {
            "status": "error",
            "message": str(e)
        }

================================================================================
Файл: app\routers\auctionCRUD\add_bet_to_auction.py
================================================================================
from globals import tm_db   
from datetime import datetime, timedelta, timezone
from .get import get  
from .get_highest_bet import get_highest_bet
from .autoset_active_status import autoset_active_status  
from fastapi import Depends, Response
from smtp.mail_templates import target_bet_beated
from deco import try_decorator
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from globals import manager
from ..clientsCRUD import is_admin
from ..clientsCRUD.embeded_get_client import get as c_get

@try_decorator
async def add_bet_to_auction(a_id: str, bet_cost: int, user = Depends(manager)):
    try:
        user_buf = dict(await user)
        if not user_buf['phone_number']:   
            return {"success": False,"error": "Вы не авторизованы."}

        
        a_id = int(a_id)
        clients_id = int(user_buf['id'])
        await autoset_active_status(a_id)
        collection = tm_db['auctions']
        # Проверка существования аукциона
        auction = await collection.find_one({'a_id': a_id})
        if not auction:
            return {
                "status": "error",
                "message": "Аукцион не найден."
            }

        # Проверка активности аукциона
        if auction["is_active"] in [0, False]:
            return {
                "status": "error",
                "message": "Аукцион неактивен."
            }
       
        # Проверка существования клиента
        user = await c_get(clients_id) 
        if user == None:
            return {
                "status": "error",
                "message": "Клиент не найден."
            }

        if bet_cost<int(auction['start_price']):
            return {
                "status": "error",
                "message": f"Ставка должна быть больше, чем {str(auction['start_price'])}. Пожалуйста, сделайте новую ставку."
                
            }
      
        # Проверка на ставку больше последней
        last_bet = auction['bets'][-1] if auction['bets'] else None
        if last_bet and bet_cost < int(last_bet['bet_cost'])+int(auction["min_bid_step"]):
            return {
                "status": "error",
                "message": f"Ставка должна быть больше последней ставки {last_bet['bet_cost']} не менее чем на {str(auction['min_bid_step'])}. Пожалуйста, сделайте новую ставку."
                
            }
            
        if last_bet and bet_cost > (int(last_bet['bet_cost'])+int(auction["min_bid_step"]))*1.3:
            return {
                "status": "error",
                "message": f"Ставка должна быть не больше {(int(last_bet['bet_cost'])+int(auction["min_bid_step"]))*1.3}. Пожалуйста, сделайте новую ставку."
                
            }
            
        highest_bet = await get_highest_bet(a_id)
        # Добавление новой ставки
        bet_info = {
            "bet_cost": bet_cost,
            "clients_id": clients_id,
            "nickname": user['nickname'],
            "created_at": datetime.now(timezone.utc)
        }
        
        # Преобразуем строку даты с временной зоной в объект datetime
        end_datetime = datetime.fromisoformat(auction["end_datetime"])
        # Создаём offset-aware datetime для overtime_trigger
        overtime_trigger = datetime.now(timezone.utc) + timedelta(minutes=5)

        # Преобразуем overtime_trigger к временной зоне end_datetime, чтобы сравнить корректно
        overtime_trigger = overtime_trigger.astimezone(end_datetime.tzinfo)

        # Сравниваем даты и обновляем, если триггерное время больше
        if overtime_trigger > end_datetime:
            await collection.update_one(
                {'a_id': a_id},
                {'$set': {'end_datetime': str(overtime_trigger)}}
            )
        result = await collection.update_one(
            {'a_id': a_id},
            {'$push': {'bets': bet_info}}
        )
        
        if highest_bet:
            print("highest_bet ",highest_bet)
            await target_bet_beated(highest_bet['clients_id'])
        return {
            "status": "success",
            "message": "Ставка успешно добавлена."
        }

    except Exception as e:
        print(f"Error while adding bet: {e}")
        return {
            "status": "error",
            "message": f"Exception type: {type(e).__name__}, details: {str(e)}"
        }

================================================================================
Файл: app\routers\auctionCRUD\autoset_active_status.py
================================================================================
from .set_active_status import set_active_status
from globals import tm_db
from datetime import datetime, timezone
from smtp.mail_templates import target_won_auction, mass_auction_started
from deco import try_decorator
async def get(a_id:int):
    try:
       
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
     
        
        return auctions
    
    except Exception as e:
        print(e)
        return e
    
@try_decorator
async def autoset_active_status(a_id: int):
    auction = await get(a_id=a_id)
    current_time = datetime.now(timezone.utc)

    start_datetime = datetime.fromisoformat(auction["start_datetime"])
    end_datetime = datetime.fromisoformat(auction["end_datetime"])

    if start_datetime.tzinfo is None:
        start_datetime = start_datetime.replace(tzinfo=timezone.utc)
    if end_datetime.tzinfo is None:
        end_datetime = end_datetime.replace(tzinfo=timezone.utc)

    current_status = auction.get("is_active", 0)  # Default to 0 (inactive) if not found

    if start_datetime <= current_time < end_datetime:
        if current_status == 1:
            return  # No need to update status if it's already active
        # Trigger actions for starting the auction
        #await mass_auction_started(auction["short_name"], url=f'https://torgi.monety.shop/alt_auction?a_id={str(a_id)}')
        await set_active_status(a_id, 1)  # Set auction as active
    else:
        # If the auction has ended and status is not inactive, perform actions
        if current_status == 0:
            return  # No need to update status if it's already inactive
        # Perform actions for auction end
        #await target_won_auction(a_id)
        await set_active_status(a_id, 0)  # Set auction as inactive

================================================================================
Файл: app\routers\auctionCRUD\delete.py
================================================================================
from fastapi import APIRouter, HTTPException
from globals import tm_db
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin

async def delete(a_id: int, user = Depends(manager)):
    try:
        
        user_buf = dict(await user)
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы."}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы."}
        collection = tm_db['auctions']
        
        # Обновляем запись, добавляя поле `deleted`
        result = await collection.update_one(
            {"a_id": a_id},  # Поиск по `a_id`
            {"$set": {"deleted": True}}  # Помечаем как удалённую
        )
        
        # Проверяем, было ли обновление успешным
        if result.modified_count == 0:
            raise HTTPException(status_code=404, detail=f"Аукцион с ID {a_id} не найден или уже удалён.")
        
        return {"status": "success", "message": f"Аукцион с ID {a_id} помечен как удалённый."}
    
    except Exception as e:
        return {"status": "error", "message": str(e)}

================================================================================
Файл: app\routers\auctionCRUD\get.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from .autoset_active_status import autoset_active_status
from fastapi import Request
async def get(a_id:int , Request:Request):
    try:
        await autoset_active_status(a_id)
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
 
        
        return auctions
    
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\auctionCRUD\get_active_status.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form


async def get_active_status(a_id:str):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        if "is_active" not in auctions or auctions["is_active"]==0:
            return 0
        else:
            return 1
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\auctionCRUD\get_all.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from .autoset_active_status import autoset_active_status

async def get_all():
    try:
        collection = tm_db['auctions']
        
        # Запрос только для документов, у которых нет поля `deleted`
        auctions = await collection.find(
            {"deleted": {"$exists": False}},  # Условие отсутствия поля `deleted`
            {"_id": 0, "album":0}  # Исключение поля `_id` из результата
        ).to_list(length=None)
        
        return auctions
    except Exception as e:
        print(e)
        return {"error": str(e)}  # Возвращаем сообщение об ошибке как строку для удобства

================================================================================
Файл: app\routers\auctionCRUD\get_bets.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Request

async def get_bets(a_id:int):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        if auctions["bets"]!=[]:
            return auctions["bets"]
        else:
            return 0
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\auctionCRUD\get_highest_bet.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_highest_bet(a_id:int):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        if auctions["bets"]!=[]:
            return auctions["bets"][-1]
        else:
            return 0
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\auctionCRUD\get_time.py
================================================================================

from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_time(a_id:int):
    try:
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        
        return auctions["end_datetime"]
      
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\auctionCRUD\router.py
================================================================================
from fastapi import APIRouter
from .add import *
from .get_all import *
from .get import *
from .add_bet_to_auction import *
from .short_get_all import *
from .update_auction import *
from .delete import *
from .get_bets import *
from .get_time import *


auction_router = APIRouter(
    prefix="/mongo/auction",
    tags=["Auctions"]
)

auction_router.add_api_route(
     path='/add',
    endpoint=add,
    methods=['POST']
)
auction_router.add_api_route(
     path='/add_bet_to_auction',
    endpoint=add_bet_to_auction,
    methods=['POST']
)

auction_router.add_api_route(
     path='/get_all',
    endpoint=get_all,
    methods=['GET']
)

auction_router.add_api_route(
     path='/get',
    endpoint=get,
    methods=['GET']
)


auction_router.add_api_route(
     path='/short_get_all',
    endpoint=short_get_all,
    methods=['GET']
)

auction_router.add_api_route(
     path='/update_auction',
    endpoint=update_auction,
    methods=['POST']
)



auction_router.add_api_route(
     path='/delete',
    endpoint=delete,
    methods=['DELETE']
)



auction_router.add_api_route(
     path='/get_bets',
    endpoint=get_bets,
    methods=['GET']
)

auction_router.add_api_route(
     path='/get_time',
    endpoint=get_time,
    methods=['GET']
)



================================================================================
Файл: app\routers\auctionCRUD\set_active_status.py
================================================================================
from globals import tm_db 

async def set_active_status(a_id: str, status: bool):
    collection = tm_db['auctions']
    
    # Обновляем документ с указанным a_id
    result = await collection.update_one(
        {'a_id': a_id},
        {'$set': {'is_active': status}}
    )
    
    # Проверяем, было ли обновлено что-то
    if result.modified_count > 0:
        return(f"Статус аукциона с ID {a_id} успешно обновлен на {status}.")
    else:
        return(f"Не удалось обновить статус аукциона с ID {a_id}. Возможно, он не существует.")

================================================================================
Файл: app\routers\auctionCRUD\short_get_all.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form


async def short_get_all():
    try:
        collection = tm_db['auctions']
        auctions = await collection.find( {"deleted": {"$exists": False}},{"_id": 0,"a_id":1, "short_name":1}).to_list(length=None) 
        return auctions
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\auctionCRUD\updater.py
================================================================================
from .short_get_all import short_get_all
from .autoset_active_status import autoset_active_status
async def update_all():
    auctioons = await short_get_all()
    for a in auctioons:
        if 'deleted' not in a:
            await autoset_active_status(a["a_id"])

================================================================================
Файл: app\routers\auctionCRUD\update_auction.py
================================================================================
from fastapi import Depends, Response, Request, HTTPException
from globals import tm_db
from ..idCRUD import get_a_id
from .get import get
from globals import manager
import json as JSON
from datetime import datetime
from utils import admin_date_form as date_form
import pytz 
import base64
from io import BytesIO
from PIL import Image

async def update_auction(json: dict, Request: Request, user=Depends(manager)):
    try:
        # Проверяем, что пользователь аутентифицирован
        user_buf = dict(await user)
        client_id = user_buf.get('id')
        if not client_id:
            raise HTTPException(status_code=401, detail="Пользователь не авторизован.")

        # Получаем коллекцию аукционов
        collection = tm_db['auctions']

        # Проверяем, передан ли a_id
        auction_id = json.get("a_id")
        if not auction_id or not isinstance(auction_id, str):
            return {
                "success": 0,
                "message": "Некорректный или отсутствующий ID аукциона."
            }  

        # Проверяем, существует ли аукцион с данным a_id
        auction_data = await get(int(auction_id), Request)
        if auction_data is None:
            return {
                "success": 0,
                "message": f"Аукцион с ID {auction_id} не существует."
            }

        # Формируем словарь для обновления только с валидными полями
        update_fields = {}

        if "short_name" in json:
            short_name = json["short_name"]
            if isinstance(short_name, str) and short_name.strip():
                update_fields["short_name"] = short_name.strip()

                
        if "start_datetime" in json:
            start_datetime = json["start_datetime"]
            try:
                # Пытаемся сначала распарсить ISO формат
                iso_datetime = datetime.fromisoformat(start_datetime)
                if iso_datetime.tzinfo is None:  # Если часовой пояс не указан
                    tz = pytz.timezone("Europe/Moscow")
                    iso_datetime = tz.localize(iso_datetime)
                update_fields["start_datetime"] = iso_datetime.isoformat()
            except ValueError:
                try:
                    # Если ISO не сработал, пытаемся распарсить формат DD.MM.YYYY HH:MM
                    update_fields["start_datetime"] = date_form(start_datetime)
                except ValueError:
                    return {
                        "success": 0,
                        "message": "Некорректный формат start_datetime. Ожидается ISO формат или DD.MM.YYYY HH:MM."
                    }

        if "end_datetime" in json:
            end_datetime = json["end_datetime"]
            try:
                # Пытаемся сначала распарсить ISO формат
                iso_datetime = datetime.fromisoformat(end_datetime)
                if iso_datetime.tzinfo is None:  # Если часовой пояс не указан
                    tz = pytz.timezone("Europe/Moscow")
                    iso_datetime = tz.localize(iso_datetime)
                update_fields["end_datetime"] = iso_datetime.isoformat()
            except ValueError:
                try:
                    # Если ISO не сработал, пытаемся распарсить формат DD.MM.YYYY HH:MM
                    update_fields["end_datetime"] = date_form(end_datetime)
                except ValueError:
                    return {
                        "success": 0,
                        "message": "Некорректный формат end_datetime. Ожидается ISO формат или DD.MM.YYYY HH:MM."
                    }
        if "start_price" in json:
            start_price = int(json["start_price"])
            if isinstance(start_price, (int, float)) and start_price > 0:
                update_fields["start_price"] = start_price
            else:
                return {
                    "success": 0,
                    "message": "start_price должен быть положительным числом."
                }

        if "min_bid_step" in json:
            min_bid_step = int(json["min_bid_step"])
            if isinstance(min_bid_step, (int, float)) and min_bid_step > 0:
                update_fields["min_bid_step"] = min_bid_step
            else:
                return {
                    "success": 0,
                    "message": "min_bid_step должен быть положительным числом."
                }

        if "description" in json:
            description = json["description"]
            if isinstance(description, str) and description.strip():
                update_fields["description"] = description.strip()

        if "photo" in json:
            photo = json["photo"]
            if isinstance(photo, str) and photo.strip().startswith("data:image/"):
                # Убираем часть с "data:image/format;base64,"
                photo_data = photo.split(",", 1)[1]
                
                # Декодируем Base64 в байты.
                image_data = base64.b64decode(photo_data)
                image = Image.open(BytesIO(image_data))
                
                # Конвертируем изображение в RGB, чтобы отбросить альфа-канал.
                image = image.convert("RGB")

                # Сохраняем изображение в формате JPEG.
                output_buffer = BytesIO()
                image.save(output_buffer, format="JPEG", quality=85)  # Устанавливаем качество.
                
                # Кодируем результат обратно в Base64.
                jpeg_b64 = base64.b64encode(output_buffer.getvalue()).decode("utf-8")

                # Обновляем поле фото.
                update_fields["photo"] = f"{jpeg_b64}"
        if "bets" in json:
            try:
                bets = JSON.loads(json["bets"])
                if isinstance(bets, list):
                    update_fields["bets"] = bets
                else:
                    return {
                        "success": 0,
                        "message": "bets должен быть массивом."
                    }
            except JSON.JSONDecodeError:
                return {
                    "success": 0,
                    "message": "Некорректный формат bets. Ожидается JSON массив."
                }

        # Если нет полей для обновления, возвращаем сообщение
        if not update_fields:
            return {
                "success": 0,
                "message": "Не указаны поля для обновления."
            }

        # Выполняем обновление данных в MongoDB
        result = await collection.update_one(
            {"a_id": int(auction_id)},
            {"$set": update_fields}
        )

        # Проверяем, обновился ли документ
        if result.modified_count > 0:
            return {
                "success": 1,
                "message": f"Аукцион с ID {auction_id} успешно обновлён."
            }
        else:
            return {
                "success": 0,
                "message": f"Изменения для аукциона с ID {auction_id} не были внесены."
            }

    except Exception as e:
        # Логируем ошибку для дальнейшей отладки
        print(f"Ошибка: {e}")
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: app\routers\auth\check_mail.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def check_mail(mail: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"email": mail}, {"_id": 0})  # Исправлено поле поиска
        
        if client:
            return 1
        else: 
            return 0
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: app\routers\auth\check_phone.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def check_phone(mail: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"phone_number": mail}, {"_id": 0})  # Исправлено поле поиска
        
        if client:
            return 1
        else: 
            return 0
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: app\routers\auth\check_username.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def check_username(mail: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"nickname": mail}, {"_id": 0})  # Исправлено поле поиска
        
        if client:
            return 1
        else: 
            return 0
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: app\routers\auth\get_data.py
================================================================================
from fastapi import Depends

from globals import *
import deco

@deco.try_decorator
async def get_data(user = Depends(manager)):
    user_buf = dict(await user)
    return dict((i, user_buf[i]) for i in user_buf if i != 'password')

================================================================================
Файл: app\routers\auth\login.py
================================================================================
from fastapi import Depends, Response
from fastapi.security import OAuth2PasswordRequestForm
from fastapi_login.exceptions import InvalidCredentialsException
from datetime import timedelta
from hashlib import sha256
import os
from globals import *
from smtp.send_verification_mail import send_verification_mail

async def login(response: Response, data: OAuth2PasswordRequestForm = Depends()):
    login = str(data.username)
    password = data.password
    key = sha256(password.encode('utf-8')).hexdigest()
    password = key

    user = await load_user(login)
    if not user:
        raise InvalidCredentialsException
    elif user['email_verified']==False:
        await send_verification_mail(user["email"])
        return "Ваша почта не подтверждена, сообщение отправлено на почту"
    elif password != user['password']:
        raise InvalidCredentialsException
    

    access_token = manager.create_access_token(
        data=dict(sub=login), expires = timedelta(hours = 720)
    )
    manager.set_cookie(response, access_token)

    return {'access_token': access_token, 'token_type': 'bearer'}

================================================================================
Файл: app\routers\auth\logout.py
================================================================================
from fastapi import Depends, Response
from fastapi.responses import RedirectResponse

from globals import *
import deco

@deco.try_decorator
async def logout(response : Response):
    response = RedirectResponse("/", status_code= 302)
    manager.set_cookie(response, "")
    return response

================================================================================
Файл: app\routers\auth\register.py
================================================================================
import re
from fastapi import Depends, Response
from fastapi.responses import RedirectResponse
import deco
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from ..clientsCRUD.embeded_get_client import get
from ..clientsCRUD import add
from ..idCRUD import get_c_id
from .check_mail import check_mail
from .check_username import check_username 
from .check_phone import check_phone
from smtp.send_verification_mail import send_verification_mail
import html  # Для экранирования HTML-символов

# Регулярные выражения для валидации
EMAIL_REGEX = r'^[a-zA-Z0-9._%±]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$'
PHONE_REGEX = r'^\+7(\s|%20)\(\d{3}\)(\s|%20)\d{3}-\d{2}-\d{2}$'
NICKNAME_REGEX = r'^[a-zA-Z0-9_-а-яА-ЯёЁ]{3,16}$'  # Альфа-цифровые символы, _ или - и русские буквы

@deco.try_decorator
async def register(phone_number: str, password: str, nickname: str = "", email: str = "", avito_url: str = ""):
    try:
        # Очистка и защита данных
        phone_number = phone_number.replace(' ', '+', 1).strip()
        email = html.escape(email.strip())[:32]  # Экранирование + ограничение длины
        nickname = html.escape(nickname.strip())[:16]  # Экранирование + ограничение длины
        avito_url = avito_url.strip()[:64]  # Ограничение длины

        # Проверка на соответствие регулярным выражениям
        if not re.match(EMAIL_REGEX, email):
            return {"success": False, "error": "Некорректный формат email"}
        
        if not re.match(NICKNAME_REGEX, nickname):
            return {"success": False, "error": "Некорректный формат юзернейма"}

        # Проверка на уникальность
        if not await check_mail(email) and not await check_phone(phone_number) and not await check_username(nickname):
            await add(phone_number, password, email, nickname, avito_url)
            await send_verification_mail(email)
            return {"success": True, "message": "Регистрация успешна"}
        else:
            return {"success": False, "error": "Эта почта, юзернейм или номер телефона уже зарегистрированы"}
    
    except Exception as e:
        print(f"Ошибка в register: {e}")
        return {"success": False, "error": "Внутренняя ошибка сервера"}

================================================================================
Файл: app\routers\auth\router.py
================================================================================
from fastapi import APIRouter

from .login import login
from .get_data import get_data
from .logout import logout
from .register import register
from .check_mail import check_mail

auth_router = APIRouter(
    prefix="/auth",
    tags=["Auth"]
)

auth_router.add_api_route(
    "/token",
    login,
    description="Авторизация (сюда логин и пароль)",
    methods=['POST']
)

auth_router.add_api_route(
    "/get_data",
    get_data,
    description="Получить информацию о пользователе",
    methods=['GET']
)

auth_router.add_api_route(
    "/logout",
    logout,
    description="Выйти из аккаунта",
    methods=['POST']
)

auth_router.add_api_route(
    "/register",
    register,
    description="Создать новый аккаунт",
    methods=['POST']
)
auth_router.add_api_route(
    "/check_mail",
    check_mail,
    description="",
    methods=['POST']
)

================================================================================
Файл: app\routers\auth\__init__.py
================================================================================
from .router import *

================================================================================
Файл: app\routers\CEO\robots.py
================================================================================
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

async def robots(request: Request):
    robots_txt = """
    User-agent: *
    Disallow: /hello/
    Disallow: /login/
    Disallow: /create_auction/
    Allow: /
    
    Sitemap: https://torgi.monety.shop/sitemap.xml
    """
    return PlainTextResponse(robots_txt.strip())

================================================================================
Файл: app\routers\CEO\router.py
================================================================================
from fastapi import APIRouter
from .robots import *
from .sitemap import *

ceo_router = APIRouter(
    prefix="",
    tags=["CEO"]
)

ceo_router.add_api_route(
    path='/robots.txt',
    endpoint=robots,
    methods=['GET']
)
ceo_router.add_api_route(
    path='/sitemap.xml',
    endpoint=sitemap,
    methods=['GET']
)
================================================================================
Файл: app\routers\CEO\sitemap.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from fastapi.responses import Response
from datetime import datetime, timedelta
from ..auctionCRUD.short_get_all import *

async def sitemap():
    # Получаем текущую дату
    today = datetime.utcnow().date()
    
    # Пример функции для расчета динамических дат
    def format_date(date):
        return date.strftime("%Y-%m-%d")
    
    auctions = await short_get_all()
    urls = [
        {"loc": "https://torgi.monety.shop/", "lastmod": format_date(today), "changefreq": "daily", "priority": 1.0},
        {"loc": "https://example.com/about", "lastmod": format_date(today - timedelta(days=5)), "changefreq": "monthly", "priority": 0.8},
    ]
    
    for a in auctions:
        urls.append({
            "loc": f"https://torgi.monety.shop/alt_auction?a_id={a['a_id']}",
            "lastmod": format_date(today - timedelta(days=10)),  # Пример: дата обновления аукциона 10 дней назад
            "changefreq": "weekly",
            "priority": 0.9
        })
    
    # Генерация XML
    sitemap_xml = '<?xml version="1.0" encoding="UTF-8"?>\n'
    sitemap_xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n'

    for url in urls:
        sitemap_xml += f"  <url>\n"
        sitemap_xml += f"    <loc>{url['loc']}</loc>\n"
        sitemap_xml += f"    <lastmod>{url['lastmod']}</lastmod>\n"
        sitemap_xml += f"    <changefreq>{url['changefreq']}</changefreq>\n"
        sitemap_xml += f"    <priority>{url['priority']}</priority>\n"
        sitemap_xml += f"  </url>\n"

    sitemap_xml += '</urlset>'

    return Response(content=sitemap_xml, media_type="application/xml")

================================================================================
Файл: app\routers\clientsCRUD\active_clients.py
================================================================================
from fastapi import APIRouter, Depends
from globals import tm_db
from collections import Counter
from globals import manager

async def active_clients(user=Depends(manager)):
    # Получаем коллекции
    auctions_collection = tm_db['auctions']
    clients_collection = tm_db['clients']

    # Получаем все аукционы и пользователей
    auctions = await auctions_collection.find().to_list(None)
    clients = await clients_collection.find().to_list(None)

    # Подсчитываем количество ставок каждого клиента
    bet_counter = Counter()
    for auction in auctions:
        for bet in auction.get("bets", []):
            client_id = bet.get("clients_id")
            if client_id is not None:
                bet_counter[client_id] += 1

    # Создаем список активных пользователей
    active_clients = []
    for client in clients:
        client_id = client.get("id")
        client_bets = bet_counter.get(client_id, 0)  # Получаем количество ставок пользователя
        if client_bets > 0:
            active_clients.append({
                "id": client_id,
                "nickname": client.get("nickname"),
                "email": client.get("email"),
                "phone_number": client.get("phone_number"),
                "bet_count": client_bets
            })

    # Сортируем пользователей по количеству ставок (по убыванию)
    active_clients = sorted(active_clients, key=lambda x: x["bet_count"], reverse=True)

    return active_clients

================================================================================
Файл: app\routers\clientsCRUD\add.py
================================================================================

from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from .embeded_get_client import get
from ..idCRUD import get_c_id
from hashlib import sha256
import os



async def add(phone_number: str, password: str, email: str, nickname: str, avito_url: str = ""):
    try:
        clients_id = await get_c_id()
        if await get(clients_id)==None:

                        
            key = sha256(password.encode('utf-8')).hexdigest()
            
          
            insertion_c = {
                "id": clients_id,
                "phone_number": str(phone_number),
                "password": key,
                "email": email.lower().strip(),
                "avito_url": avito_url,
                "nickname": nickname.strip(),
                "mail_receive_bet_beated": True,
                "mail_receive_auction_started": True,
                "get_mails": True,
                'email_verified': False
            }
            collection = tm_db['clients']  # Исправлено название коллекции

            result = await collection.insert_one(insertion_c, bypass_document_validation=True)
            return {
                "status": "success",
                "message": f"Клиент с ID {clients_id} успешно добавлен."
            }
        else:
            return {
                    "status": "error",
                     "message": f"Клиент с ID {clients_id} уже существует."
                }
    except Exception as e:
        print(e)
        return e



================================================================================
Файл: app\routers\clientsCRUD\ban.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin
from ..clientsCRUD.embeded_get_client import get

async def ban(id: int, user = Depends(manager)):
    try:
        
        user_buf = dict(await user)
        
      
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы."}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы."}
        
        # Проверяем, существует ли клиент с данным client_id
        
        client_id = user_buf['id']
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов
        
        client_data = await get(client_id)
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {client_id} не существует."
            }

        # Обновляем статус пользователя на "заблокирован"
        update_result = await collection.update_one(
            {"id": id},
            {"$set": {"status": "banned"}}
        )

        # Проверяем, был ли обновлен документ
        if update_result.modified_count == 0:
            return{"status":'failed', "detail":"Не удалось заблокировать пользователя"}

        return {"message": "Пользователь успешно заблокирован"}
    
    except Exception as e:
        return{"status":'failed', "detail":str(e)}

================================================================================
Файл: app\routers\clientsCRUD\change_password.py
================================================================================
from globals import tm_db
from ..idCRUD import get_c_id
from .embeded_get_client import get
from fastapi import Depends, Response
from globals import manager
from hashlib import sha256
from ..auth import logout

async def change_password(json:dict, user = Depends(manager),):
    try:
        
        user_buf = dict(await user)
        client_id = user_buf['id']
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов

        # Проверяем, существует ли клиент с данным client_id
        client_data = await get(client_id)
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {client_id} не существует."
            }

        # Формируем словарь для обновления только с теми полями, которые были переданы
        update_fields = {}
        
        key = sha256(json["old_password"].encode('utf-8')).hexdigest()

        if key ==client_data["password"]:
            result = await collection.update_one(
            {"id": client_id},
            {"$set": {"password":sha256(json["new_password"].encode('utf-8')).hexdigest()}}
        )

       

        # Выполняем обновление данных в MongoDB
      

        # Проверяем, обновился ли документ
        if result.modified_count > 0:
          
            return {
                    "success": 1,
                    "message": f""
                }
        else:
            return {
                "success": 0,
                "message": f"Изменения для клиента с ID {client_id} не были внесены."
            }

    except Exception as e:
        print(e)
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: app\routers\clientsCRUD\edit_account.py
================================================================================
from globals import tm_db
from ..idCRUD import get_c_id
from .embeded_get_client import get
from fastapi import Depends, Response
from globals import manager
from .is_admin import is_admin

async def edit(json: dict, user=Depends(manager)):
    try:
        #print(json)
        user_buf = dict(await user)
        client_id = user_buf['id']
        
       
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов
        
        # Проверяем, существует ли клиент с данным ID
        client_data = await get(json["id"])
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {json['id']} не существует."
            }
        
        # Формируем словарь для обновления только с измененными полями
        update_fields = {}
        fields_to_check = [
            "phone_number",
            "nickname",
            "avito_url",
            "mail_receive_bet_beated",
            "mail_receive_auction_started"
        ]
        for field in fields_to_check:
            if field in json and json[field] != client_data.get(field):
                # Проверяем и преобразуем строковые значения "True" / "False" в булевы
                if isinstance(json[field], str) and json[field].lower() in ["true", "false"]:
                    update_fields[field] = json[field].lower() == "true"
                else:
                    update_fields[field] = json[field]

        
        # Если нет полей для обновления, возвращаем сообщение
        if not update_fields:
            return {
                "status": "error",
                "message": "Не указаны поля для обновления или изменения совпадают с текущими."
            }
        
        # Выполняем обновление данных в MongoDB
        result = await collection.update_one(
            {"id": int(json["id"])},  # Используем ID из переданного JSON
            {"$set": update_fields}
        )
        
        # Проверяем, обновился ли документ
        if result.modified_count > 0:
            return {
                "success": 1,
                "message": f"Клиент с ID {json['id']} успешно обновлён."
            }
        else:
            return {
                "success": 0,
                "message": f"Изменения для клиента с ID {json['id']} не были внесены."
            }
    
    except Exception as e:
        print(e)
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: app\routers\clientsCRUD\embeded_get_client.py
================================================================================
from globals import tm_db   

async def get(clients_id: str):
        
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"id": int(clients_id)}, {"_id": 0})  # Исправлено поле поиска
        return client
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\clientsCRUD\get.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin


async def get(clients_id: str, user = Depends(manager)):
    user_buf = dict(await user)
        
      
    if not user_buf['email']:
        return {"success": False, "error": "Вы не авторизованы."}
    elif not await is_admin( user_buf["email"]):
        return {"success": False, "error": "Вы не авторизованы."}
        
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"id": int(clients_id)}, {"_id": 0})  # Исправлено поле поиска
        return client
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: app\routers\clientsCRUD\get_all.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form
from fastapi import Depends, Response
from globals import manager
from .is_admin import is_admin

async def get_all(user = Depends(manager)):
    try:
        user_buf = dict(await user)
        
      
        if not user_buf['email']:
            return {"success": False, "error": "Вы не авторизованы."}
        elif not await is_admin( user_buf["email"]):
            return {"success": False, "error": "Вы не авторизованы."}
        
        collection = tm_db['clients']  # Исправлено название коллекции
        clients = await collection.find({}, {"_id": 0}).to_list()
        return clients
    except Exception as e:
        print(e)
        return e

================================================================================
Файл: app\routers\clientsCRUD\get_by_phone.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_by_phone(phone: str):
    try:
        collection = tm_db['clients']  # Исправлено название коллекции
        client = await collection.find_one({"phone_number": phone}, {"_id": 0})  # Исправлено поле поиска
        return client
    except Exception as e:
        print(e)
        return e
================================================================================
Файл: app\routers\clientsCRUD\get_mails.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def get_unique_mails(filter_key):
    try:
        collection = tm_db['clients']  # Подключаем коллекцию
        clients = await collection.find(
            {filter_key: True}, 
            {"_id": 0, "email": 1}  # Получаем только email
        ).to_list(length=None)
        
        unique_emails = set(client["email"] for client in clients if "email" in client)  # Убираем дубли
        return list(unique_emails)
    except Exception as e:
        print(e)
        return e

async def get_mails_to_notify():
    return await get_unique_mails("mail_receive")

async def get_mails_to_notify_start():
    return await get_unique_mails("mail_receive_auction_started")
================================================================================
Файл: app\routers\clientsCRUD\is_admin.py
================================================================================
from globals import tm_db   
from datetime import datetime
import asyncio
from utils import date_form

async def is_admin(email: str):
    try:
        collection = tm_db['admins'] 
        client = await collection.find_one({"email": email}, {"_id": 0})  
        #print(client)
        if client!=None:
            return 1
    except Exception as e:
        print(e)
        return 0
================================================================================
Файл: app\routers\clientsCRUD\router.py
================================================================================
from fastapi import APIRouter
from .add import *
from .get_all import *
from .get import *
from .update_account import * 
from .change_password import * 
from .active_clients import * 
from .ban import * 
from .unban import * 
from .edit_account import edit

clients_router = APIRouter(
    prefix="/mongo/clients",
    tags=["API"]
)

clients_router.add_api_route(
    path='/add',
    endpoint=add,
    methods=['POST']
)
clients_router.add_api_route(
    path='/get_all',
    endpoint=get_all,
    methods=['GET']
)
clients_router.add_api_route(
    path='/get',
    endpoint=get,
    methods=['GET']
)

clients_router.add_api_route(
    path='/update',
    endpoint=update,
    methods=['POST']
)

clients_router.add_api_route(
    path='/change_password',
    endpoint=change_password,
    methods=['POST']
)

clients_router.add_api_route(
    path='/active_clients',
    endpoint=active_clients,
    methods=['POST']
)


clients_router.add_api_route(
    path='/ban',
    endpoint=ban,
    methods=['DELETE']
)

clients_router.add_api_route(
    path='/unban',
    endpoint=unban,
    methods=['POST']
)


clients_router.add_api_route(
    path='/edit',
    endpoint=edit,
    methods=['POST']
)


================================================================================
Файл: app\routers\clientsCRUD\unban.py
================================================================================
from fastapi import Depends, HTTPException
from globals import tm_db, manager
from ..clientsCRUD.embeded_get_client import get
from ..clientsCRUD import is_admin

async def unban(id: int, user = Depends(manager)):
    try:
        # Получаем информацию о текущем пользователе
        user_buf = dict(await user)
        client_id = user_buf['email']

        # Проверяем, является ли пользователь администратором
        if not await is_admin(client_id):
            raise HTTPException(status_code=403, detail="У вас нет прав на разблокировку пользователей.")

        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов

        # Проверяем, существует ли клиент с данным id
        client_data = await get(id)
        if not client_data:
            raise HTTPException(status_code=404, detail=f"Клиент с ID {id} не найден.")

        # Обновляем статус пользователя, удаляя поле "status" (разбан)
        result = await collection.update_one(
            {"id": id},  # Используем id для поиска
            {"$unset": {"status": ""}}  # Удаляем поле "status", которое, вероятно, означает бан
        )

        if result.modified_count == 0:
            raise HTTPException(status_code=400, detail="Не удалось разблокировать пользователя или пользователь не был заблокирован.")

        return {"status": "success", "message": f"Пользователь с ID {id} был разблокирован."}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

================================================================================
Файл: app\routers\clientsCRUD\update_account.py
================================================================================
from globals import tm_db
from ..idCRUD import get_c_id
from .embeded_get_client import get
from fastapi import Depends, Response
from globals import manager

async def update(json:dict, user = Depends(manager),):
    try:
        
        user_buf = dict(await user)
        client_id = user_buf['id']
        collection = tm_db['clients']  # Коллекция, в которой хранятся данные клиентов

        # Проверяем, существует ли клиент с данным client_id
        client_data = await get(client_id)
        if client_data is None:
            return {
                "status": "error",
                "message": f"Клиент с ID {client_id} не существует."
            }

        # Формируем словарь для обновления только с теми полями, которые были переданы
        update_fields = {}
        if "phone_number" in json:
            update_fields["phone_number"] = json["phone_number"]
        if "avito_url" in "avito_url" :
            update_fields["avito_url"] = json["avito_url"]
        if "mail_receive_bet_beated" in json:
            update_fields["mail_receive_bet_beated"] = json["mail_receive_bet_beated"]
        if "mail_receive_auction_started" in json:
            update_fields["mail_receive_auction_started"] = json["mail_receive_auction_started"]

        # Если нет полей для обновления, возвращаем сообщение
        if not update_fields:
            return {
                "status": "error",
                 "message": "Не указаны поля для обновления."
            }

        # Выполняем обновление данных в MongoDB
        result = await collection.update_one(
            {"id": client_id},
            {"$set": update_fields}
        )

        # Проверяем, обновился ли документ
        if result.modified_count > 0:
            return {
                "success": 1,
                "message": f"Клиент с ID {client_id} успешно обновлён."
            }
        else:
            return {
                "success": 0,
                "message": f"Изменения для клиента с ID {client_id} не были внесены."
            }

    except Exception as e:
        print(e)
        return {
            "success": 0,
            "message": f"Произошла ошибка: {str(e)}"
        }

================================================================================
Файл: app\routers\clientsCRUD\username_veryfy.py
================================================================================

================================================================================
Файл: app\routers\clientsCRUD\__init__.py
================================================================================
from .add import add
from .get import get
from .get_all import get_all
from .is_admin import is_admin
from .update_account import update
================================================================================
Файл: app\routers\html_render\about.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def about(request: Request):
    return templates.TemplateResponse("about.html", context= {"request": request})

================================================================================
Файл: app\routers\html_render\account.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def account(request: Request):
    return templates.TemplateResponse("account.html", context= {"request": request})
================================================================================
Файл: app\routers\html_render\alt_auction.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from datetime import datetime


async def get(a_id:int , Request:Request):
    try:
       
        collection = tm_db['auctions']
        auctions = await collection.find_one({"a_id":a_id},{"_id": 0})
        return auctions
    
    except Exception as e:
        print(e)
        return e


async def alt_auction(request: Request):
    # Получаем параметр a_id из строки запроса
    a_id = request.query_params.get("a_id")
    
    # Загружаем данные аукциона из базы данных
    auction_data = await get(int(a_id), request)
    #print(auction_data)


    # Формируем метаинформацию
    meta_info = {
        "title": f"{auction_data["short_name"]}",
        "description": auction_data["description"],
        "structured_data": {
            "@context": "https://schema.org",
            "@type": "Auction",
            "name": auction_data["short_name"],
            "startDate": auction_data["start_datetime"],
            "endDate": auction_data["end_datetime"],
            "price": auction_data["start_price"],
            "url": str(request.url)
        }
    }

    # Передача метаинформации в шаблон
    return templates.TemplateResponse("alt_auction.html", context={
        "request": request,
        "auction_data": auction_data,
        "meta_info": meta_info
    })

================================================================================
Файл: app\routers\html_render\create_auction.py
================================================================================
from globals import *
from fastapi import FastAPI, Request
from fastapi import Depends, Response
from globals import manager
from ..clientsCRUD import is_admin

async def create_auction(request: Request, user = Depends(manager)):
    user_buf = dict(await user)
    print(user_buf)
    if not await is_admin(user_buf["email"]):
        return {"success": False, "error": "Вы не авторизованы."}
    else:
        return templates.TemplateResponse("create_auction.html", context= {"request": request})

================================================================================
Файл: app\routers\html_render\enter_reg_page.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def enter_reg_page(request: Request):
    return templates.TemplateResponse("enter_reg_page.html", context= {"request": request})

================================================================================
Файл: app\routers\html_render\index.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def index(request: Request):
    return templates.TemplateResponse("index.html", context= {"request": request})

================================================================================
Файл: app\routers\html_render\router.py
================================================================================
from fastapi import APIRouter
from .index import *
from .account import *
from .alt_auction import *
from .create_auction import *
from .enter_reg_page import *
from .about import *
from .sidebar import *

render_router = APIRouter(
    prefix="",
    tags=["Render"]
)

render_router.add_api_route(
    path='/',
    endpoint=index,
    methods=['GET']
)

render_router.add_api_route(
    path='/account',
    endpoint=account,
    methods=['GET']
)

render_router.add_api_route(
    path='/alt_auction',
    endpoint=alt_auction,
    methods=['GET']
)

render_router.add_api_route(
    path='/create_auction',
    endpoint=create_auction,
    methods=['GET']
)

render_router.add_api_route(
    path='/login',
    endpoint=enter_reg_page,
    methods=['GET']
)

render_router.add_api_route(
    path='/about',
    endpoint=about,
    methods=['GET']
)



render_router.add_api_route(
    path='/sidebar.html',
    endpoint=sidebar,
    methods=['GET']
)


================================================================================
Файл: app\routers\html_render\sidebar.py
================================================================================
from globals import *
from fastapi import FastAPI, Request

async def sidebar(request: Request):
    return templates.TemplateResponse("sidebar.html", context= {"request": request})

================================================================================
Файл: app\routers\html_render\__init__.py
================================================================================
from .enter_reg_page import enter_reg_page
================================================================================
Файл: app\routers\idCRUD\get_a_id.py
================================================================================
from globals import tm_db

async def get_a_id():
    collection = tm_db['id_counters']
    try:
        # Increment the a_id field by 1 and return the updated document
        updated_document = await collection.find_one_and_update(
            {},
            {'$inc': {'a_id': 1}},
            return_document=True  # This option returns the updated document
        )
        
        if updated_document:
            #print(updated_document)
            return updated_document["a_id"]
        else:
            print("Документ для обновления не найден.")
            return None
    
    except Exception as e:
        print(f"Произошла ошибка: {e}")
        return None

================================================================================
Файл: app\routers\idCRUD\get_c_id.py
================================================================================
from globals import tm_db

async def get_c_id():
    collection = tm_db['id_counters']
    try:
        # Increment the a_id field by 1 and return the updated document
        updated_document = await collection.find_one_and_update(
            {},
            {'$inc': {'с_id': 1}},
            return_document=True  # This option returns the updated document
        )
        
        if updated_document:
            print(updated_document)
            return updated_document["с_id"]
        else:
            print("Документ для обновления не найден.")
            return None
    
    except Exception as e:
        print(f"Произошла ошибка: {e}")
        return None

================================================================================
Файл: app\routers\idCRUD\__init__.py
================================================================================
from .get_a_id import get_a_id
from .get_c_id import get_c_id
================================================================================
Файл: app\smtp\mail_parts.py
================================================================================
parts = {
    "body_default": "Уважаемый пользователь, вы получили это уведомление, так как подписаны на нашу рассылку. Благодарим за интерес к нашим предложениям! Ссылка: ",
    "header_auction_start": "Начало торгов ",
    "header_bet_beated": "Уведомление: вашу ставку на торгах перебили",
    "header_you_won": "Поздравляем! Вы стали победителем аукциона!",
    "body_you_won": "Мы свяжемся с вами в ближайшее время по контактному номеру, указанному при регистрации или по почте",
}

================================================================================
Файл: app\smtp\mail_templates.py
================================================================================
import aiosmtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from routers.clientsCRUD.get_mails import get_mails_to_notify, get_mails_to_notify_start
from routers.clientsCRUD.get_by_phone import get_by_phone
from routers.clientsCRUD.embeded_get_client import get as c_get
from .mail_parts import parts
from deco import try_decorator
from globals import smtp_username, smtp_password


async def send_mail(recipient: str, theme: str, body: str):
    smtp_server = "smtp.beget.com"
    smtp_port = 465  # or 587 for TLS
    username = smtp_username
    password = smtp_password

    sender = smtp_username  
    subject = theme

    message = MIMEMultipart()
    message["From"] = sender
    message["To"] = recipient
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))
    print("Отправка на", recipient)
    try:
        async with aiosmtplib.SMTP(hostname=smtp_server, port=smtp_port, use_tls=True) as server:
            await server.login(username, password)
            await server.send_message(message)
            print("Письмо отправлено успешно!", theme)
    except Exception as e:
        print(f"Ошибка при отправке письма: {e}")


@try_decorator
async def mass_auction_started(Name: str, url: str):
    target = await get_mails_to_notify_start()
    print("mass_auction_started")
    print(target)
    for person in target:
        await send_mail(person['email'], parts["header_auction_start"] + Name, parts["body_default"]+ url)
        print(person)


@try_decorator
async def mass_news(Name: str, body: str):
    target = await get_mails_to_notify()
    for person in target:
        await send_mail(person['mail'], Name, body)


@try_decorator
async def target_bet_beated(c_id: str):
    target = await c_get(c_id)
    print("target", target)
    if target["mail_receive_bet_beated"] == True:
        await send_mail(target["email"], parts['header_bet_beated'], parts["body_default"])


from routers.auctionCRUD.get_highest_bet import get_highest_bet


@try_decorator
async def target_won_auction(a_id):
    # Await the coroutine before accessing its result
    highest_bet = await get_highest_bet(a_id)  # Await the coroutine
    clients_id = highest_bet["clients_id"]  # Now you can access clients_id safely

    target = await c_get(clients_id)  # Assuming c_get is also an async function
    if target["get_mails"] == 1:
        await send_mail(target["email"], parts['header_you_won'], parts["body_you_won"])


# If you need to run an example, wrap it in an async context or use an event loop
# Example:
# import asyncio
# asyncio.run(target_won_auction("some_id"))

================================================================================
Файл: app\smtp\router.py
================================================================================
from fastapi import APIRouter
from .verify import *
smtp_router = APIRouter(
    prefix="/mailservice",
    tags=["SMTP"]
)

smtp_router.add_api_route(
    path='/verify',
    endpoint=verify_email,
    methods=['GET']
)


================================================================================
Файл: app\smtp\send_verification_mail.py
================================================================================
from .mail_templates import send_mail
import random
import aiosmtplib
import string
from globals import tm_db
from globals import smtp_link
from datetime import timedelta, datetime

def generate_verification_token(target:str):
    """Генерация случайного токена для верификации (например, длиной 20 символов)"""
    token =''.join(random.choices(string.ascii_letters + string.digits, k=20))
    collection = tm_db['tokens'] 
    collection.insert_one({"email":target, "token": token, "expire_at": datetime.now() + timedelta(hours=24) })  

    return token

async def send_verification_mail(target:str):
    token = generate_verification_token(target)
    verification_link = f"{smtp_link}/mailservice/verify?token={token}"

    body = "Чтобы подтвердить свою почту перейдите по ссылке\n"+verification_link
    await send_mail(target, "Подтверждение почты", body)
================================================================================
Файл: app\smtp\test.py
================================================================================
import aiosmtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import asyncio


async def send_mail(recipient: str, theme: str, body: str):
    smtp_server = "smtp.beget.com"
    smtp_port = 465  # or 587 for TLS
    username = "test@monety.shop"
    password = "!Nn25111978"

    sender = "test@monety.shop"
    subject = theme

    message = MIMEMultipart()
    message["From"] = sender
    message["To"] = recipient
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))

    try:
        async with aiosmtplib.SMTP(hostname=smtp_server, port=smtp_port, use_tls=True) as server:
            await server.login(username, password)
            await server.send_message(message)
            print("Письмо отправлено успешно!")
    except Exception as e:
        print(f"Ошибка при отправке письма: {e}")


if __name__ =="__main__":
    asyncio.run(send_mail("kostyakov0203@mail.ru", "123", "123"))

================================================================================
Файл: app\smtp\verification.py
================================================================================
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
import random
import string
from mail_templates import send_mail


def generate_verification_token():
    """Генерация случайного токена для верификации (например, длиной 20 символов)"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=20))

def send_verification_email(to_email, token):
    body = f"Пожалуйста, подтвердите вашу электронную почту, перейдя по следующей ссылке: {generate_verification_token()}"
    send_mail(to_email,"Подтвердите почту", body)
   




================================================================================
Файл: app\smtp\verify.py
================================================================================
from globals import tm_db
from datetime import datetime

tokens_db = tm_db['tokens']

async def verify_email(token: str):
    # Ищем токен в базе данных
    token_data = await tokens_db.find_one({"token": token})

    if not token_data or token_data["expire_at"] <= datetime.now():
        return {"status": 'failed', "message": "Неверный или истёкший токен."}
    
    user_email = token_data.get("email")

    # Удаляем все токены для этого email
    await tokens_db.delete_many({"email": user_email})

    # Обновляем статус пользователя, что его почта подтверждена
    clients_db = tm_db['clients']
    await clients_db.update_one({"email": user_email}, {"$set": {"email_verified": True}})
    
    return {"status": "success", "message": f"Электронная почта {user_email} успешно подтверждена!"}

================================================================================
Файл: app\static\css\Acount.css
================================================================================

/* Стили для чекбоксов */
.checkbox-group {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.checkbox-group label {
    font-weight: normal;
    display: flex;
    align-items: center;
    font-size: 16px;
}

.checkbox-group input[type="checkbox"] {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
    accent-color:  #ffa735; /* Цвет чекбоксов, чтобы соответствовать основному цвету кнопок */
}

/* Убедитесь, что стили работают на мобильных устройствах */
@media (max-width: 480px) {
    .checkbox-group label {
        font-size: 14px;
    }
}

.account-details-container {
    margin-left: auto;
    margin-right: auto;
    display: flex;
    flex-direction: row;
    gap: 30px;
   
   

    border-radius: 10px;
    padding: 20px;
    flex-wrap: wrap;
    justify-content: space-around;
    max-width: 1050px;
}

.form-group {
    margin-bottom: 20px;
    width: 300px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
}

input[type="email"],
input[type="password"],
input[type="text"],
input[type="url"] {
    width: 100%;
    padding: 12px;
    margin-top: 5px;
    border: 1px solid #1b1b1b;
    border-radius: 8px;
    font-size: 16px;
}

.submit-button {
    padding: 12px 20px;
    background-color:  var(--yellow);
    color: #ffffff;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.submit-button:hover {
    background-color: var(--yellow);
    transform: scale(1.05);
}

/* ============================= */
/* Адаптивные стили с медиазапросами */
/* ============================= */

/* Для экранов шириной до 1024px */
@media (max-width: 1024px) {
    .dashboard-container {
        padding: 10px;
    }

    .account-details-container {
        flex-direction: column;
        gap: 20px;
        padding: 15px;
    }

    .form-group {
        width: 100%;
    }
}

/* Для экранов шириной до 768px */
@media (max-width: 768px) {
   

    .dashboard-content {
        padding: 20px;
        border-radius: 10px;
    }

    .dashboard-header h1 {
        font-size: 1.5em;
    }
}

/* Для экранов шириной до 480px (мобильные устройства) */
@media (max-width: 480px) {
    .dashboard-content {
        padding: 15px;
    }

    .account-details-container {
        padding: 10px;
    }

    .form-group label {
        font-size: 0.9em;
    }

    .submit-button {
        padding: 10px 15px;
        font-size: 16px;
    }
}

================================================================================
Файл: app\static\css\admin.css
================================================================================
/* Определение переменных цветов для черно-темно-желтой темы */
:root {
    --primary-color: #f0b112; /* Основной цвет (желтый) */
    --primary-color-dark: #f57f17; /* Темный основной цвет */
    --background-color-light: #212121; /* Черный фон для заголовков */
    --background-color-light-hover: #424242; /* Темный фон для четных строк */
    --background-color-hover: #616161; /* Цвет фона при наведении */
    --border-color-light: #424242; /* Цвет границы */
    --border-color-focus: #fbc02d; /* Цвет границы при фокусе */
    --text-color-light: #ffffff; /* Цвет текста для заголовков */
    --text-color-dark: #f5f5f5; /* Цвет текста для ячеек */
    --modal-background: rgba(0, 0, 0, 0.8); /* Полупрозрачный фон модального окна */
    --modal-content-background: #333333; /* Фон для модального окна */
    --shadow-color: rgba(0, 0, 0, 0.3); /* Тень для таблицы */
    --button-background: #dfa922; /* Цвет фона кнопок */
    --button-background-hover: #f57f17; /* Цвет фона кнопок при наведении */
    --input-border-color: #424242; /* Цвет рамки для инпутов */
    --input-border-color-focus: #fbc02d; /* Цвет рамки при фокусе */
    --modal-close-color: #ffffff; /* Цвет для кнопки закрытия */
    --navbar-background: #212121; /* Фон для navbar */
    --search-border-color: #616161; /* Цвет для рамки инпута поиска */
    --textarea-border-color: #424242; /* Цвет рамки для textarea */
}

table {
    width: 80%;
    max-width: 800px; /* Максимальная ширина таблицы */
    margin: 20px auto; /* Выравнивание по центру экрана */
    border-collapse: collapse;
    box-shadow: 0 4px 8px var(--shadow-color); /* Тень для визуального выделения */
}

table th, table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid var(--border-color-light);
}

.dashboard-container{
    display: flex;
    flex-direction: column;
}
table th {
    background-color: var(--background-color-light);
    font-weight: 600;
    color: var(--text-color-light);
}

table td {
    color: var(--text-color-dark);
}

table tr:nth-child(even) {
    background-color: var(--background-color-light-hover);
}

table tr:hover {
    background-color: var(--background-color-hover);
}

/* Медиазапросы для адаптивного дизайна */
@media (max-width: 1024px) {
    table {
        width: 90%;
        font-size: 14px;
    }
}

@media (max-width: 768px) {
    table {
        width: 90%;
        font-size: 14px;
    }

    .search-container {
        width: 70%;
    }
}

@media (max-width: 480px) {
    table {
        width: 95%;
        font-size: 12px;
    }
    table th, table td {
        padding: 10px;
    }
    table td {
        font-size: 12px;
    }

    .search-container {
        width: 90%;
    }

    .navbar {
        width: 100%;
        text-align: center;
    }

    .modal-content {
        width: 95%;
    }

    .search-container input[type="text"] {
        padding: 10px;
        font-size: 16px;
    }
}

.modal {
    display: none; /* Скрыто по умолчанию */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--modal-background); /* Полупрозрачный фон */
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Поверх других элементов */
    
}

.modal-content {
    background-color: var(--modal-content-background);
    display: flex;
    justify-content: space-evenly;
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    height: 70%;
    max-width: 400px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    position: relative;
    padding-bottom: 30px;
    overflow-y: auto;
}

.modal-content input {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    font-size: 14px;
    border: 1px solid var(--input-border-color);
    border-radius: 4px;
    box-sizing: border-box;
    outline: none;
    transition: border-color 0.3s ease;
}

.modal-content input:focus {
    border-color: var(--input-border-color-focus);
}

.close {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 20px;
    font-weight: bold;
    color: var(--modal-close-color);
    cursor: pointer;
}

button {
    padding: 10px 15px;
    margin-top: 15px;
    font-size: 14px;
    color: #ffffff;
    background-color: var(--button-background);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: var(--button-background-hover);
}

.navbar {
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
}

.search-container {
    margin-bottom: 10px;
    margin: 20px;
    text-align: left;
    width: 45%;
    margin-left: auto;
    margin-right: auto;
}

.search-container input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid var(--search-border-color);
    border-radius: 4px;
    font-size: 14px;
}

#previewImg {
    max-width: 100px;
    margin-top: 10px;
    display: block;
}

textarea {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid var(--textarea-border-color);
    border-radius: 4px;
    resize: none;
    box-sizing: border-box;
    min-height: 250px;
    overflow: overlay;
}

================================================================================
Файл: app\static\css\alt_auction.css
================================================================================

.auction-header {
    margin-bottom: 10px;
}

.auction-timing {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0;
}

.status-button {
    background-color: #ffcc00;
    color: #333;
    border: none;
    border-radius: 8px;
    padding: 8px 12px;
    cursor: default;
    font-size: 14px;
}

.photo-placeholder {
    
    height: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 10px;
    color: #ffffff;
}

/* Информация о монете */
.coin-info {
   
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.coin-info ul {
    list-style: none;
    padding: 0;
    margin: 0 0 20px 0;
}

.coin-info ul li {
    margin-bottom: 10px;
}

.coin-prices {
    margin-top: 0px;
}

/* Основной контент аукциона */
.auction-main-content {
    display: flex;
    justify-content: space-between;
}

/* Секция с фото */
.coin-photo {
    flex: 1;
    margin-right: 20px;
}

/* Фото монеты (плейсхолдер) */
.photo-placeholder {
    width: 95%;
    height: 300px;
    
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 18px;
    color: #666;
}

/* Информация о монете */
.coin-info {
    display: grid;
    min-width: 50%;
    max-width: 65%;
    grid-template-columns: repeat(1, 1fr); /* Create 2 equal-width columns */
    grid-template-rows:  auto; /* 2 rows */
    gap: 0px; /* Add space between grid items */
    
}
.auction-info {
    grid-column: span 2; /* Make item 1 span across both columns */
}
.coin-prices {
    grid-column: span 2; /* Make item 1 span across both columns */
}

.coin-details {
    grid-column: span 2; /* Make item 2 span across both columns */
}
/* Секция истории ставок и формы для ввода ставок */
.auction-history-section {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

/* История ставок */
.history {
    flex: 1;
    margin-right: 0px;
   
    padding: 15px;
    padding-bottom: 30px;
    margin-bottom: 30px;
    border-radius: 10px;
    height: 300px;
    overflow-y: auto;
}

/* Поле ввода ставки и кнопка */
.bid-section {
    flex: 0.5;
    gap: 30px;
    padding: 15px;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
}

/* Стили для ввода ставки */
.bid-input {
    width: 95%;
    padding: 10px;
    font-size: 16px;
    margin-bottom: 10px;
    border: 1px solid #070707;
    border-radius: 5px;
}

/* Кнопка ставки */
.bid-button {
    padding: 10px 20px;
    background-color: var(--yellow);
    border: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.bid-button:hover {
    background-color: #e6b800;
}

/* Таблица ставок */
#bid-table {
    width: 95%;
    border-collapse: collapse;
    margin-top: 20px;
}

#bid-table th,
#bid-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #7c7c7c;
}

#bid-table th {
   
   
    color: #e0e0e0;
    font-weight: bold;
}

#bid-table tr:nth-child(even) {
    background-color: #292929;
}

#bid-table tr:hover {
    background-color: #636363;
}

/* Сообщение "Ставок пока нет" */
#bid-table td[colspan="3"] {
    text-align: center;
    font-style: italic;
    color: #dbdbdb;
}

.coin-photo {
   
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    margin-bottom: 0;
    align-items: center;
    display: flex; /* Используем flex для центрирования содержимого, если это необходимо */
    justify-content: center; /* Центрирование по горизонтали */
    overflow: hidden; /* Скрыть избыточные части изображения */
    width: fit-content; /* Контейнер будет подстраиваться под размер изображения */
    height: fit-content; /* Контейнер будет подстраиваться под размер изображения */
}

#coin-image {
    object-fit: cover; /* Используйте cover, чтобы заполнить контейнер без искажения */
}

.zoom-container {
    position: relative; /* Для позиционирования лупы относительно контейнера */
    overflow: hidden; /* Скрыть части изображения, выходящие за пределы контейнера */
}

.zoom-lens {
    position: absolute;
    border: 2px solid #ffcc00; /* Цвет границы лупы */
    border-radius: 50%; /* Сделать лупу круглой */
    cursor: none; /* Убрать указатель курсора при наведении */
    width: 100px; /* Размер лупы */
    height: 100px; /* Размер лупы */
    opacity: 0.6; /* Полупрозрачность */
    pointer-events: none; /* Игнорировать события мыши для лупы */
}

.zoom-image {
    position: absolute;
    width: 200%; /* Увеличение размера изображения */
    height: 200%; /* Увеличение размера изображения */
    transform: translate(-50%, -50%); /* Центрирование увеличенного изображения */
    display: none; /* Скрыто по умолчанию */
    pointer-events: none; /* Игнорируем события мыши на увеличенном изображении */
}
/* CSS for improved header layout */
.auction-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.auction-info {
    display: flex;
    flex-direction: row;
    

    text-align: center;
}

.auction-dates {
    font-size: 1.1em;
    margin-bottom: 10px;
}

.status {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 0px;
}

.status-button {
    padding: 8px 16px;
    border: none;
    background-color: #ffcc00;
    color: #333;
    font-weight: bold;
    border-radius: 4px;
    cursor: pointer;
    margin-bottom: 5px;
}

/* a{
    text-decoration: none;
    color: rgb(170, 153, 0);
}
 */

/* a:visited {
    color: rgb(102, 92, 0);
  }
  
  a:focus {
    border-bottom: 1px solid;
    background: rgb(255, 243, 133);
  }
  
  a:hover {
    border-bottom: 1px solid;
    background: rgb(255, 243, 133);
  }
  
  a:active {
    background: rgb(102, 92, 0);
    color: rgb(255, 243, 133);
  } */

@media (max-width: 900px) {
  
    .auction-main-content {
        flex-direction: column; /* Строки выстраиваются вертикально */
        align-items: center; /* Центрируем содержимое */
    }
    
    .coin-photo, .coin-info, .auction-history-section {
        max-width: 100%;
        width: 95%; /* Увеличиваем ширину для заполнения экрана */
        margin-right: 0; /* Убираем правый отступ */
        margin-bottom: 20px; /* Добавляем отступ внизу для отделения элементов */
    }
    .auction-history-section{
        flex-direction: column-reverse;
    }
    
    .auction-timing, .coin-details, .coin-prices {
        text-align: left; /* Центрируем текст */
    }

    .bid-section {
        width: 100%;
        padding: 10px; /* Меньший отступ */
    }
    
    .history {
        width: 100%;
        margin-bottom: 15px; /* Меньший отступ снизу */
        margin-top: 15px; /* Меньший отступ снизу */
    }

    .status-button, .bid-button {
        font-size: 14px;
        padding: 8px 12px; /* Меньшие отступы кнопок */
    }

    .coin-photo img {
        max-width: 95%;
    }

    .bid-input {
        width: 95%;
        font-size: 14px;
        padding: 8px; /* Уменьшение отступов для ввода */
    }
}

/* Для устройств с шириной до 480px */
@media (max-width: 480px) {
    /* Уменьшение заголовков */
    h1, h2 {
        font-size: 1.2em;
        margin-left: 0px;
    }

    .auction-header h1 {
        font-size: 1.4em;
    }

    .auction-main-content, .auction-timing, .history, .bid-section {
        flex-direction: column;
        align-items: center;
    }

    .coin-photo, .coin-info, .history, .bid-section {
        padding: 10px;
        margin-bottom: 10px;
    }
    
    .coin-info, .coin-photo, .auction-timing, .status-button {
        width: 95%;
    }

    .status-button, .bid-button {
        font-size: 16px;
        padding: 6px 8px; /* Еще меньшие отступы кнопок */
    }

    #bid-table th, #bid-table td {
        font-size: 16px;
        padding: 6px; /* Меньшие отступы в таблице */
    }

    /* Центрирование и уменьшение некоторых текстовых элементов */
    .coin-details, .coin-prices, .history td, .history th {
        font-size: 16px; /* Уменьшение шрифта */
    }

    /* Уменьшение размеров таблицы ставок */
    #bid-table th, #bid-table td {
        padding: 6px;
    }

    /* Лупа и увеличение изображения */
    .zoom-lens {
        width: 50px; /* Уменьшение размера лупы */
        height: 50px;
    }

    /* Скрытие увеличенного изображения при наведении */
    .zoom-image {
        display: none;
    }
}
.carousel {
    position: relative;
    width: 100%;
    height: 100%;
    margin: 20px auto;
    overflow: hidden;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.carousel-track {
    display: flex;
    transition: transform 0.3s ease-in-out;
}

.carousel-slide {
    min-width: 100%;
    box-sizing: border-box;
}

.carousel-slide img {
   
    max-height: 220px;
    display: block;
    margin: auto;
}

.carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    border: none;
    color: white;
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 50%;
    z-index: 10;
}

.carousel-button.prev {
    left: 10px;
}

.carousel-button.next {
    right: 10px;
}

.carousel-button:hover {
    background-color: black;
}

================================================================================
Файл: app\static\css\AuctionCard.css
================================================================================

.card-list {
    width: 90%;
    max-width: 400px;
    
  }
  
  .card {
    background-color:var(--card_background);
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 20px 50px 0 rgba(0, 0, 0, 0.1);
    border-radius: 15px;
    overflow: hidden;
    padding: 1.2rem;
    position: relative;
    transition: 0.15s ease-in;
    width: 100%;
   
  }
  
  .card:hover, .card:focus-within {
    box-shadow: 0 0 0 2px var(--yellow), 0 10px 60px 0 rgba(0, 0, 0, 0.1);
    transform: translatey(-5px);
  }
  
  .card-image {
    border-radius: 10px;
    margin: 0px;
    overflow: hidden;  /* Чтобы изображение не выходило за границы */
    min-height: 150px;
    max-height: 200px;
    width: 100%; /* Чтобы картинка занимала всю ширину контейнера */
    display: flex;
    justify-content: center; /* Центрирование изображения по горизонтали */
    align-items: center; /* Центрирование изображения по вертикали */
  }
  
  .card-image img {
    object-fit:fill; /* Картинка масштабируется, сохраняя пропорции */
    max-height: 200px; /* Ограничение высоты картинки по размеру контейнера */
    max-width: 100%; /* Ограничение ширины картинки по размеру контейнера */
  }
  
  
  .card-header {
    margin-top: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .card-header a {
    font-weight: 600;
    font-size: 1.375rem;
    line-height: 1.25;
    padding-right: 1rem;
    text-decoration: none;
    color: inherit;
  }
  
  .icon-button {
    border: 0;
    background-color: #fff;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
    font-size: 1.25rem;
    transition: 0.25s ease;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.15);
    z-index: 1;
    cursor: pointer;
    color: #565656;
  }
  
  .icon-button:hover, .icon-button:focus {
    background-color: #EC4646;
    color: #FFF;
  }
  
  .card-footer {
    margin-top: 1.25rem;
    border-top: 1px solid #c7950a;
    padding-top: 1.25rem;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .card-meta {
    display: flex;
    align-items: center;
    color: #787878;
  }
  
  .card-meta:first-child:after {
    display: block;
    content: "";
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: currentcolor;
    margin-left: 0.75rem;
    margin-right: 0.75rem;
  }
  
  .card-meta svg {
    flex-shrink: 0;
    width: 1em;
    height: 1em;
    margin-right: 0.25em;
  }
  
  #completedAuctions .card img{
    filter: grayscale(1);
  }
  
  #completedAuctions .card:hover, .card:focus-within {
    box-shadow: 0 0 0 2px #7a7a7a, 0 10px 60px 0 rgba(0, 0, 0, 0.1);
    transform: translatey(-5px);
  }
================================================================================
Файл: app\static\css\Auctions.css
================================================================================

.auction-grid {
    padding-top: 15px;
    margin-left: 10px;
    display: grid;
    
    grid-template-columns: repeat(4, minmax(100px, 1fr));
    gap: 16px; /* Расстояние между карточками */
  }
  
@media (max-width: 1400px) {
    .auction-grid {
        grid-template-columns: repeat(3, minmax(100px, 1fr)); /* 3 колонки на больших экранах */
        transition: 0.1s;
    }
  }
  
  @media (max-width: 1200px) {
    .auction-grid {
        grid-template-columns: repeat(2, minmax(100px, 1fr)); /* 2 колонки на средних экранах */
    }
  }
  
  @media (max-width: 800px) {
    .auction-grid {
        grid-template-columns: 1fr; /* 1 колонка на маленьких экранах */
        grid-template-columns: repeat(1, minmax(200px, 1fr)); 
        z-index: 9;
        transition: 0.1s;
      
    }
    .nav-bar{
      z-index: 10;
    }
}
================================================================================
Файл: app\static\css\create_auction.css
================================================================================
/* Переменные для цветовой палитры */
:root {
    --color-bg-light: #1e1e1e; /* Темный фон */
    --color-bg-card: #292929; /* Темный фон карточек */
    --color-text-primary: #d8d8d8; /* Светлый текст */
    --color-border: #444; /* Цвет границы */
    --color-accent-primary: #6c63ff; /* Основной акцент */
    --color-accent-secondary: #8379ff; /* Акцент при наведении */
    --color-accent-green: #4caf50; /* Зеленая кнопка */
    --color-accent-green-hover: #45a049; /* Зеленая кнопка при наведении */
    --color-shadow: rgba(0, 0, 0, 0.5); /* Мягкая тень */
    --navbar-width-min: 250px; /* Минимальная ширина сайдбара */
}

/* Базовые стили */
body {
    font-family: 'Arial', sans-serif;
    background-color: var(--color-bg-light); /* Темный фон страницы */
    color: var(--color-text-primary); /* Светлый текст */
    margin: 0;
    padding: 10px;
    box-sizing: border-box;
}

.hidden {
    display: none; /* Скрыть контент */
}

/* Контейнер дашборда */
.dashboard-container {
    display: flex;
    width: calc(100% - var(--navbar-width-min)); /* Вычитаем ширину сайдбара */
    max-width: 80%;
    margin: 10px;
    margin-left: var(--navbar-width-min);
    transition: 0.2s;
    margin-left: auto;
    margin-right: auto;
}

/* Основной контент */
.dashboard-content {
    flex: 1;
    padding: 0px;
    overflow-y: auto;
}

.dashboard-header {
    margin-bottom: 10px;
}

/* Карточка создания аукциона */
.create-auction-container {
    background-color: var(--color-bg-card); /* Темный фон карточки */
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--color-shadow); /* Мягкая тень */
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: var(--color-text-primary); /* Светлый текст */
}

/* Поля ввода */
input[type="text"],
input[type="number"],
input[type="url"],
input[type="datetime-local"] {
    width: 100%;
    padding: 12px;
    margin-top: 5px;
    border: 1px solid var(--color-border); /* Темная граница */
    border-radius: 8px;
    font-size: 16px;
    background-color: var(--color-bg-light); /* Темный фон полей */
    color: var(--color-text-primary); /* Светлый текст */
}

input[type="text"]:focus,
input[type="number"]:focus,
input[type="url"]:focus,
input[type="datetime-local"]:focus {
    border-color: var(--color-accent-primary); /* Основной акцент */
    box-shadow: 0 0 8px rgba(108, 99, 255, 0.5); /* Подсветка */
    outline: none;
}

/* Основная кнопка */
.create-button {
    padding: 12px 20px;
    background-color: var(--color-accent-primary); /* Основной акцент */
    color: #fff; /* Белый текст */
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.create-button:hover {
    background-color: var(--color-accent-secondary); /* Вторичный акцент */
    transform: scale(1.05);
}

/* Кнопка добавления фото */
.add-photo-button {
    padding: 8px 15px;
    background-color: var(--color-accent-green); /* Зеленая кнопка */
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.add-photo-button:hover {
    background-color: var(--color-accent-green-hover); /* Зеленая кнопка при наведении */
}

/* Альбом */
#album-container {
    margin-top: 20px;
}

#album input {
    margin-top: 10px;
    background-color: var(--color-bg-light); /* Темный фон ввода */
    color: var(--color-text-primary); /* Светлый текст */
    border: 1px solid var(--color-border); /* Граница */
}

#album img {
    max-width: 100px;
    border-radius: 5px;
    border: 1px solid var(--color-border); /* Темная граница изображений */
}

================================================================================
Файл: app\static\css\custom_alert.css
================================================================================
/* Затемнение фона */
.alert-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    animation: fadeIn 0.3s;
}

.alert-overlay-hide {
    animation: fadeOut 0.3s forwards;
}

/* Стиль окна сообщения */
.alert-box {
    background: #ffffff;
    padding: 20px 30px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    max-width: 80%;
    text-align: center;
    animation: slideIn 0.3s;
}

.alert-box-hide {
    animation: slideOut 0.3s forwards;
}

.alert-message {
    font-size: 16px;
    color: #333;
    margin-bottom: 20px;
}

/* Стиль кнопки закрытия */
.alert-button {
    background-color: #f1c40f;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.alert-button:hover {
    background-color: #ffe168;
}

/* Анимации */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

@keyframes slideIn {
    from { transform: translateY(-20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes slideOut {
    from { transform: translateY(0); opacity: 1; }
    to { transform: translateY(-20px); opacity: 0; }
}

================================================================================
Файл: app\static\css\enter_reg_page.css
================================================================================
/* Переменные для цветовой палитры */
:root {
    --color-bg-dark: #1B1B1B; /* Темный фон */
    --color-bg-light: #292929; /* Светлый темный фон */
    --color-text-primary: #D8D8D8; /* Основной цвет текста */
    --color-text-secondary: #555; /* Вторичный цвет текста */
    --color-accent: #ffa530; /* Акцентный цвет */
    --color-accent-light: #ffb14b; /* Светлый акцент */
    --color-shadow: rgba(0, 0, 0, 0.5); /* Тень */
    --color-border: #D8D8D8; /* Цвет границы */
}

/* Базовые стили */
body {
    font-family: 'Arial', sans-serif;
    background-color: var(--color-bg-dark); /* Темный фон */
    color: var(--color-text-primary); /* Основной цвет текста */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
    padding: 20px;
}

@media (min-width: 768px) {
    .container {
        flex-direction: row;
        justify-content: center;
        padding: 40px;
    }
}

/* Секция информации */
.info-section {
    flex: 1;
    background-color: var(--color-bg-light); /* Светлый темный фон */
    padding: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--color-shadow); /* Тень */
    max-width: 500px;
    text-align: center;
    width: 98%
}

.info-content {
    max-width: 450px;
}

.illustration {
    max-width: 450px;
    height: auto;
    margin-bottom: 20px;
    margin-left: auto;
    margin-right: auto;
    border-radius: 13px;
}

/* Заголовки и текст */
h2 {
    font-size: 24px;
    color: var(--color-accent); /* Акцентный цвет */
    margin-bottom: 10px;
}

p {
    color: var(--color-text-primary); /* Основной текст */
    font-size: 16px;
}

/* Форма */
.form-section {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 500px;
    width: 100%;
}

.form-group{
    margin-top: 10px;
}

.form-container {
    background-color: var(--color-bg-light); /* Светлый темный фон */
    padding: 10px;
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--color-shadow); /* Тень */
    width: 100%;
    max-width: 400px;
    transition: all 0.3s ease;
}

.tabs {
    display: flex;
    justify-content: space-around;
    margin-bottom: 20px;
}

.tab-button {
    background: none;
    border: none;
    padding: 10px;
    font-size: 18px;
    cursor: pointer;
    color: var(--color-text-secondary); /* Вторичный текст */
    outline: none;
    transition: color 0.3s ease;
}

.tab-button.active {
    font-weight: bold;
    border-bottom: 3px solid var(--color-accent); /* Акцентный цвет */
    color: var(--color-accent);
}

.tab-button:hover {
    color: var(--color-accent-light); /* Светлый акцент */
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}


/* Поля ввода */
input[type="text"],
input[type="email"],
input[type="password"],
input[type="phone"],
input[type="url"] {
    width: 95%;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid var(--color-border); /* Цвет границы */
    border-radius: 8px;
    font-size: 16px;
    background-color: var(--color-bg-dark); /* Темный фон */
    color: var(--color-text-primary); /* Основной текст */
}

input[type="text"]:focus,
input[type="email"]:focus,
input[type="password"]:focus,
input[type="phone"]:focus,
input[type="url"]:focus {
    border-color: var(--color-accent); /* Акцентный цвет */
    box-shadow: 0 0 8px rgba(255, 187, 99, 0.5); /* Мягкая подсветка */
    outline: none;
}

.CookiesNotif{
    text-align: center;
}

/* Кнопка отправки */
.submit-button {
    width: 100%;
    padding: 12px;
    background-color: var(--color-accent); /* Акцентная кнопка */
    color: #FFF; /* Белый текст */
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    margin-top: 10px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.submit-button:hover {
    background-color: var(--color-accent-light); /* Светлее при наведении */
    transform: scale(1.05);
}
.password-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}

.password-toggle {
    position: absolute;
    right: 10px;
    background: none;
    border: none;
    cursor: pointer;

    outline: none;
}
.password-toggle svg path{
    fill: #555;
    transition: fill 0.3s ease;
}
.password-toggle:hover svg path{
    fill: #ffbb63;
}
/* Отображение на мобильных */
@media (max-width: 767px) {
    .info-section {
        padding: 20px;
        margin-bottom: 20px;
    }

    .form-container {
        padding: 20px;
    }

    .tabs {
        flex-direction: column;
    }

    .tab-button {
        margin-bottom: 10px;
    }
}

================================================================================
Файл: app\static\css\fonts.css
================================================================================
html{
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
}
================================================================================
Файл: app\static\css\Holder.css
================================================================================
.Holder {
    right: 3px;
    position: fixed;
    display: grid;
    width: calc(100% - 220px);
    height: 98%;
    overflow-y: auto; /* Прокрутка по вертикали */
    border-radius: 10px; /* Скругление углов */
    border: 1px solid #292929; /* Бордер */
    background-color: #181818;
    margin: 5px;
    padding: 10px; /* Добавлен небольшой отступ, чтобы бордер не перекрывал содержимое */
    transition: 0.1s;
}

/* Для Webkit браузеров (Chrome, Safari, Edge) */
.Holder::-webkit-scrollbar {
    width: 8px;
}

.Holder::-webkit-scrollbar-track {
    background-color: #292929;
    border-radius: 10px;
}

.Holder::-webkit-scrollbar-thumb {
    background-color: #c7950a;
    border-radius: 10px;
    border: 2px solid #292929;
}

/* Для Firefox */
.Holder {
    scrollbar-width: thin; /* Тонкая полоса прокрутки */
    scrollbar-color: #c7950a #292929; /* Цвет полосы прокрутки и её фона */
}

@media (max-width: 800px) {
    .Holder {
        padding-right: 5px;
        padding-left: 5px;
        width: calc(100% - 80px);
        transition: 0.1s;
    }
}

@media (max-width: 500px) {
    .Holder {
        padding-right: 5px;
        width: calc(100% - 65px);
        transition: 0.1s;
    }
}
a:active,
a:hover,
a {
    text-decoration: none;
    color: #fff;
}

h2{
    margin-top: 0px;
    margin-left: 30px;
    width: fit-content;
  
  }
  /* Контейнер для страницы личного кабинета */
  .dashboard-container {
    display: flex;
    margin: 5px;
    height: 100vh;
    transition: 0.2s;
    
  }
  
 
  .dashboard-content {
    width: 100%;
    padding: 10px;
    padding-top: 0px;
  }
  
  .auction-grid {
    padding-top: 5px;
    margin-left: 5px;
    display: grid;
    
    grid-template-columns: repeat(4, minmax(100px, 1fr));
    gap: 16px; /* Расстояние между карточками */
  }
  
  /* Прочие стили для скрытого контента и загрузочного экрана */
  .hidden {
    display: none; /* Скрыть контент */
  }
  
  .loading-screen {
    
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    z-index: 1000; /* Обеспечить, чтобы экран загрузки был на переднем плане */
  }
  
  .spinner {
    border: 5px solid transparent; 
    border-top: 5px solid #ffbe0c; 
    border-radius: 50%;
    width: 50px; /* Размер спиннера */
    height: 50px; /* Размер спиннера */
    animation: spin 1s linear infinite; /* Анимация вращения */
  }
  
  /* Анимация вращения */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
    
  *, *:after, *:before {
    box-sizing: border-box;
  }
  

================================================================================
Файл: app\static\css\root.css
================================================================================
:root {
    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;
  
    color-scheme: light dark;
    color: rgba(255, 255, 255, 0.87);
    background-color: var(--background-menu);
  
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    --background-menu: #0D0D0D;
    --line-menu: #1B1B1B;
    --hover-menu-items: #252525;
    --yellow: #f5b400;
    --card_background: #292929;
  }
  
  
  body {
    margin: 0;
    display: flex;
    place-items: center;
    min-width: 320px;
    min-height: 100vh;
    background-color: #181818;
    transition: background-color 0.3s ease;
  }
  
  
  h1 {
    font-size: 3.2em;
    line-height: 1.1;
  }
  
  button {
    border-radius: 8px;
    border: 1px solid transparent;
    padding: 0.6em 1.2em;
    font-size: 1em;
    font-weight: 500;
    font-family: inherit;
    background-color: #1a1a1a;
    cursor: pointer;
    transition: border-color 0.25s;
  }
  button:hover {
    border-color: #646cff;
  }
  button:focus,
  button:focus-visible {
    outline: 4px auto -webkit-focus-ring-color;
  }
  
  @media (prefers-color-scheme: light) {
    :root {
      color: #213547;
      background-color: #ffffff;
    }
    a:hover {
      color: #747bff;
    }
    button {
      background-color: #f9f9f9;
    }
  }
  
================================================================================
Файл: app\static\css\Sidebar.css
================================================================================
div.Sidebar {
    position: fixed;
    left: 0px;
    top: 0px;
    height: 100%;
    width: 200px;
    background-color: var(--background-menu);
    box-sizing: border-box;
    transition: width 0.1s ease; /* Плавное изменение ширины */
}

div.Sidebar > div.Header {
    position: relative;
    width: 100%;
    border-bottom: 1px solid var(--line-menu);
}

div.Sidebar > div.Header > img {
    height: 50px;
    margin-top: 10px;
    margin-left: 13px;
}

div.Sidebar > div.Header > span {
    position: absolute;
    top: 20px;
    left: 80px;
    padding: 0px;
    margin: 0px;
}

/* Навигационное меню */
div.Sidebar > ul.NavigationList {
    margin-top: 30px;
    list-style-type: none;
    padding: 0px;
}

div.Sidebar > ul.NavigationList > li {
    position: relative;
    height: 40px;
    margin-left: 10px;
    margin-top: 20px;
    cursor: pointer;
    transition: .1s all;
    width: calc(100% - 20px);
    border-radius: 8px;
    padding-left: 40px; /* Отступ для иконки */
}

div.Sidebar > ul.NavigationList > li:hover {
    background-color: var(--hover-menu-items);
}

div.Sidebar > ul.NavigationList > li > a:active,
div.Sidebar > ul.NavigationList > li > a:hover,
div.Sidebar > ul.NavigationList > li > a {
    text-decoration: none;
    color: #fff;
}

div.Sidebar > ul.NavigationList > li > a > img {
    position: absolute;
    left: 5px;
    top: 5px;
    height: 30px;
}

div.Sidebar > ul.NavigationList > li > a > span {
    position: absolute;
    top: 7px;
    left: 50px;
    white-space: nowrap;
    display: inline-block;
    transition: opacity 0.1s ease;
}

/* Блок для пользователя */
div.Sidebar > div.UserBulb {
    position: absolute;
    bottom: 0px;
    width: 100%;
    border-top: 1px solid var(--line-menu);
}

div.Sidebar > div.UserBulb > div.button {
    border-radius: 20px;
    border: 1px solid var(--line-menu);
    padding: 5px;
    background-color: var(--hover-menu-items);
    margin: 15px 0;
    width: 140px;
    margin-left: 50%;
    transform: translateX(-50%);
}

div.Sidebar > div.UserBulb > div.button > img {
    height: 25px;
    margin-left: 10px;
    margin-top: 5px;
}

div.Sidebar > div.UserBulb > div.button > span {
    position: absolute;
    top: 10px;
    left: 60px;
    padding: 0px;
    margin: 0px;
}

/* Медиазапрос для маленьких экранов */
@media (max-width: 800px) {
    div.Sidebar {
        width: 60px; /* Сужаем сайдбар */
        transition: 0.1s;
    }

    div.Sidebar > div.Header > span {
        display: none; /* Скрываем текст в заголовке */
    }

    div.Sidebar > ul.NavigationList > li > a > span {
        display: none; /* Скрываем текст в пунктах меню */
    }

    div.Sidebar > ul.NavigationList > li {
        padding-left: 20px; /* Уменьшаем отступ для иконок */
    }

    div.Sidebar > ul.NavigationList > li > a > img {
        height: 25px; /* Уменьшаем размер иконок */
    }

    div.Sidebar > div.UserBulb > div.button {
        width: 45px; /* Уменьшаем размер кнопки */
    }

    div.Sidebar > div.UserBulb > div.button > img {
        height: 20px; /* Уменьшаем иконку */
        margin-left: 8px;
        margin-top: 5px;
    }
    div.Sidebar > div.UserBulb > div.button > span {
        display: none;
    }
    div.Sidebar > div.Header > img {
        height: 33px;

    }

}

@media (max-width: 500px) {
    div.Sidebar {
        width: 50px; /* Еще меньше на очень узких экранах */
        transition: 0.1s;
    }

    div.Sidebar > ul.NavigationList > li {
        padding-left: 10px; /* Еще меньше отступ для иконок */
    }
    div.Sidebar > ul.NavigationList > li > a {
        left: 0px; /* Еще меньше отступ для иконок */
    }

    div.Sidebar > ul.NavigationList > li > a > img {
        height: 25px; /* Еще меньше иконки */
    }
    div.Sidebar > div.UserBulb > div.button > span {
        display: none;
    }
    div.Sidebar > div.Header > img {
        height: 25px;

    }

}

================================================================================
Файл: app\static\js\account.js
================================================================================
document.addEventListener("DOMContentLoaded", function () {
    loadAccountData();
});

// Функция для загрузки данных пользователя
function loadAccountData() {
    fetch("/auth/get_data", {
        method: "GET",
        headers: {
            "Authorization": "Bearer " + localStorage.getItem("authToken"),
            "Content-Type": "application/json",
        },
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
        if (data.detail=="Invalid credentials"){
            
            window.open('/login',"_self")
        }
        if (data) {
            // Заполняем поля данными пользователя
            document.getElementById("avito-url").value = data.avito_url || '';
            document.getElementById("phone-number").value = data.phone_number ;
            document.getElementById("bid-notification").checked = data.mail_receive_bet_beated ;
            document.getElementById("auction-start-notification").checked = data.mail_receive_auction_started ;
        } else {
            customAlert("Ошибка загрузки данных пользователя. Попробуйте обновить страницу.");
        }
    })
    .catch(error => {
        console.error("Ошибка при загрузке данных:", error);
    });
}

// Функция для обработки изменения данных профиля
document.getElementById("accountForm").addEventListener("submit", function (e) {
    e.preventDefault();
    let nickname = document.getElementById("nickname").value;
    let avitoUrl = document.getElementById("avito-url").value;
    let phone = document.getElementById("phone-number").value;
    let mail_receive_auction_started = document.getElementById("auction-start-notification").checked;
    let mail_receive_bet_beated = document.getElementById("bid-notification").checked;

    fetch("/mongo/clients/update", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + localStorage.getItem("authToken"),
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ 
            "nickname": nickname, 
            "avito_url": avitoUrl ,
            "phone_number": phone,
            "mail_receive_auction_started": mail_receive_auction_started,
            "mail_receive_bet_beated": mail_receive_bet_beated
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
        if (data.success) {
            customAlert("Данные обновлены успешно!");
            location.reload()
        } else {
            customAlert(data.message);
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
    });
});

// Функция для обработки изменения пароля
document.getElementById("passwordForm").addEventListener("submit", function (e) {
    e.preventDefault();
    let currentPassword = document.getElementById("current-password").value;
    let newPassword = document.getElementById("new-password").value;
    let confirmPassword = document.getElementById("confirm-password").value;

    if (newPassword !== confirmPassword) {
        customAlert("Пароли не совпадают!");
        return;
    }

    fetch("/mongo/clients/change_password", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + localStorage.getItem("authToken"),
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ "old_password": currentPassword, "new_password": newPassword }),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
        if (data.success) {
            customAlert("Вы сменили пароль и будете перенаправлены на логин")
            handleLogout();
        } else {
            customAlert("Ошибка при смене пароля. Проверьте текущий пароль.");
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
    });
});


================================================================================
Файл: app\static\js\admin.js
================================================================================
const dashboardContent = document.getElementById("dashboard-content");
const auctionsTable = document.getElementById("auctionsTable");
const usersTable = document.getElementById("usersTable");
const activeClientsTable = document.getElementById("activeClientsTable");

function showAuctionsTable() {
    auctionsTable.style.display = "table";
    usersTable.style.display = "none";
    activeClientsTable.style.display = "none";
    document.getElementById("auctionSearchContainer").style.display = "block";
    document.getElementById("userSearchContainer").style.display = "none";
    document.getElementById("activeuserSearchContainer").style.display = "none";

    getAllAuctions(); 
}

function showUsersTable() {
    usersTable.style.display = "table";
    auctionsTable.style.display = "none";
    activeClientsTable.style.display = "none";
    document.getElementById("auctionSearchContainer").style.display = "none";
    document.getElementById("userSearchContainer").style.display = "block";
    document.getElementById("activeuserSearchContainer").style.display = "none";
    getAllClients(); 
}

async function showActiveClientsTable() {
    usersTable.style.display = "none";
    auctionsTable.style.display = "none";
    // Отправляем запрос к серверу, чтобы получить список активных пользователей
    const response = await fetch("/mongo/clients/active_clients", { method: "POST" });
    const activeClients = await response.json();
    document.getElementById("activeuserSearchContainer").style.display = "block";
    document.getElementById("userSearchContainer").style.display = "none";
    document.getElementById("auctionSearchContainer").style.display = "none";

    // Находим или создаем контейнер для таблицы активных пользователей
    const activeClientsTable = document.getElementById("activeClientsTableBody");
    activeClientsTable.innerHTML = ""; // Очищаем таблицу

    // Заполняем таблицу данными активных пользователей
    activeClients.forEach(client => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${client.id}</td>
            <td>${client.nickname}</td>
            <td>${client.email}</td>
            <td>${client.phone_number}</td>
            <td>${client.bet_count}</td>
        `;
        activeClientsTable.appendChild(row);
    });

    // Отображаем таблицу
    document.getElementById("activeClientsTable").style.display = "table";
}
// Filter auctions by search input
function filterAuctions() {
    const filter = document.getElementById("auctionSearchInput").value.toLowerCase();
    const rows = document.getElementById("auctionsTableBody").getElementsByTagName("tr");
    Array.from(rows).forEach(row => {
        const auctionName = row.cells[1].textContent.toLowerCase();
        row.style.display = auctionName.includes(filter) ? "" : "none";
    });
}

// Filter users by search input
function filterUsers() {
    const filter = document.getElementById("userSearchInput").value.toLowerCase();
    const rows = document.getElementById("usersTableBody").getElementsByTagName("tr");
    Array.from(rows).forEach(row => {
        const nickname = row.cells[1].textContent.toLowerCase();
        const email = row.cells[2].textContent.toLowerCase();
        const phone = row.cells[3].textContent.toLowerCase();
        row.style.display = nickname.includes(filter) || email.includes(filter) || email.includes(filter) ? "" : "none";
    });
}
// Filter active users by search input
function filterActiveUsers() {
    const filter = document.getElementById("activeuserSearchInput").value.toLowerCase();
    const rows = document.getElementById("activeClientsTableBody").getElementsByTagName("tr");
    Array.from(rows).forEach(row => {
        const nickname = row.cells[1].textContent.toLowerCase();
        row.style.display = nickname.includes(filter) ? "" : "none";
    });
}

// Отображение списка аукционов в таблице с вызовом deleteAuction
async function getAllAuctions() {
    const response = await fetch("/mongo/auction/short_get_all", { method: "GET" });
    const auctions = await response.json();
    const tableBody = document.getElementById("auctionsTableBody");
    tableBody.innerHTML = ""; // Очистка таблицы

    auctions.reverse().forEach(auction => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${auction.a_id}</td>
            <td>${auction.short_name}</td>
            <td><button onclick="editAuction('${auction.a_id}')">Edit</button></td>
            <td><button onclick="deleteAuction('${auction.a_id}', '${auction.short_name}')">Delete</button></td>
        `;
        tableBody.appendChild(row);
    });
}

// Функция для удаления аукциона с подтверждением
async function deleteAuction(id, auctionName) {
    // Создаем модальное окно подтверждения
    const confirmation = prompt(`Введите название аукциона "${auctionName}" для подтверждения удаления:`);

    // Проверяем, совпадает ли введенное значение с именем аукциона
    if (confirmation === auctionName) {
        const response = await fetch(`/mongo/auction/delete?a_id=${id}`, { method: "DELETE" });
        if (response.ok) {
            customAlert("Аукцион успешно удален.");
            getAllAuctions(); // Обновление списка после удаления
        } else {
            customAlert("Ошибка при удалении аукциона.");
        }
    } else {
        customAlert("Удаление отменено: имя аукциона не совпадает.");
    }
}

/// Функция для бана пользователя с подтверждением
async function banClient(id, clientNickname) {
    // Создаем модальное окно подтверждения
    const confirmation = prompt(`Введите никнейм пользователя "${clientNickname}" для подтверждения блокировки:`);

    // Проверяем, совпадает ли введенное значение с никнеймом пользователя
    if (confirmation === clientNickname) {
        const response = await fetch(`/mongo/clients/ban?id=${id}`, { method: "DELETE" });
        if (response.ok) {
            customAlert("Пользователь успешно заблокирован.");
            getAllClients(); // Обновление списка после блокировки
        } else {
            customAlert("Ошибка при блокировке пользователя.");
        }
    } else {
        customAlert("Блокировка отменена: введенный никнейм не совпадает.");
    }
}

// Отображение списка пользователей в таблице с вызовом banClient
async function getAllClients() {
    const response = await fetch("/mongo/clients/get_all", { method: "GET" });
    const clients = await response.json();
    const tableBody = document.getElementById("usersTableBody");
    tableBody.innerHTML = ""; // Очистка таблицы

    clients.reverse().forEach(client => {
        const row = document.createElement("tr");
       
        row.innerHTML = `
            <td>${client.id}</td>
            <td>${client.nickname}</td>
            <td>${client.email}</td>
            <td>${client.phone_number}</td>
            <td><button onclick="editClient('${client.id}')">Edit</button></td>
        `;
        if (client['status']=="banned"){
            row.innerHTML+=`<td><button onclick="unbanClient('${client.id}','${client.nickname}')">Unban</button></td>`
        }else{
            row.innerHTML+=`<td><button onclick="banClient('${client.id}','${client.nickname}')">Ban</button></td>`

        }
        tableBody.appendChild(row);
    });
}



// Функция для закрытия модального окна
function closeEditAuctionModal() {
    document.getElementById("editAuctionModal").style.display = "none";
}



// Показать модальное окно и загрузить данные пользователя
async function editClient(id) {
    // Получаем данные о конкретном пользователе
    const response = await fetch(`/mongo/clients/get?clients_id=${id}`, { method: "GET" });
    const client = await response.json();
    console.log(client);

    const container = document.getElementById("clientFieldsContainer");
    container.innerHTML = ""; // Очищаем контейнер перед добавлением новых полей

    // Проходим по всем полям пользователя и создаем для них инпуты
    for (const [key, value] of Object.entries(client)) {
        if (["c_id", "password", "get_mails"].includes(key)) continue; // Пропускаем ID и другие неизменяемые поля

        const fieldLabel = document.createElement("label");
        fieldLabel.setAttribute("for", `client_${key}`);
        fieldLabel.textContent = key.charAt(0).toUpperCase() + key.slice(1); // Форматируем имя поля

        // Проверяем, если поле должно быть чекбоксом
        if (["mail_receive_bet_beated", "mail_receive_auction_started", "email_verified"].includes(key)) {
            const fieldInput = document.createElement("input");
            fieldInput.setAttribute("type", "checkbox");
            fieldInput.setAttribute("id", `client_${key}`);
            fieldInput.setAttribute("name", key);
            fieldInput.checked = Boolean(value); // Устанавливаем состояние чекбокса на основе значения
            
            container.appendChild(fieldLabel);
            container.appendChild(fieldInput);
        } else {
            const fieldInput = document.createElement("input");
            fieldInput.setAttribute("type", "text");
            fieldInput.setAttribute("id", `client_${key}`);
            fieldInput.setAttribute("name", key);
            fieldInput.value = value || ""; // Устанавливаем текущее значение из данных пользователя
            
            container.appendChild(fieldLabel);
            container.appendChild(fieldInput);
        }
        container.appendChild(document.createElement("br"));
    }

    // Отображаем модальное окно
    const editClientModal = document.getElementById("editClientModal");
    editClientModal.style.display = "flex";

    // Сохраняем ID текущего пользователя, чтобы использовать при сохранении
    editClientModal.dataset.clientId = id;
}


// Функция для закрытия модального окна редактирования пользователя
function closeEditClientModal() {
    document.getElementById("editClientModal").style.display = "none";
}
// Функция для сохранения изменений пользователя
async function saveClientChanges() {
    const editClientModal = document.getElementById("editClientModal");
    const id = editClientModal.dataset.clientId;

    // Сбор данных из всех полей формы
    const fields = document.getElementById("clientFieldsContainer").getElementsByTagName("input");
    const updatedClient = {};

    for (let field of fields) {
        const fieldName = field.name;

        // Проверяем, является ли поле чекбоксом
        if (field.type === "checkbox") {
            updatedClient[fieldName] = field.checked; // Сохраняем значение чекбокса как true/false
        } else if (field.type === "text") {
            const fieldValue = field.value;
            if (fieldValue !== "") {
                updatedClient[fieldName] = fieldValue; // Сохраняем текстовые поля, если они не пустые
            }
        }
    }

    // Формируем JSON объект для отправки
    const payload = {
        id: id,
        ...updatedClient
    };

    // Отправка данных на сервер
    const response = await fetch(`/mongo/clients/edit?id=${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    });

    if (response.ok) {
        customAlert("Client updated successfully");
        closeEditClientModal();
        getAllClients(); // Обновление списка пользователей
    } else {
        customAlert("Failed to update client");
    }
}




// Закрытие модального окна при нажатии на клавишу Esc
document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
        closeEditAuctionModal();
        closeEditClientModal();
    }
});

// Функция для разбана пользователя
async function unbanClient(id, clientNickname) {
     // Создаем модальное окно подтверждения
     const confirmation = prompt(`Введите никнейм пользователя "${clientNickname}" для подтверждения блокировки:`);

     // Проверяем, совпадает ли введенное значение с никнеймом пользователя
     if (confirmation === clientNickname) {
        try {
            // Отправляем запрос на сервер для разбана пользователя
            const response = await fetch(`/mongo/clients/unban?id=${id}`, {
                method: 'POST',  // POST запрос для разбана
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                // Успешный ответ
                const result = await response.json();
                customAlert(result.message); // Показать сообщение об успешном разбане
                getAllClients(); // Обновить список пользователей
            } else {
                // Ошибка от сервера
                const error = await response.json();
                customAlert(`Error: ${error.detail}`); // Показать ошибку
            }
        } catch (error) {
            // Ошибка на клиенте
            console.error('Error during unban:', error);
            customAlert('An error occurred while trying to unban the user.');
        }
    }
}
async function editAuction(id) {
    const response = await fetch(`/mongo/auction/get?a_id=${id}`, { method: "GET" });
    const auction = await response.json();

    const container = document.getElementById("auctionFieldsContainer");
    container.innerHTML = ""; // Очищаем контейнер перед добавлением новых полей

    // Добавляем поля для каждого свойства аукциона
    for (const [key, value] of Object.entries(auction)) {
        if (["a_id", "created_at", "is_active", "album"].includes(key)) continue;
        console.log(key, value)
        const fieldLabel = document.createElement("label");
        fieldLabel.setAttribute("for", `auction_${key}`);
        fieldLabel.textContent = key.charAt(0).toUpperCase() + key.slice(1); 

        if (key === "photo") {
            // Если поле - это фото, создаем элемент для загрузки файла и превью
            const fileInput = document.createElement("input");
            fileInput.type = "file";
            fileInput.id = "auction_photo";
            fileInput.name = "photo";
            fileInput.accept = "image/*";
            fileInput.onchange = handleImageUpload; // Добавляем обработчик загрузки

            const previewImg = document.createElement("img");
            previewImg.id = "previewImg";
            previewImg.style.maxWidth = "100px";
            previewImg.src = "data:image/jpeg;base64,"+value || ""; // Устанавливаем текущее изображение, если оно есть

            container.appendChild(fieldLabel);
            container.appendChild(fileInput);
            container.appendChild(previewImg);
        } 
        else if(key == "bets"){
            bvalue = JSON.stringify(auction['bets'], null, 2)
            const fieldInput = document.createElement("textarea");
            fieldInput.type = "text";
            fieldInput.id = `auction_${key}`;
            fieldInput.name = key;
            fieldInput.value = bvalue || ""; 

            container.appendChild(fieldLabel);
            container.appendChild(fieldInput); 
        }
        else {
            const fieldInput = document.createElement("input");
            fieldInput.type = "text";
            fieldInput.id = `auction_${key}`;
            fieldInput.name = key;
            fieldInput.value = value || ""; 

            container.appendChild(fieldLabel);
            container.appendChild(fieldInput);  
        }
        container.appendChild(document.createElement("br"));
    }

    document.getElementById("editAuctionModal").style.display = "flex";
    document.getElementById("editAuctionModal").dataset.auctionId = id;
}

// Обработчик загрузки изображения
function handleImageUpload(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            document.getElementById("previewImg").src = e.target.result;
        };
        reader.readAsDataURL(file);
    }
}

async function saveAuctionChanges() {
    const editAuctionModal = document.getElementById("editAuctionModal");
    const id = editAuctionModal.dataset.auctionId;

    // Сбор данных из всех полей формы
    const fields = document.getElementById("auctionFieldsContainer").getElementsByTagName("input");
    const bets = document.getElementById("auction_bets"); 
    const updatedAuction = {};

    // Обработка input полей
    for (let field of fields) {
        const fieldName = field.name;
        const fieldValue = field.value;

        // Заполняем только поля, которые были изменены
        if (fieldValue !== "") {
            updatedAuction[fieldName] = fieldValue;
        }
    }

    if (document.getElementById("auction_bets").value != "") {
        updatedAuction["bets"] = document.getElementById("auction_bets").value; // Добавляем в объект, если текст не пустой
      
    }
    
    console.log(updatedAuction)
    // Формируем JSON объект для отправки
    const payload = {
        a_id: id,
        ...updatedAuction
    };

    // Отправка данных на сервер
    const response = await fetch(`/mongo/auction/update_auction?a_id=${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    });

    if (response.success) {
        customAlert(response.message);
        closeEditAuctionModal();
        getAllAuctions(); // Обновление списка аукционов
    } else {
        customAlert("Failed to update auction");
    }
}
async function saveAuctionChanges() {
    const editAuctionModal = document.getElementById("editAuctionModal");
    const id = editAuctionModal.dataset.auctionId;

    const fields = document.getElementById("auctionFieldsContainer").getElementsByTagName("input");
    const updatedAuction = {};

    for (let field of fields) {
        const fieldName = field.name;
        const fieldValue = field.value;
        if (fieldName === "photo" && field.files.length > 0) {
            const file = field.files[0];
            updatedAuction.photo = await convertFileToBase64(file); 
        } else {
            updatedAuction[fieldName] = fieldValue;
        }
    }
    
    if (document.getElementById("auction_bets").value != "") {
        updatedAuction["bets"] = document.getElementById("auction_bets").value; // Добавляем в объект, если текст не пустой
      
    }
    

    const payload = { a_id: id, ...updatedAuction };

    const response = await fetch(`/mongo/auction/update_auction?a_id=${id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    });
    
    const result = await response.json(); // Преобразуем ответ в JSON
    
    if (result.success) {
        customAlert("Auction updated successfully");
        closeEditAuctionModal();
        getAllAuctions();
    } else {
        customAlert("Error: " + result['message']);
    }
}


// Конвертация файла изображения в Base64
function convertFileToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
        reader.readAsDataURL(file);
    });
}


getAllAuctions();
showAuctionsTable();



================================================================================
Файл: app\static\js\auction.js
================================================================================

var end_datetime; 
// Функция для загрузки данных аукциона
function loadAuctionDetails(auctionId) {
    fetch(`/mongo/auction/get?a_id=${auctionId}`)
        .then(response => response.json())
        .then(data => {
            console.log(data);
            end_datetime = new Date(data.end_datetime);

            // Заполняем данные аукциона
            document.querySelector("#auction-datetime").textContent = new Date(data.start_datetime).toLocaleString();
            document.querySelector("#auction-datetime-end").textContent = new Date(data.end_datetime).toLocaleString() + " UTC+" + new Date().getTimezoneOffset() / -60;
            document.querySelector("#coin-name").textContent = data.short_name;
            document.querySelector("#starting-price").textContent = data.start_price;
            document.querySelector("#min-bid-step").textContent = data.min_bid_step;
            document.querySelector("#description").textContent = data.description;
            document.querySelector("#status-button").textContent = data.is_active ? "Идут торги..." : "Неактивно";

            if ("bank" in data) {
                const coinUrl = document.querySelector("#coin-url");
                coinUrl.href = data['bank'];
                coinUrl.innerHTML = "Подробнее на Банк России...";
            }

            // Создаем карусель
            const carouselContainer = document.querySelector("#carousel-container");
            carouselContainer.innerHTML = ""; // Очищаем предыдущие данные

            const images = [];

            // Добавляем главное фото
            if (data.photo) {
                images.push(`data:image/jpeg;base64,${data.photo}`);
            }

            // Добавляем фото из альбома
            if (data.album && Array.isArray(data.album)) {
                data.album.forEach(photo => {
                    images.push(`data:image/jpeg;base64,${photo}`);
                });
            }

            // Если есть изображения, создаем карусель
            if (images.length > 0) {
                const track = document.createElement("div");
                track.className = "carousel-track";

                images.forEach((src, index) => {
                    const slide = document.createElement("div");
                    slide.className = "carousel-slide";
                    const img = document.createElement("img");
                    img.src = src;
                    img.alt = `Изображение ${index + 1}`;                    
                    slide.appendChild(img);
                    track.appendChild(slide);
                });

                carouselContainer.appendChild(track);

                // Добавляем кнопки управления
                const prevButton = document.createElement("button");
                prevButton.className = "carousel-button prev";
                prevButton.textContent = "❮";
                const nextButton = document.createElement("button");
                nextButton.className = "carousel-button next";
                nextButton.textContent = "❯";
                
                carouselContainer.appendChild(prevButton);
                carouselContainer.appendChild(nextButton);

                if (images.length ==1){
                    prevButton.style.display = "None";
                    nextButton.style.display = "None";
                }

                // Добавляем логику для карусели
                const slides = Array.from(track.children);
                let currentSlide = 0;

                const updateCarousel = () => {
                    const slideWidth = slides[0].getBoundingClientRect().width;
                    track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
                };

                prevButton.addEventListener("click", () => {
                    currentSlide = (currentSlide - 1 + slides.length) % slides.length;
                    updateCarousel();
                });

                nextButton.addEventListener("click", () => {
                    currentSlide = (currentSlide + 1) % slides.length;
                    updateCarousel();
                });
                window.addEventListener("resize", updateCarousel);

                // Инициализация карусели
                updateCarousel();
            } else {
                // Если нет фото, показываем сообщение
                carouselContainer.textContent = "Изображения отсутствуют";
            }

            // Заполняем таблицу ставок
            const bidTable = document.querySelector("#bid-table tbody");
            bidTable.innerHTML = ""; // Очищаем предыдущие данные

            document.getElementById("time").textContent = "Время UTC+" + new Date().getTimezoneOffset() / -60;

            if (data.bets && data.bets.length > 0) {
                data.bets.slice().reverse().forEach(bet => {
                    const row = document.createElement("tr");

                    const userNameCell = document.createElement("td");
                    userNameCell.textContent = bet.nickname;
                    row.appendChild(userNameCell);

                    const betAmountCell = document.createElement("td");
                    betAmountCell.textContent = bet.bet_cost + ' ₽';
                    row.appendChild(betAmountCell);

                    const betTimeCell = document.createElement("td");
                    console.log(bet.created_at);
                    betTimeCell.textContent = new Date(bet.created_at + "+00:00").toLocaleString();

                    row.appendChild(betTimeCell);

                    bidTable.appendChild(row);
                });
            } else {
                // Если ставок нет, показываем сообщение
                const noBetsRow = document.createElement("tr");
                const noBetsCell = document.createElement("td");
                noBetsCell.colSpan = 3; // Чтобы объединить ячейки в строке
                noBetsCell.textContent = "Ставок пока нет";
                noBetsRow.appendChild(noBetsCell);
                bidTable.appendChild(noBetsRow);
            }
        })
        .catch(error => {
            console.error("Ошибка при загрузке данных:", error);
        });
}


// Функция для отправки ставки
document.getElementById("place-bid").addEventListener("click", function() {
    const bidInput = document.querySelector(".bid-input");
    const bidAmount = bidInput.value;
    if (bidAmount < 1) {
        customAlert("Ставка должна быть больше 0.");
        return;
    }

    const auctionId = new URLSearchParams(window.location.search).get("a_id");
    fetch(`/mongo/auction/add_bet_to_auction?a_id=${auctionId}&bet_cost=${bidAmount}`, {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded'
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);
        if(data["detail"]=="Invalid credentials"){
            customAlert("Сначала авторизируйтесь");
            return;
        }
        if (data["status"]!='error') {
            customAlert("Ставка успешно сделана!");
            loadAuctionDetails(auctionId); // Обновляем данные аукциона
        } else {
            customAlert("Ошибка при размещении ставки. "+ data["message"]);
        }
    })
    .catch(error => {
        console.error("Ошибка при размещении ставки:", error);
    });
});

// Функция для выхода из аккаунта
function logout() {
    localStorage.removeItem("authToken");
    customAlert("Вы вышли из аккаунта");
    window.location.href = "login";
}

document.addEventListener("DOMContentLoaded", function () {
    const zoomContainer = document.querySelector(".zoom-container");
    const coinImage = document.querySelector("#coin-image");
    const zoomLens = document.createElement("div");
    const zoomedImage = document.createElement("img");

    zoomLens.className = "zoom-lens";
    zoomContainer.appendChild(zoomLens);

    zoomedImage.className = "zoom-image";
    zoomContainer.appendChild(zoomedImage);

    // Обработчик события наведения мыши
    zoomContainer.addEventListener("mousemove", (e) => {
        const { left, top, width, height } = zoomContainer.getBoundingClientRect();

        // Вычисляем координаты курсора относительно контейнера
        const lensX = e.clientX - left;
        const lensY = e.clientY - top;

        // Установка позиции лупы
        zoomLens.style.left = `${lensX - zoomLens.offsetWidth / 2}px`; // Центрирование лупы по курсору
        zoomLens.style.top = `${lensY - zoomLens.offsetHeight / 2}px`; // Центрирование лупы по курсору

        // Установка позиции увеличенного изображения
        zoomedImage.src = coinImage.src; // Ссылка на исходное изображение
        zoomedImage.style.display = "block"; // Показываем увеличенное изображение
        // Центрируем увеличенное изображение относительно курсора
        zoomedImage.style.left = `${lensX}px`;
        zoomedImage.style.top = `${lensY}px`;
        zoomedImage.style.transform = `translate(-${lensX * 2}px, -${lensY * 2}px)`; // Увеличиваем изображение с учетом положения курсора
    });

    // Обработчик события покидания мыши
    zoomContainer.addEventListener("mouseleave", () => {
        zoomedImage.style.display = "none"; // Скрываем увеличенное изображение при выходе
        zoomLens.style.display = "none"; // Скрываем лупу
    });

    // Обработчик события наведения на изображение
    coinImage.addEventListener("load", () => {
        zoomLens.style.display = "block"; // Показываем лупу при загрузке изображения
    });
});

// Функция для загрузки и обновления данных ставок
function loadAndUpdateBets(auctionId) {
    fetch(`/mongo/auction/get_bets?a_id=${auctionId}`)
        .then(response => response.json())
        .then(data => {
            console.log(data);

            // Заполняем таблицу ставок
            const bidTable = document.querySelector("#bid-table tbody");
            bidTable.innerHTML = ""; // Очищаем предыдущие данные

            if (data && data.length > 0) {
                data.slice().reverse().forEach(bet => {
                    const row = document.createElement("tr");

                    const userNameCell = document.createElement("td");
                    userNameCell.textContent = bet.nickname;
                    row.appendChild(userNameCell);

                    const betAmountCell = document.createElement("td");
                    betAmountCell.textContent = bet.bet_cost + ' ₽';
                    row.appendChild(betAmountCell);

                    const betTimeCell = document.createElement("td");
                    betTimeCell.textContent = new Date(bet.created_at+"+00:00").toLocaleString();
                    row.appendChild(betTimeCell);

                    bidTable.appendChild(row);
                });
            } else {
                // Если ставок нет, показываем сообщение
                const noBetsRow = document.createElement("tr");
                const noBetsCell = document.createElement("td");
                noBetsCell.colSpan = 3; // Чтобы объединить ячейки в строке
                noBetsCell.textContent = "Ставок пока нет";
                noBetsRow.appendChild(noBetsCell);
                bidTable.appendChild(noBetsRow);
            }
        })
        .catch(error => {
            console.error("Ошибка при загрузке данных:", error);
        });
}


// Загружаем данные аукциона при загрузке страницы
document.addEventListener("DOMContentLoaded", function () {
    const urlParams = new URLSearchParams(window.location.search);
    const auctionId = urlParams.get("a_id");
    if (auctionId) {
        loadAuctionDetails(auctionId); // Загружаем данные аукциона
    } else {
        customAlert("ID аукциона не найден. Перейдите на страницу с аукционами.");
        window.location.href = "/";
    }
     // Вызываем функцию для обновления ставок каждую секунду
    setInterval(() => {
        loadAndUpdateBets(auctionId); // Обновляем таблицу ставок
    }, 2000); // Каждую 2 секунды


});


================================================================================
Файл: app\static\js\create_auction.js
================================================================================
document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("createAuctionForm");
    const fileInput = document.getElementById("coin-photo");
    const previewImage = document.getElementById("preview-image");
    let base64Image = ""; // Variable to store the Base64 of the main image
    let albumImages = []; // Array to store additional images' Base64

    // Function to convert an image to Base64
    function convertImageToBase64(file) {
        return new Promise((resolve) => {
            const reader = new FileReader();
            reader.onloadend = () => {
                const base64 = reader.result.split(",")[1]; // Extract Base64 string
                resolve(base64); // Resolve promise with Base64 string
            };
            reader.readAsDataURL(file); // Read file as Data URL
        });
    }

    // Обработка выбора главного фото
    fileInput.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                previewImage.src = reader.result; // Устанавливаем изображение в элемент превью
                previewImage.style.display = "block"; // Показываем превью
                convertImageToBase64(file).then((base64) => {
                    base64Image = base64; // Сохраняем Base64 изображения
                });
            };
            reader.readAsDataURL(file); // Преобразуем файл в Data URL
        }
    });

    // Handle form submission
    form.addEventListener("submit", function (e) {
        e.preventDefault(); // Prevent default form submission

        // Check and validate the start and end date-time fields
        const startDateTime = document.getElementById("start_datetime").value;
        const endDateTime = document.getElementById("end_datetime").value;

        if (!isValidDateTime(startDateTime)) {
            customAlert("Неверный формат даты начала! Используйте формат: дд.мм.гггг чч:мм");
            return;
        }

        if (!isValidDateTime(endDateTime)) {
            customAlert("Неверный формат даты окончания! Используйте формат: дд.мм.гггг чч:мм");
            return;
        }

        // Check and validate the price fields
        const startPrice = document.getElementById("start_price").value;
        const minBidStep = document.getElementById("min_bid_step").value;

        if (!isPositiveNumber(startPrice)) {
            customAlert("Начальная цена должна быть числом больше 0!");
            return;
        }

        if (!isPositiveNumber(minBidStep)) {
            customAlert("Минимальный шаг ставки должен быть числом больше 0!");
            return;
        }

        // Collect additional images from the album inputs
        let albumInputs = document.querySelectorAll('#album input[type="file"]'); // Find all file inputs in the album container
        let albumPromises = []; // To hold promises for each image conversion

        albumInputs.forEach((input) => {
            let file = input.files[0];
            if (file) {
                albumPromises.push(convertImageToBase64(file)); // Add conversion promise to the array
            }
        });

        // Wait for all Base64 conversions to complete
        Promise.all(albumPromises).then((albumBase64Images) => {
            albumImages = albumBase64Images; // Store all album images' Base64 in the array

            // Prepare data to send
            let auctionData = {
                short_name: document.getElementById("short_name").value,
                start_datetime: startDateTime,
                end_datetime: endDateTime,
                start_price: startPrice,
                min_bid_step: minBidStep,
                description: document.getElementById("description").value,
                bank: document.getElementById("bank").value,
                photo: base64Image, // Main image in Base64
                album: albumImages // Additional images in Base64
            };

            console.log(auctionData); // Check data before sending it

            // Send data via fetch
            fetch("/mongo/auction/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(auctionData),
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    customAlert("Аукцион успешно создан!");
                    // Uncomment the following line for redirection after successful auction creation
                    // window.location.href = `alt_auction?a_id=${data.a_id}`;
                } else {
                    customAlert("Ошибка при создании аукциона. Попробуйте снова.");
                }
            })
            .catch(error => {
                console.error("Ошибка при создании аукциона:", error);
            });
        });
    });
});

// Функция для добавления поля загрузки дополнительного фото
function addAlbumPhotoInput() {
    // Получаем контейнер для альбома
    const album = document.getElementById('album');

    // Создаем новый input для загрузки фотографии
    const inp = document.createElement('input');
    inp.type = 'file';
    inp.classList.add('coin-album'); // Добавляем класс для идентификации
    inp.accept = 'image/*'; // Только изображения

    // Создаем элемент для превью изображения
    const previewContainer = document.createElement('div');
    previewContainer.classList.add('photo-preview');
    const img = document.createElement('img');
    img.style.display = "none"; // Скрываем изображение по умолчанию
    previewContainer.appendChild(img);
    
    // Добавляем контейнер с input и превью в альбом
    album.appendChild(inp);
    album.appendChild(previewContainer);

    // Обработка выбора дополнительного фото
    inp.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                // Отображаем изображение в превью
                img.src = reader.result;
                img.style.display = "block"; // Показываем изображение
            };
            reader.readAsDataURL(file); // Преобразуем файл в Data URL
        }
    });
}

// Функция проверки формата даты
function isValidDateTime(dateTime) {
    const dateTimeRegex = /^(\d{2}).(\d{2}).(\d{4}) (\d{2}):(\d{2})$/; // Регулярное выражение для дд.мм.гггг чч:мм
    const match = dateTime.match(dateTimeRegex);
    if (!match) return false;

    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10);
    const year = parseInt(match[3], 10);
    const hours = parseInt(match[4], 10);
    const minutes = parseInt(match[5], 10);

    // Проверяем корректность значений даты и времени
    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > 2100) return false;
    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) return false;

    return true;
}

// Проверка числовых полей
function isPositiveNumber(value) {
    return !isNaN(value) && Number(value) > 0;
}

document.addEventListener("DOMContentLoaded", function () {
    // Инициализация Flatpickr на полях выбора даты и времени
    flatpickr("#start_datetime", {
        enableTime: true, // Включить выбор времени
        dateFormat: "d.m.Y H:i", // Формат даты и времени
        time_24hr: true, // Формат времени 24 часа
        locale: "ru", // Локализация на русский язык
        minDate: "today", // Минимальная дата — сегодня
    });

    flatpickr("#end_datetime", {
        enableTime: true,
        dateFormat: "d.m.Y H:i",
        time_24hr: true,
        locale: "ru",
        minDate: "today",
    });
});

================================================================================
Файл: app\static\js\custom_alert.js
================================================================================
function customAlert(message, options = {}) {
    // Создаём затемнённый фон и контейнер
    const overlay = document.createElement("div");
    overlay.classList.add("alert-overlay");

    const alertBox = document.createElement("div");
    alertBox.classList.add("alert-box");

    // Настраиваем заголовок и текст сообщения
    const alertMessage = document.createElement("p");
    alertMessage.classList.add("alert-message");
    alertMessage.innerText = message;

    // Создаем кнопку закрытия
    const closeButton = document.createElement("button");
    closeButton.classList.add("alert-button");
    closeButton.innerText = "OK";

    // Добавляем элементы в контейнер
    alertBox.appendChild(alertMessage);
    alertBox.appendChild(closeButton);
    overlay.appendChild(alertBox);
    document.body.appendChild(overlay);

    // Закрытие при нажатии на кнопку, вне окна или клавишу Esc
    closeButton.onclick = closeAlert;
    overlay.onclick = (e) => {
        if (e.target === overlay) closeAlert();
    };

    function closeAlert() {
        overlay.classList.add("alert-overlay-hide");
        alertBox.classList.add("alert-box-hide");

        // Удаляем обработчик событий после закрытия
        document.removeEventListener("keydown", handleKeyDown);

        setTimeout(() => {
            document.body.removeChild(overlay);
        }, 300);
    }

    function handleKeyDown(event) {
        if (event.key === "Escape") {
            closeAlert();
        }
    }

    // Добавляем обработчик для клавиши Esc
    document.addEventListener("keydown", handleKeyDown);
}

================================================================================
Файл: app\static\js\index.js
================================================================================
async function fetchAuctionData() {
    try {
        const response = await fetch('/mongo/auction/get_all', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            customAlert('Network response was not ok ' + response.statusText);
            throw new Error('Network response was not ok ' + response.statusText);
        }

        const data = await response.json();
        displayAuctionData(data);
    } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
        customAlert(error);
    }
}

function displayAuctionData(data) {
    const activeAuctionGrid = document.getElementById('activeAuctions');
    const upcomingAuctionGrid = document.getElementById('upcomingAuctions');
    const completedAuctionGrid = document.getElementById('completedAuctions');

    activeAuctionGrid.innerHTML = ''; // Очистить существующие данные активных аукционов
    upcomingAuctionGrid.innerHTML = ''; // Очистить существующие данные предстоящих аукционов
    completedAuctionGrid.innerHTML = ''; // Очистить существующие данные завершенных аукционов
    document.getElementById('active-header').style.display="none";
    document.getElementById('upcoming-header').style.display="none";
    document.getElementById('finished-header').style.display="none";
    const now = new Date();

    data.forEach(auction => {
        const startTime = new Date(auction.start_datetime);
        const endTime = new Date(auction.end_datetime);
        
        const auctionCard = document.createElement('div');
        auctionCard.className = 'auction-card';
        auctionCard.innerHTML = `
            <div class="card-list">
                <article class="card">
                    <figure class="card-image">
                        <img src='data:image/jpeg;base64,${auction.photo}' />
                    </figure>
                    <div class="card-header">
                        <a href="#">${auction.short_name}</a>
                    </div>
                    <div class="card-footer">
                        <span><strong>От ${auction["start_price"]} ₽</strong></span>
                    </div>
                    <div class="card-meta card-meta--date">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="2" y="4" width="20" height="18" rx="4" />
                            <path d="M8 2v4" />
                            <path d="M16 2v4" />
                            <path d="M2 10h20" />
                        </svg>
                        ${new Date(auction.start_datetime).toLocaleString()}
                    </div>
                </article>
            </div>
        `;

        // Добавить событие клика на карточку
        auctionCard.addEventListener('click', () => {
            const auctionId = auction.a_id.a_id || auction.a_id; // Получить ID аукциона
            window.open(`alt_auction?a_id=${auctionId}`, '_self');
        });

        // Определяем, в какую секцию добавлять аукцион
        if (startTime <= now && now <= endTime) {
            // Активные аукционы
            activeAuctionGrid.appendChild(auctionCard);
            document.getElementById('active-header').style.display="none";
        } else if (startTime > now) {
            // Предстоящие аукционы
            upcomingAuctionGrid.appendChild(auctionCard);
            document.getElementById('upcoming-header').style.display="block";
        } else {
            // Завершенные аукционы
            completedAuctionGrid.appendChild(auctionCard);
            document.getElementById('finished-header').style.display="block";
        }
    });

    
    document.getElementById("loadingScreen").style.display = "none";
}


// Fetch auction data when the page loads
window.onload = fetchAuctionData;

================================================================================
Файл: app\static\js\scripts.js
================================================================================

// Функция для переключения вкладок
function openTab(evt, tabName) {
    let tabContents = document.getElementsByClassName("tab-content");
    let tabButtons = document.getElementsByClassName("tab-button");

    // Скрыть все вкладки
    for (let i = 0; i < tabContents.length; i++) {
        tabContents[i].style.display = "none";
        tabContents[i].classList.remove("active");
    }

    // Убрать активное состояние с кнопок
    for (let i = 0; i < tabButtons.length; i++) {
        tabButtons[i].classList.remove("active");
    }

    // Показать текущую вкладку и добавить активный класс к кнопке
    document.getElementById(tabName).style.display = "block";
    document.getElementById(tabName).classList.add("active");
    evt.currentTarget.classList.add("active");
}

// Подключение формы входа к бэкенду
document.getElementById("loginForm").addEventListener("submit", function (e) {
    e.preventDefault();
    let password = document.getElementById("login-password").value;
    let mail = document.getElementById("login-mail").value;

    fetch('/auth/token', {
        method: 'POST',
        headers: {
            'accept': 'application/json'
        },
        body: new URLSearchParams({
            'grant_type': 'password',
            'username': mail,
            'password': password,
            'scope': '',
            'client_id': 'string',
            'client_secret': 'string'
        })
    })
        .then(response => response.json())
        .then(data => {
            console.log(data)
            if (data['detail'] == 'Invalid credentials'){
                customAlert("Неверные данные входа");
            }
            if (data['access_token']) {
                window.open(`/`, "_self");
            } else if (data=="Ваша почта не подтверждена, сообщение отправлено на почту") {
                customAlert(data);
            }
        })
        .catch(error => {
            console.error("Ошибка:", error);
        });
});

document.getElementById('register-phone').addEventListener('input', function (e) {
    let x = e.target.value.replace(/\D/g, '').substring(1); // Убираем все, кроме чисел
    let formattedNumber = '+7 ';
    if (x.length > 0) formattedNumber += '(' + x.substring(0, 3);
    if (x.length >= 4) formattedNumber += ') ' + x.substring(3, 6);
    if (x.length >= 7) formattedNumber += '-' + x.substring(6, 8);
    if (x.length >= 9) formattedNumber += '-' + x.substring(8, 10);
    e.target.value = formattedNumber;
  });


  document.getElementById('register-email').addEventListener('input', function (e) {
    // Убираем пробелы с начала и конца и запрещаем ввод пробелов внутри
    e.target.value = e.target.value.replace(/\s/g, '');

    // Валидация для email формата
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*$/;
    if (!emailRegex.test(e.target.value)) {
        e.target.setCustomValidity("Пожалуйста, введите корректный email.");
    } else {
        e.target.setCustomValidity("");
    }
});

// Подключение формы регистрации к бэкенду
document.getElementById("registerForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const password = document.getElementById("register-password").value;
    const confirmPassword = document.getElementById("confirm-password").value;
    const phone_number = document.getElementById("register-phone").value;
    const email = document.getElementById("register-email").value;
    const nickname = document.getElementById("register-nickname").value;

    // Проверка совпадения паролей
    if (password !== confirmPassword) {
        customAlert("Пароли не совпадают. Пожалуйста, попробуйте снова.");
        return;
    }

    // Проверка на уже зарегистрированный email
    fetch(`/auth/check_mail?mail=${email}`, {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data === 1) {
            customAlert("Этот email уже зарегистрирован.");
            return;
        }
        console.log(phone_number)
        // Отправка данных для регистрации, если email не зарегистрирован
        return fetch(`/auth/register?phone_number=${phone_number}&password=${password}&email=${email}&nickname=${nickname}`, {
            method: 'POST',
            headers: {
                'accept': 'application/json',
                'content-type': 'application/x-www-form-urlencoded'
            }
        });
    })
    .then(response => response ? response.json() : null)
    .then(data => {
        console.log(data)
        if (data && data.success === true) {
            customAlert("На почту отправлено письмо с подтверждением электронной почты")
        } else {
            customAlert(`Ошибка регистрации. ${data.error}`);
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
        customAlert(`Произошла ошибка. Попробуйте позже`);
    });
});
function togglePasswordVisibility(inputId, toggleButton) {
    const inputField = document.getElementById(inputId);
    const isPasswordVisible = inputField.type === 'text';
    
    // Переключаем тип поля
    inputField.type = isPasswordVisible ? 'password' : 'text';
    
    // Меняем иконку при необходимости
    toggleButton.querySelector('svg').style.fill = isPasswordVisible ? '#555' : '#ffbb63';
}

//customAlert("Мы используем файлы Куки для авторизации, продолжая пользоваться сервисом, вы даете свое согласиие на их обработку")
================================================================================
Файл: app\static\js\SidebarLoad.js
================================================================================

// Функция для подгрузки Sidebar
function loadSidebar() {
    fetch('sidebar.html')
        .then(response => response.text())
        .then(data => {
            document.getElementsByClassName('Sidebar')[0].innerHTML = data;
            get_data(); // Вызов функции для загрузки данных пользователя
        })
        .catch(error => console.error('Ошибка загрузки Sidebar:', error));
}

// Выполняем загрузку Sidebar после загрузки DOM
document.addEventListener('DOMContentLoaded', loadSidebar);

fetch('/auth/get_data')
    .then(response => response.json())
    .then(data => {
        const nicknameElement = document.getElementById('nickname');
        nicknameElement.textContent = data['nickname'] || 'Войти';

        if (nicknameElement.textContent === 'Войти') {
            nicknameElement.onclick = function() {
                window.open('/login', "_blank");
                nicknameElement.style.textDecoration = 'underline';
            };
        } else {
            // Добавляем класс для стилизации вошедшего пользователя
            nicknameElement.classList.add("nickname-logged");
        }
    })
    .catch(error => console.error("Ошибка:", error));
  
 

  function handleLogout() {
    fetch('/auth/logout', {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded'
        },
        body: ''
    })
    .then(response => {
        if (response.ok) {
            window.open('/login', '_self'); // Открыть страницу входа
        } else {
            console.error("Ошибка при выходе.");
            alert("Не удалось выйти. Попробуйте еще раз.");
        }
    })
    .catch(error => {
        console.error("Ошибка:", error);
        alert("Произошла ошибка при выходе. Попробуйте позже.");
    });
  }
  
  
================================================================================
Файл: app\templates\about.html
================================================================================
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon.ico">
    <script src="static/js/custom_alert.js"></script>
    <title>О компании Монеты.ру</title>
  
</head>

<body>
    <div class="dashboard-container">
        <nav class="sidebar colapsed" id="sidebar"></nav>
        <div class="Sidebar"></div>

        <div class="Holder">
            <div className='About'>
                <section id="about">
                    <h2>О нашей компании</h2>
                    <p>Компания Монеты.ру была основана в 2022 году группой специалистов, профессионально работающих на рынке
                        банковской деятельности, инвестиций в драгметаллы. Мы специализируемся на продаже российских инвестиционных
                        монет из золота и серебра, а также слитков драгоценных металлов.</p>
                    <p>Компания имеет все необходимые лицензии для осуществления деятельности по покупке и продаже инвестиционных
                        монет, а также регистрацию в пробирной палате г. Москвы. Мы гарантируем конфиденциальность проводимых сделок,
                        так как безопасность и комфорт наших клиентов является приоритетом нашей Компании.</p>
                    <p>Качество и подлинность предлагаемых нашим клиентам монет гарантируется подтверждающими банковскими документами
                        и прямыми поставками из банков-партнёров. Качество и подлинности слитков гарантируется подтверждающими
                        сертификатами и информацией в ГИИС ДМДК Федеральной пробирной палаты.</p>
                </section>
            
                <section id="auction-rules">
                    <h2>Правила аукциона</h2>
                    <p>Аукцион проходит следующим образом: вы можете следить за новостями в нашем телеграм-канале, на Авито или на самом сайте в разделе "Предстоящие аукционы". Выберите аукцион, который вас интересует, и зарегистрируйтесь на него. После этого вы сможете предлагать свои ставки за лоты.</p>
                    <p><strong>ВАЖНО:</strong> Если аукцион начинается, например, в 15:00 и заканчивается в 18:00, а кто-то делает ставку в 17:59, то аукцион автоматически продлевается на 5 минут, чтобы другие участники могли предложить свои ставки. После победы в аукционе с победителем свяжется менеджер для составления договора, оплаты и передачи лота.</p>
                </section>
            
                <section id="guarantees">
                    <h2>Гарантии</h2>
                    <p>Магазин Монеты.ру гарантирует 100% подлинность всех продаваемых монет. Мы осуществляем покупку монет напрямую у
                        Банков-партнёров. Доступна услуга проверки подлинности монет в кассе Банка-партнёра за дополнительную плату.
                        Стоимость зависит от металла монеты и количества проверяемых монет.</p>
                    <p>Деятельность организации удостоверяется:</p>
                    <ul>
                        <li> Свидетельством о государственной<a href="https://www.rusprofile.ru/id/1225000007220"target="_blank"> регистрации № 1225000007220  </a></li>
                        <li>Номер в реестре специального учета юридических лиц и индивидуальных предпринимателей, осуществляющих операции с драгоценными металлами и драгоценными камнями <a href="https://probpalata.gov.ru/deyatelnost/specuchyot/" target="_blank">№ ЮЛ 5001001086</a>, присвоенный Министерством Финансов Российской Федерации 21 февраля 2022 г.</li>
            
                        <li>Организация зарегистрирована, состоит на специальном учёте в ГИИС ДМДК, проверить организацию Вы можете на
                            сайте <a href="https://probpalata.gov.ru/deyatelnost/specuchyot/" target="_blank">Федеральной пробирной палаты.</a></li>
                    </ul>
                
                </section>
            
                <section id="details">
                    <h2>Реквизиты компании</h2>
                    <ul>
                        <li><strong>Полное наименование организации:</strong> Общество с ограниченной ответственностью "Монеты.ру"</li>
                        <li><strong>Юридический адрес:</strong> 142116, Московская область, г.о. Подольск, г Подольск, пр-кт Революционный, д. 15, помещ. 4, ком. 1</li>
                        <li><strong>Почтовый адрес:</strong> 142116, Московская область, г.о. Подольск, г Подольск, пр-кт Революционный, д. 15, помещ. 4, ком. 1</li>
                        <li><strong>ИНН:</strong> 5074073274</li>
                        <li><strong>КПП:</strong> 507401001</li>
                        <li><strong>ОКВЭД (основной):</strong> 64.99.1</li>
                        <li><strong>ОГРН:</strong> 1225000007220</li>
                        <li><strong>"АЛЬФА-БАНК" Номер счета:</strong> 40701810102090000011</li>
                        <li><strong>БИК:</strong> 044525593</li>
                        <li><strong>К/С:</strong> 30101810200000000593 в ГУ БАНКА РОССИИ ПО ЦФО</li>
                        <li><strong>Генеральный директор:</strong> Маликова Ольга Викторовна</li>
                        <li><strong>Электронная почта:</strong> <a href="mailto:info@monety.shop">info@monety.shop</a></li>
                        <li><strong>Телефон:</strong> +7(903)598-92-14</li>
                        <li><strong>Сайт:</strong> <a href="https://monety.shop" target="_blank">https://monety.shop</a></li>
                    </ul>
                </section>
            </div>
        </div>    
    </div>
    
    <script src="static/js/SidebarLoad.js"></script>
</body>

</html>

================================================================================
Файл: app\templates\account.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Личный кабинет</title>
    <link rel="stylesheet" href="static/css/Acount.css">
    <link rel="stylesheet" href="static/css/styles.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    
</head>
<body>
    <div class="Sidebar">

    </div>
    <main class="Holder">
        <div class ="account-details-container">
            <section class="account-details">
                <h2>Ваш Личный кабинет</h2>
                <form id="accountForm">
                    <div class="form-group">
                        <label for="phone-number">Номер телефона для связи</label>
                        <input type="text" id="phone-number" name="phone_number" value="+7 (900) 123-45-67">
                    </div>
    
                    <div class="form-group">
                        <label for="avito-url">URL Авито:</label>
                        <input type="url" id="avito-url" name="avito_url" value="https://www.avito.ru/example">
                    </div>
    
                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="bid-notification" name="mail_receive_bet_beated" checked>
                            Получать уведомления о перебитой ставке
                        </label>
                    </div>
    
                    <div class="form-group checkbox-group">
                        <label>
                            <input type="checkbox" id="auction-start-notification" name="mail_receive_auction_started">
                            Получать уведомления о старте аукциона
                        </label>
                    </div>
    
                    <button type="submit" class="submit-button">Сохранить изменения</button>
                </form>
            </section>
    
            <section class="password-change">
                <h2>Изменение пароля</h2>
                <form id="passwordForm">
                    <div class="form-group">
                        <label for="current-password">Текущий пароль:</label>
                        <input type="password" id="current-password" name="currentPassword">
                    </div>
    
                    <div class="form-group">
                        <label for="new-password">Новый пароль:</label>
                        <input type="password" id="new-password" name="newPassword">
                    </div>
    
                    <div class="form-group">
                        <label for="confirm-password">Повторите новый пароль:</label>
                        <input type="password" id="confirm-password" name="confirmPassword">
                    </div>
    
                    <button type="submit" class="submit-button">Изменить пароль</button>
                </form>
            </section>
        </div>
        
    </main>

    <script src = "static/js/SidebarLoad.js"></script>
    <script src = "static/js/account.js"></script>
    <script src = "static/js/custom_alert.js"></script>
</body>
</html>

================================================================================
Файл: app\templates\alt_auction.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="{{ meta_info['description'] }}">
    <meta property="og:title" content="{{ meta_info['title'] }}">
    <meta property="og:description" content="{{ meta_info['description'] }}">
    <meta property="og:url" content="{{ meta_info['url'] }}">
    <meta property="og:type" content="website">
    <meta property="og:startDate" content="{{ meta_info['structured_data']['startDate'] }}">
    <meta property="og:endDate" content="{{ meta_info['structured_data']['endDate'] }}">
    <meta property="og:price" content="{{ meta_info['structured_data']['price'] }}">
    <title>{{ meta_info['title'] }}</title>
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/alt_auction.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon.ico">
    <script src="static/js/custom_alert.js"></script>
    
</head>
<body>
    <div class="Sidebar"></div>
    <div class="Holder">
        <div class="dashboard-content">
            <header class="auction-header">
                <img src="static/images/back.svg" width="40px" style="margin-left: 10px;" alt="" onclick="window.open('/', '_self')">
                <div class="auction-info">
                    <p class="auction-dates">
                        С <span id="auction-datetime"></span> по <span id="auction-datetime-end"></span>
                    </p>
                </div>
            </header>


            <main class="auction-main-content">
                <section class="coin-photo">
                    
                        <div id="carousel-container" class="carousel"></div>
                 
                </section>
                

                <section class="coin-info">
                    
                    
                    <div class="auction-info">
                        
                        <div class="status"> 
                            <h2><span id="coin-name"></span></h2>
                            <button class="status-button" id="status-button">...</button>
                        </div>
                        
                    </div>

                    <div class="coin-details">
                        
                        <div><strong>Описание:</strong> <span id="description"></span></div>
                        <p><a href="#" id="coin-url"></a></p>
                    </div>

                    <div class="coin-prices">
                        <p><strong>Начальная цена лота:</strong> <span id="starting-price"></span></p>
                        <p><strong>Минимальный шаг ставки:</strong> <span id="min-bid-step"></span></p>
                    </div>
                </section>
            </main>

            <section class="auction-history-section">
                <div class="history">
                    <table id="bid-table">
                        <thead>
                            <tr><th>Имя</th><th>Ставка</th><th id="time">Время</th></tr>
                        </thead>
                        <tbody>
                            <!-- Ставки будут добавляться здесь -->
                        </tbody>
                    </table>
                </div>

                <div class="bid-section">
                    <input type="number" class="bid-input" placeholder="Введите вашу ставку" min="1">
                    <button class="bid-button" id="place-bid">Сделать ставку</button>
                </div>
            </section>
        </div>
    </div>
    <script src="static/js/auction.js"></script>
    <script src="static/js/SidebarLoad.js"></script>

</body>
</html>

================================================================================
Файл: app\templates\create_auction.html
================================================================================
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="static/css/create_auction.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/themes/dark.css"> <!-- Подключение темной темы -->
    <link rel="icon" href="static/images/favicon_admin.ico">
    <script src="static/js/custom_alert.js"></script>
    <title>Создание Аукциона</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/themes/dark.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

</head>

<body id="body" >
    <div class="dashboard-container">
        <!-- Боковое меню -->
       <div class= "Sidebar"></div>
        <div class="Holder">

            <div class="dashboard-content">
                <header class="dashboard-header">
                </header>
    
                <main class="create-auction-container">
                    <form id="createAuctionForm">
                        <div class="form-group">
                            <label for="auction-name">Название аукциона:</label>
                            <input type="text" id="short_name" name="auctionName" placeholder="Монета Олимпиадная" required>
                        </div>
                        <div class="form-group">
                            <label for="start_datetime">Время начала:</label>
                            <input type="text" id="start_datetime" name="auctionTime" placeholder="дд.мм.гггг чч:мм 28.11.2024 19:30" required>
                        </div>
                        <div class="form-group">
                            <label for="end_datetime">Время окончания:</label>
                            <input type="text" id="end_datetime" name="auctionTime" placeholder="дд.мм.гггг чч:мм 28.12.2024 6:30" required>
                        </div>
                        <div class="form-group">
                            <label for="start_price">Начальная цена:</label>
                            <input type="number" id="start_price" name="startingPrice" placeholder="13500" required>
                        </div>
                        <div class="form-group">
                            <label for="min_bid_step">Минимальный шаг ставки:</label>
                            <input type="number" id="min_bid_step" name="minBidStep" placeholder="500" required>
                        </div>
                        <div class="form-group">
                            <label for="description">Описание</label>
                            <input type="text" id="description" name="description" placeholder="Монета из золота" required>
                        </div>
                        <div class="form-group">
                            <label for="bank">Ссылка на <a href="https://www.cbr.ru/cash_circulation/memorable_coins/coins_base/">Банк России</a>. Если нет - отсавьте поле пустым</label>
                            <input type="text" id="bank" name="bank" placeholder="https://www.cbr.ru/cash_circulation/memorable_coins/coins_base/ShowCoins/?cat_num=5111-0178-24">
                        </div>
                        <div class="form-group">
                            <label for="coin-photo">Обложка для лота PNG/JPG (Обязательно): </label>
                            <input type="file" id="coin-photo" name="coinPhoto" accept="image/*" required>
                            <img id="preview-image" src="#" alt="Превью фото" style="display:none; margin-top:10px; max-width:200px;">
                        </div>
                        
                        <!-- Кнопка для добавления дополнительных фотографий -->
                        
    
                        <!-- Скрытые дополнительные фото -->
                        <div id="album-container" class="form-group" style="display:block;">
                            <label for="album">Дополнительные фотографии (Опционально):</label>
                            <label for="album">Будут учитываться только заполненные ячейки</label>
                            <div id="album">
                                <!-- Новые фотографии будут добавляться сюда -->
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="button" id="add-photo-button" class="add-photo-button" onclick="addAlbumPhotoInput()">Добавить еще поле ввода для фотографии</button>
                        </div>        
                        <button type="submit" class="create-button">Создать аукцион</button>
                    </form>
                </main>
            </div>
        </div>

        
    </div>

    <script src="static/js/create_auction.js"></script>
    <script src="static/js/SidebarLoad.js"></script>
   
</body>

</html>
================================================================================
Файл: app\templates\enter_reg_page.html
================================================================================
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="static/css/enter_reg_page.css">
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="icon" href="static/images/favicon.ico">
    
    <script src="static/js/custom_alert.js"></script>
    <title>Главная - Регистрация и Вход</title>
</head>

<body>
    <div class="container">
        
        <!-- Левая часть с информацией -->
        <div class="info-section">
            <div class="info-content">
                <img src="static/images/login_cat.png" alt="" class="illustration slide-in">
                <h2>Получайте монеты</h2>
                <p>Присоединяйтесь к системе онлайн торгов.</p>
            </div>
        </div>

        <!-- Правая часть с регистрацией/входом -->
        <div class="form-section bounce-in">
            <div class="form-container">
                <div class="tabs">
                    <button class="tab-button active" onclick="openTab(event, 'login')">Вход</button>
                    <button class="tab-button" onclick="openTab(event, 'register')">Регистрация</button>
                </div>
                <div id="login" class="tab-content active">
                    <form id="loginForm">
                        
                       
                        <div class="form-group">
                            <label for="login-mail">e-mail (обязательно):</label>
                            <input type="text" id="login-mail" name="mail" required>
                        </div>
                        <div class="form-group">
                            <label for="login-password">Пароль:</label>
                            <div class="password-wrapper">
                                <input type="password" id="login-password" name="password" required>
                                <button type="button" onclick="togglePasswordVisibility('login-password', this)" class="password-toggle">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 5C7.58 5 3.75 7.61 2 12c1.75 4.39 5.58 7 10 7s8.25-2.61 10-7c-1.75-4.39-5.58-7-10-7zm0 12c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" fill="#555"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <p class="CookiesNotif">Мы используем <strong>файлы Cookie</strong> для авторизации!
                            Входя, Вы даете согласие на использование <strong>Cookie</strong>.</p>
                        <button type="submit" class="submit-button">Войти</button>
                    </form>
                </div>
                <div id="register" class="tab-content">
                    <form id="registerForm">
                        <div class="form-group">
                            <label for="register-phone">Телефон (обязательно):</label>
                            <input type="phone" id="register-phone"  placeholder="+7 (___) ___-__-__" maxlength="18" name="phone" required>
                        </div>
                        <div class="form-group">
                            <label for="register-phone">e-mail (обязательно):</label>
                            <input type="text" id="register-email" name="email" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="register-nickname">Псевдоним (обязательно):</label>
                            <input type="text" id="register-nickname" name="nickname" required>
                        </div>
                    
                        <div class="form-group">
                            <label for="register-password">Пароль:</label>
                            <div class="password-wrapper">
                                <input type="password" id="register-password" name="password" required>
                                <button type="button" onclick="togglePasswordVisibility('register-password', this)" class="password-toggle">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 5C7.58 5 3.75 7.61 2 12c1.75 4.39 5.58 7 10 7s8.25-2.61 10-7c-1.75-4.39-5.58-7-10-7zm0 12c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" fill="#555"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="confirm-password">Подтверждение пароля:</label>
                            <div class="password-wrapper">
                                <input type="password" id="confirm-password" name="confirm_password" required>
                                <button type="button" onclick="togglePasswordVisibility('confirm-password', this)" class="password-toggle">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="#555" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 5C7.58 5 3.75 7.61 2 12c1.75 4.39 5.58 7 10 7s8.25-2.61 10-7c-1.75-4.39-5.58-7-10-7zm0 12c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" fill="#555"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <button type="submit" class="submit-button">Зарегистрироваться</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script src="static/js/scripts.js"></script>
  
</body>

</html>

================================================================================
Файл: app\templates\index.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Title and description for SEO -->
    <title>Аукционы монет - Онлайн платформа</title>
    <meta name="description" content="Узнайте всё о текущих, предстоящих и завершённых аукционах монет. Участвуйте, делайте ставки и побеждайте!">

    <!-- Keywords for search engines -->
    <meta name="keywords" content="аукционы, монеты, онлайн торги, коллекционные монеты, купить монеты, ставки, нумизмат">

    <!-- Author information -->
    <meta name="author" content="Монеты.ру">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    
    <link rel="stylesheet" href="static/css/custom_alert.css">
    <link rel="stylesheet" href="static/css/Holder.css">
    <link rel="stylesheet" href="static/css/AuctionCard.css">
    <link rel="stylesheet" href="static/css/Auctions.css">
    <link rel="stylesheet" href="static/css/root.css">
    <link rel="icon" href="static/images/favicon.ico">
    <meta name="google-site-verification" content="HAlZ4y-L6wbpXewL4wf2JtmcPVaojQ5XEAfMJwcj-cg" />
    <script src="static/js/custom_alert.js"></script>
</head>
<body>
    
    <div class = "Sidebar">

    </div>

    <div class="Holder">
        <div id="loadingScreen" class="loading-screen">
            <div class="spinner"> </div> 
            <p>Загрузка...</p>
        </div>
        <div class="dashboard-content">
            <h2 id="active-header" style="display: none;">Активные аукционы</h2>
            <div id="activeAuctions" class="auction-grid"></div> <!-- Контейнер для активных аукционов -->

            <h2 id="upcoming-header" style="display: none;">Предстоящие аукционы</h2>
            <div id="upcomingAuctions" class="auction-grid"></div> <!-- Контейнер для предстоящих аукционов -->

            <h2 id="finished-header" style="display: none;">Завершенные аукционы</h2>
            <div id="completedAuctions" class="auction-grid"></div> <!-- Контейнер для завершенных аукционов -->
        </div>
    </div>


    <script src="static/js/index.js"></script>
    <script src="static/js/SidebarLoad.js"></script>
</body>

</html>

================================================================================
Файл: app\templates\sidebar.html
================================================================================
<link rel="stylesheet" href="static/css/Sidebar.css">
<link rel="stylesheet" href="static/css/custom_alert.css">


<div class="Sidebar">
    <div class="Header">
        <img src="static/images/logo.png" alt="Логотип">
        <span>Monety.ru</span>
    </div>

    <ul class="NavigationList">
        <li>
            <a href="/">
                <img src="static/images/hammer.svg" alt=" ">
                <span>Все лоты</span>
            </a>
        </li>
        <li>
            <a href="/account">
                <img src="static/images/user.svg" alt=" ">
                <span>Личный кабинет</span>
            </a>
        </li>
        <li>
            <a href="/about">
                <img src="static/images/about.svg" alt=" ">
                <span>О нас</span>
            </a>
        </li>
        <li>
            <a href="https://t.me/monety_shop">
                <img src="static/images/telegram.svg" alt=" ">
                <span>Анонсы в ТГ</span>
            </a>
        </li>
  
    </ul>

    <div class="UserBulb" onclick="handleLogout()">
        <div class="button">
            <img src="static/images/logout.svg" alt="Пользователь">
            <span class="Username" id="nickname">Войти</span>
        </div>
    </div>
</div>

================================================================================
Файл: restore_from_backups\backuper.py
================================================================================
import os
import json
import hashlib
import datetime
import pymongo
import argparse
from pathlib import Path
from dotenv import load_dotenv
import time

# Load environment variables from .env file
load_dotenv()

# Define file for storing the last backup hash
LAST_BACKUP_HASH_FILE = "last_backup_hash.txt"

# Load last backup hash from file (if exists)
def load_last_backup_hash():
    if Path(LAST_BACKUP_HASH_FILE).exists():
        with open(LAST_BACKUP_HASH_FILE, "r", encoding="utf-8") as f:
            return f.read().strip()
    return None

# Save current backup hash to file
def save_current_backup_hash(current_hash):
    with open(LAST_BACKUP_HASH_FILE, "w", encoding="utf-8") as f:
        f.write(current_hash)

# Parse command-line arguments
parser = argparse.ArgumentParser(description="MongoDB Backup Script")
parser.add_argument(
    "--mongo_uri", 
    type=str, 
    required=False, 
    help="MongoDB URI", 
    default=os.getenv("MONGO_URI", "mongodb://localhost:27017/")
)
parser.add_argument(
    "--db_name", 
    type=str, 
    required=False, 
    help="MongoDB Database Name", 
    default=os.getenv("DB_NAME", "your_database")
)
args = parser.parse_args()

# Connect to MongoDB
client = pymongo.MongoClient(args.mongo_uri)
db = client[args.db_name]

# Function to calculate hash of JSON data with datetime handling
def calculate_hash(data):
    # Define a custom serializer for datetime objects
    def default_serializer(obj):
        if isinstance(obj, datetime.datetime):
            return obj.isoformat()  # Convert datetime to ISO format string
        raise TypeError(f"Type {type(obj)} not serializable")

    data_str = json.dumps(data, sort_keys=True, default=default_serializer)
    return hashlib.sha256(data_str.encode()).hexdigest()

# Check for changes: calculate the hash of the entire database
def calculate_database_hash():
    db_hash = ""
    for collection_name in db.list_collection_names():
        collection = db[collection_name]
        documents = list(collection.find({}, {"_id": 0}))  # Extract data without _id

        if documents:
            # Calculate hash of the collection's current data
            collection_hash = calculate_hash(documents)
            db_hash += collection_hash
    return hashlib.sha256(db_hash.encode()).hexdigest()

# Perform backup if there are changes
def perform_backup():
    print("Checking for database changes...")

    # Load last backup hash and calculate the current hash
    last_backup_hash = load_last_backup_hash()
    current_hash = calculate_database_hash()

    if last_backup_hash != current_hash:
        # Create a backup if changes are detected
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = f"backup_{args.db_name}_{timestamp}.json"
        
        all_data = []
        for collection_name in db.list_collection_names():
            collection = db[collection_name]
            documents = list(collection.find({}, {"_id": 0}))  # Extract data without _id
            if documents:
                all_data.append({"collection_name": collection_name, "documents": documents})

        data_str = json.dumps(all_data, ensure_ascii=False, default=str)

        # Save the backup to a file
        with open(backup_file, "w", encoding="utf-8") as f:
            f.write(data_str)

        print(f"Backup created for database {args.db_name}: {backup_file}")
        
        # Save the current hash to the file for future comparison
        save_current_backup_hash(current_hash)
    else:
        print("No changes detected, backup not needed.")

# Run the backup once a day
while True:
    perform_backup()
    print("Waiting for the next backup in 24 hours...")
    time.sleep(86400)  # Sleep for 24 hours (86400 seconds)

================================================================================
Файл: restore_from_backups\restore.py
================================================================================
from dotenv import load_dotenv
import pymongo
import argparse
import os
import json 

load_dotenv()

# Parse command-line arguments
parser = argparse.ArgumentParser(description="MongoDB Backup Script")
parser.add_argument(
    "--mongo_uri", 
    type=str, 
    required=False, 
    help="MongoDB URI", 
    default=os.getenv("MONGO_URI")
)
parser.add_argument(
    "--db_name", 
    type=str, 
    required=False, 
    help="MongoDB Database Name", 
    default=os.getenv("DB_NAME")
)

parser.add_argument(
    "--file_path", 
    type=str, 
    required=False, 
    help="relative path to json", 
    default= "backup_Torgi_Monet_20250212_151905.json"
)



args = parser.parse_args()

client = pymongo.MongoClient(args.mongo_uri)
db = client[args.db_name]

def restore():
    
    with open(args.file_path, 'r', encoding="utf-8") as file:
        data = json.load(file)
    
    for collection in data:
        db[collection["collection_name"]].insert_many(collection["documents"])
        print(collection["collection_name"])
        
if __name__=="__main__":
    restore()